<template>
  <div>
    <div class="page-bar">
      <div class="q-pa-md q-gutter-sm">
        <q-breadcrumbs>
          <q-breadcrumbs-el label="Trang chủ" icon="home" to="/" />
          <q-breadcrumbs-el label="Danh sách người dùng" to="/nguoidunglist" />
          <q-breadcrumbs-el label="Thêm mới" />
        </q-breadcrumbs>
      </div>
    </div>
    <div class="q-pa-md">
      <div class="portlet box blue">
        <div class="portlet-title">
          <div class="caption">
            <i class="fa fa-plus" aria-hidden="true"></i> Thêm mới
          </div>
        </div>
        <div class="portlet-body form">
          <form class="login-form layout-padding" addform @submit.prevent.stop="onValidate">
            <div class="form-body">
              <div class="form-group row col-12">
                <label class="col-md-2 col-control-label">
                  Tài khoản
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-input
                    ref="taiKhoan"
                    v-model="model.taiKhoan"
                    @blur="model.taiKhoan = model.taiKhoan.trim()"
                    dense
                    maxlength="50"
                    outlined
                    lazy-rules
                    :rules="[ val => val && val.length > 0  || 'Tài khoản không được để trống'
                    ,val => !val.match(/[^A-Za-z0-9]/) || 'Tài khoản không nhập ký tự đặc biệt hoặc có dấu']"
                  />
                </div>
                <label class="col-md-2 col-control-label">
                  Họ tên
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-input
                    ref="hoTen"
                    v-model="model.hoTen"
                    @blur="model.hoTen = model.hoTen.trim()"
                    dense
                    maxlength="250"
                    outlined
                    lazy-rules
                    :rules="[ val => val && val.length > 0 || 'Họ tên không được để trống'
                     , val=>val && val.length <=250 || 'Không được nhập quá 250 ký tự']"
                  />
                </div>
              </div>
              <div class="form-group row col-12">
                <label class="col-md-2 col-control-label">
                  Loại hình người dùng
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-select
                    :options-sanitize="true"
                    ref="getThanhVien"
                    filter
                    use-input
                    hide-selected
                    fill-input
                    v-model="model.getThanhVien"
                    dense
                    outlined
                    input-debounce="0"
                    :options="optionThanhViens"
                    @input="(newVal) => { 
                    this.model.getThanhVien = newVal; 
                    this.model.thanhVien = (newVal.value == 'TV' ? true : false) ;
                    this.model.chuKySo = this.model.thanhVien;
                    getNhomNguoiDung(); }"
                    lazy-rules
                    :rules="[
                      val => val.value !== '' || 'Vui lòng chọn chức vụ'
                    ]"
                  >
                    <template v-slot:no-option>
                      <q-item>
                        <q-item-section class="text-grey">Không có kết quả</q-item-section>
                      </q-item>
                    </template>
                  </q-select>
                </div>                
                <label class="col-md-2 col-control-label" v-if="!model.thanhVien">
                  Công ty quản lý                
                </label>
                <label class="col-md-2 col-control-label" v-if="model.thanhVien">
                  Công ty
                  <span v-if="model.thanhVien" style="color:red">(*)</span>
                </label>

                <div class="col-md-4" v-if="!model.thanhVien">
                  <q-select
                    :options-sanitize="true"
                    ref="getArrCtckId"
                    multiple
                    v-model="model.getArrCtckId"
                    dense
                    outlined
                    use-input
                    input-debounce="0"
                    :options="optionCtckThongTinsTemp"
                    @filter="filterCongTy"
                    @input="(newVal) => { 
                    this.model.getArrCtckId = newVal;  }"
                    lazy-rules
                    :rules="[
                      val => val.value !== '' || 'Vui lòng chọn công ty'
                    ]"
                  >
                    <template v-slot:no-option>
                      <q-item>
                        <q-item-section class="text-grey">Không có kết quả</q-item-section>
                      </q-item>
                    </template>
                  </q-select>
                </div>
                <div class="col-md-4" v-else>
                  <q-select
                    :options-sanitize="true"
                    ref="getOneCtckId"
                    v-model="model.getOneCtckId"
                    dense
                    outlined
                    use-input
                    input-debounce="0"
                    :options="optionCtckThongTinsTemp"
                    @filter="filterCongTy"
                    @input="(newVal) => { 
                    this.model.getOneCtckId = newVal;  }"
                    lazy-rules
                    :rules="[
                      val => val.value.name !== '' || 'Vui lòng chọn công ty'
                    ]"
                  >
                    <template v-slot:no-option>
                      <q-item>
                        <q-item-section class="text-grey">Không có kết quả</q-item-section>
                      </q-item>
                    </template>
                  </q-select>
                </div>
              </div>
              <div class="form-group row col-12">
                <!-- <label class="col-md-2 col-control-label">
                  Chức vụ
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-select :options-sanitize="true"
                    ref="getDmChucVuId"
                    filter
                    use-input
                    hide-selected
                    fill-input
                    v-model="model.getDmChucVuId"
                    dense
                    outlined
                    input-debounce="0"
                    :options="optionChucVus"
                    @input="(newVal) => { 
                    this.model.getDmChucVuId = newVal;  }"
                    lazy-rules
                    :rules="[
                      val => val.value !== '' || 'Vui lòng chọn chức vụ'
                    ]"
                  >
                    <template v-slot:no-option>
                      <q-item>
                        <q-item-section class="text-grey">Không có kết quả</q-item-section>
                      </q-item>
                    </template>
                  </q-select>
                </div>-->
                <label class="col-md-2 col-control-label">
                  Email
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-input
                    ref="email"
                    v-model="model.email"
                    @blur="model.email = model.email.trim()"
                    dense
                    outlined
                    maxlength="100"
                    lazy-rules
                    :rules="[ val => val && val.length > 0 || 'Email không được để trống', 
                      ,val => val.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/igm) || 'Email nhập sai định dạng']"
                  />
                </div>
                <label class="col-md-2 col-control-label">
                  Di động
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-input
                    ref="diDong"
                    v-model="model.diDong"
                    @blur="model.diDong = model.diDong.trim()"
                    dense
                    maxlength="15"
                    outlined
                    lazy-rules
                    :rules="[ val => val && val.length > 0  || 'Di động không được để trống'
                    ]"
                  />
                </div>
              </div>
              <div class="form-group row col-12">
                <label class="col-md-2 col-control-label">
                  Nhóm người dùng
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-select
                    :options-sanitize="true"
                    ref="nhomNguoiDungId"
                    multiple
                    v-model="model.nhomNguoiDungId"
                    dense
                    outlined
                    :options="optionNhomNguoiDungs"
                    lazy-rules
                    :rules="[
                      val => val.value !== '' || 'Vui lòng chọn nhóm người dùng'
                    ]"
                  >
                    <template v-slot:no-option>
                      <q-item>
                        <q-item-section class="text-grey">Không có kết quả</q-item-section>
                      </q-item>
                    </template>
                  </q-select>
                </div>
                <label class="col-md-2 col-control-label">Chữ ký số</label>
                <div class="col-md-4">
                  <div class="q-gutter-sm">
                    <q-checkbox v-model="model.chuKySo" />
                  </div>
                </div>

                <!-- <label class="col-md-2 col-control-label">Thành viên</label>
                <div class="col-md-4">
                  <div class="q-gutter-sm">
                    <q-checkbox v-model="model.thanhVien" />
                  </div>
                </div>-->
              </div>
              <div class="form-group row col-12">
                <!-- <label class="col-md-2 col-control-label">
                  Ngày hết hạn
                  <span style="color:red">(*)</span>
                </label>
                <div class="col-md-4">
                  <q-input
                    ref="ngayHetHan"
                    :value="model.ngayHetHan"
                    v-model="model.ngayHetHan"
                    dense
                    outlined
                    lazy-rules
                    :rules="[ val => val && val.length > 0 || 'Ngày hết hạn không được để trống'
                    ,val => val.match(/^\s*(3[01]|[12][0-9]|0?[1-9])\/(1[012]|0?[1-9])\/((?:19|20)\d{2})\s*$/g) || 'Ngày hết hạn nhập sai định dạng']"
                  >
                    <template v-slot:append>
                      <q-icon name="event" class="cursor-pointer" color="primary">
                        <q-popup-proxy
                          ref="qDateProxy"
                          transition-show="scale"
                          transition-hide="scale"
                        >
                          <q-date
                            v-model="model.ngayHetHanIgnore"
                            @input="(val) => 
                            {
                            var newTuNgay = new Date(val); 
                            model.ngayHetHan = newTuNgay.getDate() + '/' + (newTuNgay.getMonth() + 1) + '/' + newTuNgay.getFullYear();
                             $refs.qDateProxy.hide()}"
                          ></q-date>
                        </q-popup-proxy>
                      </q-icon>
                    </template>
                  </q-input>
                </div>-->
              </div>
              <div class="form-group row col-12" style="margin-top:10px">
                <label class="col-md-2 col-control-label">
                  Ảnh đại diện
                  <!-- <span style="color:red">(*)</span> -->
                </label>

                <div class="col-md-10">
                  <q-uploader
                      ref="uploader"
                      :url="uploadURL"
                      v-model="tmpPathUpload"
                      :headers="Authorization"
                      @removed="fileRemoved"
                      auto-upload
                      :factory="getSignedUrlTEMP"
                      label="Đăng tải tệp đính kèm"
                      accept=".doc, .docx, .pdf, .xls, .xlsx"
                      multiple
                    >
                      <template v-slot:list="scope">
                        <q-list separator>
                          <q-item v-for="file in scope.files" :key="file.name">
                            <q-item-section>
                              <q-item-label class="full-width ellipsis">{{ file.name }}</q-item-label>
                              <template v-if="file.__status=='failed' || (file.statusCks != undefined && file.statusCks != null && !file.statusCks)">
                              <q-item-label
                                caption
                                v-show="file.__status=='failed' || (file.statusCks != undefined && file.statusCks != null && !file.statusCks)"
                              >Trạng thái: <span style="color:red">Thất bại</span></q-item-label>
                              <q-item-label
                                caption
                                v-show="file.statusCks == null || (file.statusCks != undefined && file.statusCks != null && !file.statusCks)"
                              >{{ file.__sizeLabel }} / 0.00%</q-item-label>
                              </template>
                              <template v-else>
                              <q-item-label
                                caption
                              >Trạng thái: <span style="color:green">Thành công</span></q-item-label>
                              <q-item-label
                                caption
                              >{{ file.__sizeLabel }} / {{ file.__progressLabel }}</q-item-label>
                              </template>
                            </q-item-section>

                            <q-item-section v-if="file.__img" thumbnail class="gt-xs">
                              <img :src="file.__img.src" />
                            </q-item-section>

                            <q-item-section top side>
                              <q-btn
                                class="gt-xs"
                                size="12px"
                                flat
                                dense
                                round
                                icon="delete"
                                @click="scope.removeFile(file)"
                              />
                            </q-item-section>
                          </q-item>
                        </q-list>
                      </template>
                    </q-uploader>
                </div>
              </div>
              <div class="mb-10"></div>
              <div class="form-group row col-12">
                <label class="col-md-2 col-control-label">Ghi chú</label>
                <div class="col-md-4">
                  <q-input
                    v-model="model.ghiChu"
                    dense
                    outlined
                    maxlength="1000"
                    @blur="model.ghiChu == null ? true:model.ghiChu = model.ghiChu.trim()"
                    type="textarea"
                    rows="2"
                  />
                </div>
                <label class="col-md-1 col-control-label">Trạng thái</label>
                <div class="col-md-1">
                  <div class="q-gutter-sm">
                    <q-checkbox v-model="model.trangThai" />
                  </div>
                </div>
                <label
                  class="col-md-1 col-control-label"
                  v-show="model.getThanhVien.value == 'UBCKNN' ? true:false"
                >Quyền Admin</label>
                <div class="col-md-1" v-show="model.getThanhVien.value == 'UBCKNN' ? true:false">
                  <div class="q-gutter-sm">
                    <q-checkbox v-model="model.admin" />
                  </div>
                </div>
              </div>
              <div :class="model.thanhVien ? 'form-group row col-12 mt-10':'dn'">
                <fieldset style="width:100%">
                  <legend class="fwb">Danh sách Ip</legend>
                  <div class="portlet-body form">
                    <table class="q-table">
                      <thead>
                        <th></th>
                        <th align="center">
                          <q-btn
                            size="12px"
                            color="primary"
                            icon="add"
                            style="text-decoration:none"
                            title="Thêm ip"
                            v-on:click="addNewIp"
                          />
                        </th>
                      </thead>
                      <tbody>
                        <tr v-for="(item, idx) in arrIp" :key="idx">
                          <td>
                            <q-input
                              v-model="arrIp[idx].ip"
                              dense
                              maxlength="15"
                              outlined
                              lazy-rules
                              :rules="[ 
                              //val => val && val.length > 0  || 'Ip không được để trống',
                              val => val.match(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/gm) || 'Ip nhập chưa đúng định dạng']"
                            />
                          </td>

                          <td align="center">
                            <a title="Xóa" @click="removeIp(idx)" style="text-decoration:none;">
                              <q-btn round color="red" icon="clear" size="7px"></q-btn>
                            </a>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </fieldset>
              </div>
            </div>
            <div class="form-actions right">
              <q-btn
                size="12px"
                type="submit"
                color="primary"
                label="Thêm mới"
                icon="save"
                style="text-decoration:none;margin-right:5px"
                title="Thêm mới"
              />
              <q-btn
                size="12px"
                label="Trở về"
                to="/nguoidunglist"
                style="text-decoration:none"
                title="Trở về"
              />
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import baseCommon from "../../baseCommon";
import apiService from "../../services/apiService";
import Cookies from "js-cookie";
import httpsAuthor from "../../urlAuth/httpConnect";

const optionThanhVien = [
  {
    label: "Thành viên",
    value: "TV",
  },
  {
    label: "UBCKNN",
    value: "UBCKNN",
  },
];

export default {
  name: "nguoidungadd",
  mixins: [baseCommon, apiService],
  components: {},
  data() {
    var token = null;
    var Author = null;
    if (Cookies.get("tokenSCMS")) {
      token = Cookies.get("tokenSCMS");
    }
    if (token != null) {
      Author = [{ name: "Authorization", value: "Bearer " + `${token}` }];
    }
    return {
      uploadURL: httpsAuthor.httpConnect + "/uploadMultipleFiles",
      Authorization: Author,
      tmpPathUpload: [],
      tmpFileName: "",
      arrIp: [{ ip: "" }],
      arrNhomNguoiDung: [],
      arrCtck: [],
      optionChucVus: [],
      optionThanhViens: optionThanhVien,
      optionCtckThongTins: [],
      optionCtckThongTinsTemp: [],
      optionNhomNguoiDungs: [],
      model: {
        dmChucVuId: {
          label: "-- Chọn --",
          value: "",
        },
        getDmChucVuId: {
          label: "-- Chọn --",
          value: "",
        },
        ctckId: {
          label: "-- Chọn --",
          value: { name: "" },
        },
        getArrCtckId: [],
        getOneCtckId: {
          label: "-- Chọn --",
          value: { name: "" },
        },
        getThanhVien: {
          label: "Thành viên",
          value: "TV",
        },
        nhomNguoiDungId: [],
        maNguoiDung: "",
        taiKhoan: "",
        hoTen: "",
        email: "",
        diDong: "",
        anhDaiDien: "",
        // ngayHetHanIgnore: "",
        thanhVien: true,
        chuKySo: true,
        trangThai: true,
        // ngayHetHan: "",
        matKhau: "123123",
        matKhauDefault: "123123",
        tokenUser: "",
        ghiChu: "",
        admin: false,
      },
    };
  },
  mounted() {
    var self = this;

    //Load chức vụ
    var requestCV = {
      keySort: "tenChucVu",
      desc: false,
      trangThai: "true",
    };
    apiService.get(
      process.env.VUE_APP_ROOT_API + "chucvu/getall",
      requestCV,
      function (res) {
        self.optionChucVus = [];
        if (res != null && res.lstChucVu.length > 0) {
          var itemChucVu = {
            label: "-- Chọn --",
            value: "",
          };
          self.optionChucVus.push(itemChucVu);
          for (let index = 0; index < res.lstChucVu.length; index++) {
            itemChucVu = {
              label: res.lstChucVu[index].tenChucVu,
              value: res.lstChucVu[index].id,
            };
            self.optionChucVus.push(itemChucVu);
          }
        }
      },
      function () {}
    );
    //Load Ctck
    var requestCtck = {
      keySort: "tenTiengViet",
      desc: false,
    };
    apiService.get(
      process.env.VUE_APP_ROOT_API + "ctckthongtin/getall",
      requestCtck,
      function (res) {
        self.optionCtckThongTins = [];
        if (res != null && res.lstCtckThongTin.length > 0) {
          var itemCtck = {
            label: "-- Chọn --",
            value: { name: "" },
          };
          var itemCtck2 = {
            label: "Chọn tất cả",
            value: { name: "all" },
          };
          self.optionCtckThongTins.push(itemCtck);
          self.optionCtckThongTins.push(itemCtck2);
          for (let index = 0; index < res.lstCtckThongTin.length; index++) {
            itemCtck = {
              label: res.lstCtckThongTin[index].label,
              value: { name: res.lstCtckThongTin[index].ctckThongTinId },
            };
            self.optionCtckThongTins.push(itemCtck);
          }
        }
      },
      function () {}
    );
    this.getNhomNguoiDung();
  },
  created() {},
  methods: {
    filterCongTy(val, updateLH) {
      // updateLH
      var self = this;

      if (val === "") {
        updateLH(() => {
          self.optionCtckThongTinsTemp = self.optionCtckThongTins;
        });
        return;
      }

      updateLH(() => {
        const needle = val.toLowerCase();
        self.optionCtckThongTinsTemp = self.optionCtckThongTins.filter(
          (v) => v.label.toLowerCase().indexOf(needle) > -1
        );
      });
    },
    getNhomNguoiDung() {
      var self = this;
      self.model.nhomNguoiDungId = [];
      apiService.get(
        process.env.VUE_APP_ROOT_API + "qtnhomnguoidung/getall",
        { keySort: "tenNhomNguoiDung", trangThai: "true" },
        function (res) {
          self.optionNhomNguoiDungs = [];
          if (res != null && res.lstQtNhomNguoiDung.length > 0) {
            var itemNhomNguoiDung = {
              label: "-- Chọn --",
              value: { name: "" },
            };

            self.optionNhomNguoiDungs.push(itemNhomNguoiDung);
            let thanhVien = self.model.getThanhVien.value == "TV" ? 1 : 0;
            for (
              let index = 0;
              index < res.lstQtNhomNguoiDung.length;
              index++
            ) {
              itemNhomNguoiDung = {
                label: res.lstQtNhomNguoiDung[index].tenNhomNguoiDung,
                value: { name: res.lstQtNhomNguoiDung[index].id },
              };
              if (
                self.model.getThanhVien.value != null &&
                res.lstQtNhomNguoiDung[index].isThanhVien != null
              ) {
                if (res.lstQtNhomNguoiDung[index].isThanhVien == thanhVien) {
                  self.optionNhomNguoiDungs.push(itemNhomNguoiDung);
                }
              }
            }
          }
        },
        function () {}
      );
    },
    fileRemoved(_path) {
      var self = this;
      this.selectedFile = false;
      self.tmpPathUpload = self.tmpPathUpload.filter(function (el) {return el != null;});
      if (self.tmpPathUpload.length > 0) {
        const needle = _path[0].name.toLowerCase();
        var itemRemove = self.tmpPathUpload.filter(
          (v) => v != undefined && v != null && ((v.fileNameOriginal != null && v.fileNameOriginal.toLowerCase() == needle) || (v.fileName != null && v.fileName.toLowerCase() == needle))
        )[0];

        if (itemRemove != null) {
          self.tmpPathUpload.splice(self.tmpPathUpload.indexOf(itemRemove), 1);
        }
      }
    },
    async getSignedUrlTEMP(_file) {
      var self = this;
      return new Promise((resolve, reject) => {
        const files = new FormData();
        if (_file.length > 1) {
          for (var i = 0; i < _file.length; i++) {
            files.append("files", _file[i]);
          }
        } else {
          files.append("files", _file[0]);
        }
        apiService.postUploadFile(
          httpsAuthor.httpConnect + "/uploadMultipleFilesImport",
          files,
          function (res) {
            if (res != null) {
              if (res.status === 302) {
                reject(_file);
              } else if (res.status === 417) {
                self.displayError("Đăng tải File gặp sự cố, Vui lòng thử lại");
                resolve(null);
              } else if (res.status == 201) {
                self.tmpPathUpload.push(res.data[0]);
                resolve(_file);
              } else {
                reject(_file);
              }
            } else {
              reject(_file);
              self.displayError("Đăng tải File gặp sự cố, Vui lòng thử lại");
            }
          }
          // );
        );
      });
    },
    countInArray(array, what) {
      var count = 0;
      for (var i = 0; i < array.length; i++) {
        if (array[i].ip === what) {
          count++;
        }
      }
      return count;
    },
    validateDate() {
      //Validate Ip
      var self = this;
      var err = "";
      if (this.model.thanhVien && this.arrIp.length == 0) {
        err += "Bạn chưa thêm Ip!</br>";
      }
      if (this.arrIp.length > 0) {
        for (var i = 0; i < this.arrIp.length; i++) {
          if (this.arrIp[i] == "") {
            err += "Bạn chưa nhập đủ Ip!</br>";
            break;
          }
          if (this.countInArray(this.arrIp, this.arrIp[i].ip) > 1) {
            err += "Ip nhập vào bị trùng nhau!</br>";
            break;
          }
        }
      }
      if (
        this.model.nhomNguoiDungId.length == 0 ||
        (this.model.nhomNguoiDungId.length == 1 &&
          this.model.nhomNguoiDungId[0].value.name == "")
      ) {
        err += "Bạn chưa chọn nhóm người dùng!</br>";
      }
      if (!this.model.thanhVien) {
        if (
          this.model.getArrCtckId.length == 1 &&
          this.model.getArrCtckId[0].value.name == ""
        ) {
          err += "Bạn chưa chọn công ty!</br>";
        }
      } else {
        if (this.model.getOneCtckId.value.name == "") {
          err += "Bạn chưa chọn công ty! </br>";
        }
      }
      // if (
      //   self.tmpPathUpload == null ||
      //   (self.tmpPathUpload != null && self.tmpPathUpload.length == 0) ||
      //   self.tmpPathUpload == undefined
      // ) {
      //   err += "Bạn chưa chọn ảnh đại diện!</br>";
      //   // self.displayError("File đính kèm không được bỏ trống");
      //   // return;
      // }
      if (
        self.tmpPathUpload != null &&
        self.tmpPathUpload != null &&
        self.tmpPathUpload.length > 1 &&
        self.tmpPathUpload != undefined
      ) {
        err += "Ảnh đại diện chỉ được chọn 1 !</br>";
        // self.displayError("File đính kèm không được bỏ trống");
        // return;
      }
      return err;
    },

    addNewIp() {
      this.arrIp.push({ ip: "" });
    },
    removeIp(i) {
      this.arrIp.splice(i, 1);
    },
    onValidate() {
      this.$refs.taiKhoan.validate();
      this.$refs.hoTen.validate();
      // this.$refs.getDmChucVuId.validate();
      this.$refs.email.validate();
      this.$refs.diDong.validate();
      // this.$refs.ngayHetHan.validate();
      if (
        this.$refs.taiKhoan.hasError ||
        this.$refs.hoTen.hasError ||
        // this.$refs.getDmChucVuId.hasError ||
        this.$refs.email.hasError ||
        this.$refs.diDong.hasError
        // ||
        // this.$refs.ngayHetHan.hasError
      ) {
        this.formHasError = true;
      } else {
        this.saveSubmit();
      }
    },
    saveSubmit() {
      var self = this;
      var validStr = self.validateDate();
      if (validStr == "") {
        var lstIp = [];
        if (self.arrIp.length > 0) {
          for (let index = 0; index < self.arrIp.length; index++) {
            if (self.arrIp[index].ip != "") {
              lstIp.push(self.arrIp[index].ip);
            }
          }
        }
        if (!self.model.thanhVien) {
          lstIp = [];
        }
        self.arrNhomNguoiDung = [];
        if (self.model.nhomNguoiDungId.length > 0) {
          for (
            let indexNDD = 0;
            indexNDD < self.model.nhomNguoiDungId.length;
            indexNDD++
          ) {
            if (self.model.nhomNguoiDungId[indexNDD].value.name != "") {
              self.arrNhomNguoiDung.push(
                self.model.nhomNguoiDungId[indexNDD].value.name
              );
            }
          }
        }
        self.arrCtck = [];
        if (self.model.getArrCtckId.length > 0) {
          if(self.model.getArrCtckId.value.value.name == "all"){
            for(let i =0; i< self.optionCtckThongTins.size ; i++){
              self.arrCtck.push(self.model.getArrCtckId[i].value.name);
            }
          }
          for (
            let indexNDD = 0;
            indexNDD < self.model.getArrCtckId.length;
            indexNDD++
          ) {
            if (self.model.getArrCtckId[indexNDD].value.name != "") {
              self.arrCtck.push(self.model.getArrCtckId[indexNDD].value.name);
            }
          }
        }
        debugger

        if (self.tmpPathUpload.length > 0) {
          self.tmpPathUpload.forEach((element) => {
            self.model.anhDaiDien +=
              element.pathFile + "~" + element.fileName + "`";
          });

          self.model.anhDaiDien = self.model.anhDaiDien.substring(
            0,
            self.model.anhDaiDien.length - 1
          );
        }
        var request = {
          dmChucVuId: null,
          maNguoiDung: self.model.maNguoiDung,
          taiKhoan: self.model.taiKhoan,
          hoTen: self.model.hoTen,
          email: self.model.email,
          diDong: self.model.diDong,
          anhDaiDien: self.model.anhDaiDien,
          ngayHetHanStr: "",
          ngayHetHan: null,
          thanhVien: self.model.getThanhVien.value == "TV" ? true : false,
          chuKySo: self.model.chuKySo,
          trangThai: self.model.trangThai,
          matKhau: self.model.matKhau,
          matKhauDefault: self.model.matKhauDefault,
          ctckId: self.model.getOneCtckId.value.name,
          lstCtckId: self.arrCtck,
          tokenUser: self.model.tokenUser,
          ghiChu: self.model.ghiChu,
          lstIp: lstIp,
          lstNhomNguoiDung: self.arrNhomNguoiDung,
          admin:
            self.model.getThanhVien.value == "TV" ? false : self.model.admin,
        };
        self.model.anhDaiDien = "";

        apiService.post(
          process.env.VUE_APP_ROOT_API + "qtnguoidung/themmoi",
          JSON.stringify(request),
          function (res) {
            if (res != null) {
              if (res.status === 417) {
                self.displayError(res.data);
              } else {
                var strMessage = "Đã thêm mới thành công bản ghi: " + res.hoTen;
                self.displaySuccess(strMessage);
                self.$router.push("/nguoidunglist");
              }
            } else {
              self.displayError(res);
            }
          }
          // function() {
          //
          //   self.displayError("Thêm mới không thành công");
          // }
        );
      } else {
        self.displayError(validStr);
      }
    },
  },
};
</script>
