congThucStr.replaceAll = function (entity, needle, replacement, affectsKeys, affectsValues) {
    affectsKeys = typeof affectsKeys === "undefined" ? true : affectsKeys;
    affectsValues = typeof affectsValues === "undefined" ? true : affectsValues;

    var newEntity = {},
        regExp = new RegExp( needle, 'g' );
    for( var property in entity ) {
        if( !entity.hasOwnProperty( property ) ) {
            continue;
        }

        var value = entity[property],
            newProperty = property;

        if( affectsKeys ) {
            newProperty = property.replace( regExp, replacement );
        }

        if( affectsValues ) {
            if( typeof value === "object" ) {
                value = Object.replaceAll( value, needle, replacement, affectsKeys, affectsValues );
            } else if( typeof value === "string" ) {
                value = value.replace( regExp, replacement );
            }
        }

        newEntity[newProperty] = value;
    }

    return newEntity;
};


ctcknguoihanhngheck/export
ctckchinhanh/export
ctckpgiaodich/export
ctckvpdaidien/export

kiemtoanvien/export

public Resource loadTemplate() {
	return new ClassPathResource("ExcelTemp/kiem_toan_vien.xlsx");
}

D:\A_SCMS\server\02.SCMS-UBCK-Web\target\classes\ExcelTemp\kiem_toan_vien.xlsx


public static CellStyle createStyleForTitleTBCN(Sheet sheet, Workbook workbook) {
	Font headerFont = workbook.createFont();
	headerFont.setColor(IndexedColors.WHITE.index);

	// IndexedColors[] s = IndexColorList();
//		System.out.println(s);
//		list = new ArrayList<>();
//		IndexedColors[] itemColor = IndexColorList();
//
//		Collections.addAll(list, itemColor);
//		System.out.println(list);
	CellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();
	// fill foreground color ...
	headerCellStyle.setFillForegroundColor(IndexedColors.BLUE_GREY.index);
	// headerCellStyle.setFillForegroundColor(list.get(2).index);
	// and solid fill pattern produces solid grey cell fill
	headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	headerCellStyle.setFont(headerFont);
	headerCellStyle.setBorderBottom(BorderStyle.THIN);
	headerCellStyle.setBorderTop(BorderStyle.THIN);
	headerCellStyle.setBorderRight(BorderStyle.THIN);
	headerCellStyle.setBorderLeft(BorderStyle.THIN);
//		style.setColor(IndexedColors.BLACK.getIndex());

	return headerCellStyle;
}

exportExcel
0, 99999999


@SuppressWarnings("unused")
@RequestMapping(value = "/kiemtoanvien/export", method = RequestMethod.GET)
public ResponseEntity<ByteArrayResource> ExportExcel(
		@RequestParam(value = "sKeySearch", required = false) String keySearch,
		@RequestParam(value = "sTenTiengViet", required = false) String sTenTiengViet,
		@RequestParam(value = "sHoTen", required = false) String sHoTen,
		@RequestParam(value = "sTrangThai", required = false) String trangThai,
		@RequestParam(name = "pageNo", defaultValue = "0") Integer pageNo,
		@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
		@RequestParam(name = "desc", defaultValue = "false") boolean desc) throws ApiRequestException {

	CtckKiemToanVienGroupBDTO list = new CtckKiemToanVienGroupBDTO();
	try {
		XSSFWorkbook workbook = null;
		File template = loadTemplate().getFile();

		workbook = new XSSFWorkbook(new FileInputStream(template));

		list = service.listGroupByCongTy(keySearch, sTenTiengViet, sHoTen, trangThai, 0, 99999999, desc);
		XSSFSheet sheet = workbook.getSheet("KIEM_TOAN_VIEN");

		CellStyle style = CellConfig.createStyleForTitleTBCN(sheet, workbook);

		// row bat dau
		Integer rownum = 1;
		Cell cell;
		Row row;
		// Tạo tiêu đề
		row = sheet.createRow(rownum);
		cell = row.createCell(2, CellType.STRING);
		cell.setCellValue(
				"(Tính đến ngày " + TimestampUtils.TimestampToString_ddMMyyyy(Utils.getCurrentDate()) + ")");

		// Fill Data từ row 2
		rownum = 2;

		if (list != null && list.getListCongTy() != null && list.getListCongTy().size() > 0) {
			for (int i = 0; i < list.getListCongTy().size(); i++) {
				rownum++;
				row = sheet.createRow(rownum);
				cell = row.createCell(0, CellType.STRING);
				CellRangeAddress cellTenCongTyMerge = new CellRangeAddress(row.getRowNum(), row.getRowNum(), 0, 4);
				sheet.addMergedRegion(cellTenCongTyMerge);
				cell.setCellValue(list.getListCongTy().get(i).getTenCongTy());
				cell.setCellStyle(style);

				for (KiemToanVienDTO item : list.getListCongTy().get(i).getListKiemToanVien()) {
					rownum++;
					row = sheet.createRow(rownum);

					// STT
					cell = row.createCell(0, CellType.STRING);
					cell.setCellValue(rownum - 2);
					CellConfig.BorderTable(cell, sheet);

					// Họ tên
					cell = row.createCell(1, CellType.STRING);
					cell.setCellValue(item.getHoTen());
					CellConfig.BorderTable(cell, sheet);
					// Số chứng chỉ
					cell = row.createCell(2, CellType.STRING);
					cell.setCellValue(item.getSoChungChi());
					CellConfig.BorderTable(cell, sheet);
					// Ngày cấp
					cell = row.createCell(3, CellType.STRING);
					cell.setCellValue(item.getNgayCapFormat());
					CellConfig.BorderTable(cell, sheet);
					// Trạng thái
					cell = row.createCell(4, CellType.STRING);
					if (item.getTrangThai() != null && item.getTrangThai()) {
						cell.setCellValue("Hoạt động");
					} else {
						cell.setCellValue("Ngừng hoạt động");
					}
					CellConfig.BorderTable(cell, sheet);
				}
			}
		}
		CellConfig.autoSizeColumns(workbook);

		String fileName = "ds_congty_kiemtoan_"
				+ TimestampUtils.TimestampToString_ddMMyyyyHHmmFileName(Utils.getCurrentDate()) + ".xlsx";

		try {
			FileOutputStream out = new FileOutputStream(fileName);
			workbook.write(out);
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			workbook.write(bos);

			byte[] bytes = bos.toByteArray();
			ByteArrayResource resource = new ByteArrayResource(bytes);

			out.close();
			workbook.close();
			return ResponseEntity.ok()
					// Content-Disposition
					// Content-Type
					// .contentType(mediaType) //
					// Content-Lengh
					.contentLength(bytes.length) //
					.body(resource);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	} catch (Exception e) {
		logger.error(e.toString());
		return null;
	}
}
