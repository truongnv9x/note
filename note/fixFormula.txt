package scms.ubck.springboot.web.controller;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.ws.rs.core.Context;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import scms.ubck.bcThanhVienService.BcThanhVienService;
import scms.ubck.bcbaocaogtService.BcBaoCaoGtService;
import scms.ubck.bmbaocaoService.BmBaoCaoService;
import scms.ubck.ctckthongtin.Service.CtckThongTinService;
import scms.ubck.global.UserInfoGlobal;
import scms.ubck.global.WriteLogInDataBaseGlobal;
import scms.ubck.global.exception.ApiRequestException;
import scms.ubck.model.BaoCaoDinhKyImportDataBDTO;
import scms.ubck.model.BcBaoCaoGtDTO;
import scms.ubck.model.BcThanhVienDTO;
import scms.ubck.model.BmBaoCaoBDTO;
import scms.ubck.model.BmBaoCaoDTO;
import scms.ubck.model.BmBaoCaoExportDTO;
import scms.ubck.model.BmLichSuBaoCaoBDTO;
import scms.ubck.model.BmSheetCotDTO;
import scms.ubck.model.BmSheetCtDTO;
import scms.ubck.model.BmSheetDTO;
import scms.ubck.model.BmSheetHangDTO;
import scms.ubck.model.BmTieuDeHangCotDTO;
import scms.ubck.model.BmTieuDeHangDTO;
import scms.ubck.model.DataImportExcelBDTO;
import scms.ubck.model.DataImportExcelDTO;
import scms.ubck.model.DataSettingDTO;
import scms.ubck.model.DropDownDTO;
import scms.ubck.model.QtLogHeThongDTO;
import scms.ubck.model.QtNguoiDungDTO;
import scms.ubck.model.SheetItemDTO;
import scms.ubck.model.file.FileBieuMauDTO;
import scms.ubck.model.uploadfile.UploadFileDefaultDTO;
import scms.ubck.sheetService.SheetService;
import scms.ubck.utils.CellConfig;
import scms.ubck.utils.Constant;
import scms.ubck.utils.Constants;
import scms.ubck.utils.DateTimeConvertUtil;
import scms.ubck.utils.TimestampUtils;
import scms.ubck.utils.Utils;
import scms.ubck.utils.Utils.MQH;

@Controller
@CrossOrigin(origins = Utils.BaseUrl)
@RestController
@RequestMapping("/api/v1")
public class BmBaoCaoApiController {

	public static final Logger logger = LoggerFactory.getLogger(BmBaoCaoApiController.class);

	@Autowired
	@Qualifier("BmBaoCaoServiceImp")
	private BmBaoCaoService bcService;

	@Autowired
	@Qualifier("CtckThongTinServiceImpl")
	private CtckThongTinService ttCtckService;

	@Autowired
	@Qualifier("SheetServiceImpl")
	private SheetService sheetService;

	@Autowired
	@Qualifier("BcThanhVienServiceImpl")
	private BcThanhVienService bcThanhVienService;

	@Autowired
	@Qualifier("BcBaoCaoGtServiceImpl")
	private BcBaoCaoGtService bcBaoCaoGtService;
//note
	@Autowired
	@Qualifier("BmBaoCaoServiceImp")
	private BmBaoCaoService bmBaoCaoService;

	/**
	 * danh sách mqh các cổ đông công ty chứng khoans
	 * 
	 * @param strfilter
	 * @param pageNo
	 * @param pageSize
	 * @param keySort
	 * @param desc
	 * @param sIdCTCK
	 * @param sTenCoDong
	 * @param sLoaiCoDong
	 * @return
	 * @throws ApiRequestException
	 */
	@RequestMapping(value = "/bmbaocao/filter1", method = RequestMethod.GET)
	public ResponseEntity<BmBaoCaoBDTO> listBieuMauBaoCao(
			@Valid @RequestParam(value = "keySearch", required = false) String keySearch,
			@RequestParam(name = "pageNo", defaultValue = "0") Integer pageNo,
			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
			@RequestParam(name = "keySort", defaultValue = "id") String keySort,
			@RequestParam(name = "desc", defaultValue = "false") boolean desc,
			@RequestParam(value = "tenBaoCao", required = false) String tenBaoCao,
			@RequestParam(value = "canCuPhapLy", required = false) String canCuPhapLy,
			@RequestParam(value = "trangThai", defaultValue = "") Integer trangThai,
			@RequestParam(value = "loaiBaoCao", required = false) String loaiBaoCao,
			@RequestParam(value = "kieuBaoCao", defaultValue = "0") Integer kieuBaoCao,
			@RequestParam(value = "maBaoCao", required = false) String maBaoCao,
			@RequestParam(value = "nhomBaoCao", required = false) String nhomBaoCao) throws ApiRequestException {

		if (!checkKeySort(keySort)) {

			throw new ApiRequestException(Constants.Messages.KEYSORT_FAIL, HttpStatus.EXPECTATION_FAILED);
		}

		try {

			logger.info(Constants.Logs.LIST);
			if (pageNo > 0) {
				pageNo = pageNo - 1;
			}
			BmBaoCaoBDTO lstCoDong = bcService.listBieuMauBaoCao(keySearch, tenBaoCao, canCuPhapLy, trangThai,
					loaiBaoCao, pageNo, pageSize, keySort, desc, kieuBaoCao, maBaoCao, nhomBaoCao);

			return new ResponseEntity<BmBaoCaoBDTO>(lstCoDong, HttpStatus.OK);

		} catch (Exception e) {
			logger.error(e.toString());
			throw new ApiRequestException(Constants.Messages.EXCEPTION_FAIL, HttpStatus.EXPECTATION_FAILED);
		}
	}

	/**
	 * Create mqh cổ đông
	 * 
	 * @param qt json object
	 * @return ResponseEntity
	 * @throws ApiRequestException
	 */
	@PostMapping("/bmbaocao/themmoi")
	public ResponseEntity<?> createBmBaoCao(@Valid @RequestBody BmBaoCaoDTO dto, @Context HttpServletRequest request)
			throws ApiRequestException {
		logger.info(Constants.Logs.CREATE);

		if (bcService.isExistAdd(dto)) {
			// lấy thông tin user
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			dto.setNguoiTaoId(userInfo.getId());
			try {
				if (!StringUtils.isEmpty(dto.getFileDinhKem())) {
					dto.setFileDinhKem(Utils.CommonSavePathFile(dto.getFileDinhKem(),
							Constants.FolderUpload.FOLDER_BMBAOCAO, request));

				}

				BmBaoCaoDTO output = bcService.addorUpdateBmBaoCao(dto);

				QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

				// set IP thực hiện lấy IP remote client
				dtoLog.setIpThucHien(Utils.getClientIp(request));
				dtoLog.setLogType(Constants.LogSystem.LOG_SYS_ADD + "_BMBAOCAO");
				dtoLog.setNgayTao(TimestampUtils.DateUtilsParseTimeStamp(new Date()));
				dtoLog.setNguoiTaoId(userInfo.getId());
				dtoLog.setNoiDung(
						"Tài khoản " + userInfo.getTaiKhoan() + " thêm mới biểu mẫu báo cáo " + output.getTenBaoCao());
				// save db
				WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

				return new ResponseEntity<BmBaoCaoDTO>(output, HttpStatus.CREATED);

			} catch (Exception e) {
				logger.error(e.getMessage());

				throw new ApiRequestException(Constants.Messages.CREATE_FAIL, HttpStatus.EXPECTATION_FAILED);

			}

		}
		throw new ApiRequestException(Constants.Messages.RC_EXIST, HttpStatus.EXPECTATION_FAILED);

	}

	@PutMapping("/bmbaocao/capnhat")
	public ResponseEntity<?> updateBmBaoCao(@Valid @RequestBody BmBaoCaoDTO dto, @Context HttpServletRequest request)
			throws ApiRequestException {
try {
		logger.info(Constants.Logs.UPDATE);

// check upload file
		
		if (dto.getArrFileDinhKem() != null && dto.getArrFileDinhKem().size() > 0) {
			String filePathUpload = this.uploadFileDinhKem(dto.getArrFileDinhKem(),
					dto.getFileDinhKem(), request);
			if (filePathUpload == null) {

				throw new ApiRequestException("Cập nhật tài liệu đính kèm bị lỗi!", HttpStatus.EXPECTATION_FAILED);
			}
			dto.setFileDinhKem(filePathUpload);
		} else {
			dto.setFileDinhKem(Utils.CommonSavePathFile(dto.getFileDinhKem(),
					Constants.FolderUpload.FOLDER_BMBAOCAO, request));
		}
//		String PathUpload_update = "";
//		if (dto.getArrFileDinhKem() != null && !dto.getArrFileDinhKem().isEmpty()) {
//			for (UploadFileDefaultDTO e : dto.getArrFileDinhKem()) {
//				if (!StringUtils.isEmpty(e.getNameFile())) {
//					PathUpload_update += e.getPath() + ",";
//				}
//			}
//			if (PathUpload_update != "") {
//				PathUpload_update = PathUpload_update.substring(0, PathUpload_update.length() - 1);
//			}
//		}
//
//		// add file moi
//		if (!StringUtils.isEmpty(dto.getFileDinhKem())) {
//			String UrlPathCDNLQ = Constants.FolderUpload.FOLDER_BMBAOCAO;
//			String[] splipPath = dto.getFileDinhKem().split("`");
//			String pathNew = "";
//			if (splipPath.length > 0) {
//				for (int i = 0; i < splipPath.length; i++) {
//					String path = splipPath[i];
//					String[] pathRelative = path.split("~");
//					if (pathRelative.length > 0 && pathRelative.length < 3) {
//						System.out.println(pathRelative[1]);
//						System.out.println(request.getServletContext().getRealPath("/") + pathRelative[0]);
//						File file = new File(pathRelative[0]);
//						Path tmpPath = Paths.get(UrlPathCDNLQ);
//						String tmp = request.getServletContext().getRealPath("/") + tmpPath.toFile();
//						try {
//							Utils.MoveFileToDirectory(file, tmp);
//						} catch (IOException e) {
//
//							throw new ApiRequestException("Đăng tải tài liệu không thành công!",
//									HttpStatus.EXPECTATION_FAILED);
//						}
//						pathNew += UrlPathCDNLQ + pathRelative[1] + ",";
//
//					}
//
//				}
//
//			}
//			if (pathNew != null) {
//				pathNew = pathNew.substring(0, pathNew.length() - 1);
//				if (PathUpload_update != "") {
//					PathUpload_update = PathUpload_update + "," + pathNew;
//				} else {
//					PathUpload_update = pathNew;
//				}
//
//			}
//
//		}
//		PathUpload_update = PathUpload_update.replace("\\", "/");
//		dto.setFileDinhKem(PathUpload_update);

		if (dto.getId()!=null) {
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			try {
				dto.setNguoiCapNhatId(userInfo.getId());
				// lấy dữ liệu cũ trươc skhi add
				BmBaoCaoDTO oldObject = this.bcService.findById(dto.getId());

				BmBaoCaoDTO newObject = bcService.addorUpdateBmBaoCao(dto);
				if (!StringUtils.isEmpty(oldObject.getFileDinhKem())) {
					// lấy các path của old và new
					if(newObject.getFileDinhKem()==null) {
						newObject.setFileDinhKem("");
					}
					if(oldObject.getFileDinhKem()==null) {
						oldObject.setFileDinhKem("");
					}
					String[] pathOld = oldObject.getFileDinhKem().split(",");
					String[] pathNew = newObject.getFileDinhKem().split(",");
					List<String> oldList = null;
					List<String> NewList = null;

					if (pathOld.length > 0) {
						oldList = Arrays.asList(pathOld);
					}
					if (pathNew.length > 0) {
						NewList = Arrays.asList(pathNew);
					}
					// biến chứa path cần remove
					List<String> pathRemove = new ArrayList<>();
					// check các trường hợp để add vào pathRemove
					if (oldList != null && NewList == null) {
						pathRemove.addAll(oldList);
					} else if (oldList != null && NewList != null) {
						for (String path : oldList) {
							if (!StringUtils.isEmpty(path) && !NewList.contains(path)) {
								pathRemove.add(path);
							}
						}
					}
					// kiểm tra nếu path cần xóa thì xóa
					if (!pathRemove.isEmpty()) {
						for (String pathx : pathRemove) {
							Utils.DeleteFile(Constant.UPLOADNOTTEMPFOLDER + pathx);
						}
					}

				}

				QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

				// set IP thực hiện lấy IP remote client
				dtoLog.setIpThucHien(Utils.getClientIp(request));
				dtoLog.setLogType(Constants.LogSystem.LOG_SYS_UPDATE + "_BMBAOCAO");
				dtoLog.setNgayTao(TimestampUtils.DateUtilsParseTimeStamp(new Date()));
				dtoLog.setNguoiTaoId(userInfo.getId());
				dtoLog.setNoiDung(
						"Tài khoản " + userInfo.getTaiKhoan() + " cập nhật biểu mẫu báo cáo " + dto.getTenBaoCao());
				// save db
				WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

				return new ResponseEntity<BmBaoCaoDTO>(dto, HttpStatus.ACCEPTED);
			} catch (Exception e) {
				logger.error(e.getMessage());
				throw new ApiRequestException(Constants.Messages.UPDATE_FAIL, HttpStatus.EXPECTATION_FAILED);

			}

		}
		throw new ApiRequestException(Constants.Messages.RC_EXIST, HttpStatus.EXPECTATION_FAILED);

	}catch (Exception e) {
		logger.error(e.getMessage());
		throw new ApiRequestException(Constants.Messages.UPDATE_FAIL, HttpStatus.EXPECTATION_FAILED);
	}
	}

	/**
	 * Get data from excel file;
	 * 
	 * @param file
	 * @return
	 * @throws ApiRequestException
	 */
	@SuppressWarnings("unused")
	private List<DataImportExcelDTO> getImportDataFromExcelFile(FileBieuMauDTO file, Workbook workbook)
			throws ApiRequestException {
		List<DataImportExcelDTO> result = new ArrayList<DataImportExcelDTO>();
		try {

			// Get thanh vien Id theo gia tri bao cao.
			int thanhVienId = this.getThanhVienIdByGtBaoCao(file);

			List<BcBaoCaoGtDTO> lsGiaTri = new ArrayList<BcBaoCaoGtDTO>();

			BmBaoCaoExportDTO bmBaoCao = bcService.getDataExport(file.getBmBaoCaoId());
			List<BmSheetDTO> listBmSheet = bmBaoCao.getListBmSheet();
			Map<Integer, XSSFSheet> mapSheetExcel = getSheetExcelByBmSheetId(workbook, listBmSheet);
			XSSFSheet sheeExcel;

			for (BmSheetDTO bmSheet : listBmSheet) {

				sheeExcel = mapSheetExcel.get(bmSheet.getId());

				Collection<BmSheetCotDTO> cots = null;
				Collection<BmSheetHangDTO> hangs = null;
				Collection<BmTieuDeHangDTO> tieuDeHang = null;

				// [Update] - get ds gia tri.
				if (thanhVienId > 0) {
					lsGiaTri = this.bcBaoCaoGtService.getLsGiaTriBaoCaoThanhVien(file.getBmBaoCaoId(), thanhVienId,
							bmSheet.getId());
				}

				cots = bmSheet.getBmSheetCotCollection();
				hangs = bmSheet.getBmSheetHangCollection();
				tieuDeHang = bmSheet.getBmTieuDeHangCollection();

				int hang = hangs == null ? 0 : hangs.size();
				int cot = cots == null ? 0 : cots.size();
				int tongHangTieuDe = tieuDeHang == null ? 0 : tieuDeHang.size();

				int i = tongHangTieuDe;
				int hangBatDau = tongHangTieuDe;
				int hangKetThuc = hang + tongHangTieuDe;

				Row row = null;
				Cell cell = null;

				DataImportExcelDTO dataItem = new DataImportExcelDTO();

				for (i = hangBatDau; i < hangKetThuc; i++) {

					// TODO Check null for sheetExcel.
					row = sheeExcel.getRow(i);
					for (int j = 0; j < cot; j++) {
						if ((null == row) || (null == row.getCell(j))) {
							continue;
						}
						cell = row.getCell(j);
						dataItem = getDataItem(bmSheet, cell, file, i, j, hangBatDau, lsGiaTri);
						result.add(dataItem);
					}
				}

			}
			return result;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.UPDATE_FAIL, HttpStatus.EXPECTATION_FAILED);

		}
	}

	private DataSettingDTO getDataSetting(XSSFSheet sheetSetting, int soHang, int soCot, int hangBatDau) {

		DataSettingDTO dataSettingDto = new DataSettingDTO();

		Row row = null;
		Cell cell = null;
		String key = null;
		Boolean hangDong = null;

		Map<String, Integer> mapDataSetting = new HashMap<String, Integer>();

		Map<Integer, Integer> mapHang = new HashMap<Integer, Integer>();
		Map<Integer, Integer> mapCot = new HashMap<Integer, Integer>();

		Map<Integer, Boolean> mapHangDong = new HashMap<Integer, Boolean>();
		String stringCell = null;
		Integer chiTieuId = null;
		@SuppressWarnings("unused")
		Integer IndexHang = null;
		@SuppressWarnings("unused")
		Integer IndexCot = null;
		int hangKetThuc = hangBatDau + soHang;
		for (int i = hangBatDau; i <= hangKetThuc; i++) {

			// TODO Check null for sheetExcel.HE
			row = sheetSetting.getRow(i);
			for (int j = 0; j < soCot; j++) {
				// System.out.println("i - j - row " + i + " - " + j + " - " + row);
				if ((null == row) || (null == row.getCell(j))) {
					continue;
				}
				cell = row.getCell(j);

				if (cell != null) {

					switch (cell.getCellTypeEnum()) {
					case FORMULA:
						String formulaCell = cell.getCellFormula();
						if(formulaCell != null && formulaCell.contains("#REF!")) {
							continue;
						}
						stringCell = cell.getStringCellValue() == null ? "" : cell.getStringCellValue();
						// get Chi tieu
						chiTieuId = getChiTieuIdInStringCell(stringCell);
						key = getKey(stringCell);
						if (stringCell != null) {
							mapDataSetting.put(key, chiTieuId);

							hangDong = checkHangDong(stringCell);
							// setup map check hang dong (mã chỉ tiêu, hangdong=true/false)
							mapHangDong.put(chiTieuId, hangDong);
						}

						break;
					default:
						System.out.println("null");
					}

				}

			}
		}

		System.out.println(mapDataSetting);

		dataSettingDto.setMapDataSetting(mapDataSetting);
		dataSettingDto.setMapHang(mapHang);
		dataSettingDto.setMapCot(mapCot);
		dataSettingDto.setMapHangDong(mapHangDong);

		return dataSettingDto;

	}

	private Boolean checkHangDong(String stringCell) {
		String[] arr = stringCell.split(",");
		if (arr[2] != null) {
			if (arr[2].equals("1")) {
				return true;
			}
		}

		return false;
	}

	private String getKey(String stringCell) {
		String key = null;
		String[] arr = stringCell.split(",");
		if (arr[1] != null) {
			key = arr[1];
		}
		return key;
	}

	private Integer getChiTieuIdInStringCell(String stringCell) {
		// TODO Auto-generated method stub
		Integer chiTieuId = null;
		String[] arr = stringCell.split(",");

		if (arr[0] != null) {
			chiTieuId = Integer.parseInt(arr[0].trim());
		}

		return chiTieuId;
	}

	@SuppressWarnings("unused")
	private Integer getHang(String stringCell) {
		Integer indexHang = null;
		String[] arr = stringCell.split(",");
		if (arr[1] != null) {
			String[] arr1 = arr[1].split("|");
			if (arr1[0] != null) {
				indexHang = Integer.parseInt(arr1[0]);
			}
		}
		return indexHang;
	}

	@SuppressWarnings("unused")
	private Integer getCot(String stringCell) {
		Integer indexCot = null;
		String[] arr = stringCell.split(",");
		if (arr[1] != null) {
			String[] arr1 = arr[1].split("|");
			if (arr1[2] != null) {
				indexCot = Integer.parseInt(arr1[2]);
			}
		}
		return indexCot;
	}

	/**
	 * Get bao cao id trong sheet Settings.
	 * 
	 * @param workbook
	 * @return
	 */
	private double getBaoCaoIdFromSheetSettings(Workbook workbook) {
		XSSFSheet sheet = (XSSFSheet) workbook.getSheet("Setting");
		if (sheet != null) {
			CellReference cellReference = new CellReference("A1");
			Row row = sheet.getRow(cellReference.getRow());
			Cell cell = row.getCell(cellReference.getCol());

			return cell.getNumericCellValue();
		}
		return 0;
	}

	private DataImportExcelDTO getDataItem(BmSheetDTO bmSheet, Cell cell, FileBieuMauDTO file, int i, int j,
			int hangBatDau, List<BcBaoCaoGtDTO> lstBaocaoGt) throws Exception {
		BmSheetHangDTO bmHang = null;
		BmSheetCotDTO bmCot = null;
		BmSheetCtDTO bmChiTieu = null;
		Integer bcGiaTriId = null;

		DataImportExcelDTO dataItem = new DataImportExcelDTO();
		dataItem.setBmBaoCaoId(file.getBmBaoCaoId());
		dataItem.setBmSheetId(bmSheet.getId());
		dataItem.setSheetName(bmSheet.getTenSheet());
		dataItem.setIndexCellHang(i);
		dataItem.setIndexCellCot(j);

		bmHang = getIdHangByIndexHang(dataItem.getIndexCellHang(), bmSheet, hangBatDau);
		bmCot = getIdCotByIndexCot(bmSheet, dataItem.getIndexCellCot());
		dataItem.setCot(bmCot);
		dataItem.setHang(bmHang);

		bmChiTieu = getChiTieuByHangCotId(bmHang.getId(), bmCot.getId(), bmSheet);

		// [update]
		if (bmChiTieu != null) {
			dataItem.setChiTieu(bmChiTieu);
			bcGiaTriId = this.getBcBaoCaoGiaTriIdForImportExcel(dataItem, lstBaocaoGt);
		}

		if (cell != null) {

			switch (cell.getCellTypeEnum()) {
			case BOOLEAN:
				dataItem.setGiaTri(cell.getBooleanCellValue() + "");
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case STRING:
				dataItem.setGiaTri(cell.getStringCellValue());
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case NUMERIC:
				if (DateUtil.isCellDateFormatted(cell)) {
					dataItem.setGiaTri(cell.getNumericCellValue() + "");
				} else {
					dataItem.setGiaTri(cell.getNumericCellValue() + "");
				}
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case FORMULA:
				dataItem.setGiaTri(cell.getCellFormula() + "");
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case BLANK:
				dataItem.setGiaTri("");
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			default:
				dataItem.setGiaTri(null);
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
			}
		}

		return dataItem;
	}

	private BmSheetCtDTO getChiTieuByHangCotId(Integer hangId, Integer cotId, BmSheetDTO bmSheet) {
		Collection<BmSheetCtDTO> chiTieus = bmSheet.getBmSheetCtCollection();
		BmSheetCtDTO result = chiTieus.stream()
				.filter(chiTieuItem -> hangId.intValue() == chiTieuItem.getBmSheetHangId().intValue()
						&& cotId.intValue() == chiTieuItem.getBmSheetCotId().intValue())
				.findAny().orElse(null);

		return result;
	}

	private BmSheetCotDTO getIdCotByIndexCot(BmSheetDTO bmSheet, Integer indexCot) {
		List<BmSheetCotDTO> cots = (List<BmSheetCotDTO>) bmSheet.getBmSheetCotCollection();

		Collections.sort(cots, new Comparator<BmSheetCotDTO>() {
			@Override
			public int compare(BmSheetCotDTO o1, BmSheetCotDTO o2) {
				return o1.getThuTu().compareTo(o2.getThuTu());
			}
		});

		return cots.get(indexCot);
	}

	private BmSheetHangDTO getIdHangByIndexHang(Integer indexCellHang, BmSheetDTO bmSheet, int hangBatDau) {
		List<BmSheetHangDTO> hangs = (List<BmSheetHangDTO>) bmSheet.getBmSheetHangCollection();
		int index = indexCellHang - hangBatDau;

		Collections.sort(hangs, new Comparator<BmSheetHangDTO>() {
			@Override
			public int compare(BmSheetHangDTO o1, BmSheetHangDTO o2) {
				return o1.getThuTu().compareTo(o2.getThuTu());
			}
		});

		return hangs.get(index);
	}

	private Map<Integer, XSSFSheet> getSheetExcelByBmSheetId(Workbook workbook, List<BmSheetDTO> listBmSheet) {
		Map<Integer, XSSFSheet> mapSheetExcelMap = new HashMap<Integer, XSSFSheet>();
		XSSFSheet sheet;
		String sheetName = "";
		for (BmSheetDTO bmSheet : listBmSheet) {

			if (bmSheet.getTenSheet().length() > 31) {
				sheetName = bmSheet.getTenSheet().substring(0, 31);

			} else {
				sheetName = bmSheet.getTenSheet();
			}
			sheet = (XSSFSheet) workbook.getSheet(sheetName);
			mapSheetExcelMap.put(bmSheet.getId(), sheet);

		}

		return mapSheetExcelMap;
	}

	private Workbook getWorkBook(FileBieuMauDTO file) throws IOException {
		String currentWorkingDir = System.getProperty("user.dir");
		String path = currentWorkingDir + "\\" + file.getPathFile().replace("/", "\\");

		// Đọc một file XSL.
		FileInputStream inputStream = new FileInputStream(new File(path));

		// Đối tượng workbook cho file XSL.
		XSSFWorkbook workbook = new XSSFWorkbook(inputStream);

		return workbook;

	}

	@DeleteMapping("/bmbaocao/xoa/{id}")
	public ResponseEntity<?> deleteBmBaoCao(@PathVariable("id") int id, @Context HttpServletRequest request)
			throws ApiRequestException {
		try {
			logger.info(Constants.Logs.DELETE);
			String tenBaoCao = bcService.findById(id).getTenBaoCao();
			if (bcService.deleteById(id)) {
				QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
				Timestamp timeStamp = new Timestamp(new Date().getTime());
				QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

				// set IP thực hiện lấy IP remote client
				dtoLog.setIpThucHien(Utils.getClientIp(request));
				dtoLog.setLogType(Constants.LogSystem.LOG_SYS_DELETE + "_BMBAOCAO");
				dtoLog.setNgayTao(timeStamp);
				dtoLog.setNguoiTaoId(userInfo.getId());
				dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " xóa biểu mẫu báo cáo " + tenBaoCao);
				// save db
				WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

				return new ResponseEntity<Object>(Constants.Messages.DELETE_SUCCESS, HttpStatus.NO_CONTENT);
			}
			throw new ApiRequestException(Constants.Messages.DELETE_FAIL, HttpStatus.BAD_REQUEST);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.USE_BM, HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping("/bmbaocao/saochep/{id}")
	public ResponseEntity<?> saochepBmBaoCao(@PathVariable("id") int id, @Context HttpServletRequest request)
			throws ApiRequestException {
		try {
			logger.info("Sao chép báo cáo");

			if (bcService.copyById(id)) {
				String tenBaoCao = bcService.findById(id).getTenBaoCao();
				QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
				Timestamp timeStamp = new Timestamp(new Date().getTime());
				QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

				// set IP thực hiện lấy IP remote client
				dtoLog.setIpThucHien(Utils.getClientIp(request));
				dtoLog.setLogType(Constants.LogSystem.LOG_SYS_DELETE + "_BMBAOCAO");
				dtoLog.setNgayTao(timeStamp);
				dtoLog.setNguoiTaoId(userInfo.getId());
				dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " sao chép biểu mẫu báo cáo " + tenBaoCao);
				// save db
				WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

				return new ResponseEntity<Object>("Sao chép báo cáo thành công", HttpStatus.NO_CONTENT);
			}
			throw new ApiRequestException("Sao chép báo cáo thất bại", HttpStatus.BAD_REQUEST);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException("Có lỗi xảy ra khi sao chép báo cáo", HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping("/bmbaocao/sudung/{id}")
	public ResponseEntity<?> duaVaoSuDung(@PathVariable("id") int id, @Context HttpServletRequest request)
			throws ApiRequestException {
		try {
			logger.info("Đưa vào sử dụng báo cáo");

			if (bcService.duaVaoSuDung(id)) {
				QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
				Timestamp timeStamp = new Timestamp(new Date().getTime());
				QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

				// set IP thực hiện lấy IP remote client
				dtoLog.setIpThucHien(Utils.getClientIp(request));
				dtoLog.setLogType(Constants.LogSystem.LOG_SYS_DELETE + "_BMBAOCAO");
				dtoLog.setNgayTao(timeStamp);
				dtoLog.setNguoiTaoId(userInfo.getId());
				dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " Đưa vào sử dụng BmBaoCao");
				// save db
				WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

				return new ResponseEntity<Object>("Đưa vào sử dụng báo cáo thành công", HttpStatus.NO_CONTENT);
			}
			throw new ApiRequestException("Đưa vào sử dụng báo cáo thất bại", HttpStatus.BAD_REQUEST);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException("Có lỗi xảy ra khi Đưa vào sử dụng báo cáo", HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/bmbaocao/chitiet/{id}")
	public ResponseEntity<?> getByIdBmBaoCao(@PathVariable("id") int id) throws ApiRequestException {
		try {
			logger.info(Constants.Logs.GETBYID);
			BmBaoCaoDTO qt = bcService.findById(id);
			if (qt == null) {
				throw new ApiRequestException(Constants.Messages.RC_NOT_EXIST, HttpStatus.BAD_REQUEST);
			}
//			if (qt.getNgayCap() != null) {
//				qt.setNgayCapStr(TimestampUtils.TimestampToString_ddMMyyyy(qt.getNgayCap()));
//			}

			return ResponseEntity.ok().body(qt);

		} catch (Exception e) {

			e.printStackTrace();
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.GETBYID_FAIL, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/bmbaocao/mqhdropdown")
	public ResponseEntity<?> getBmBaoCaoDropdown() throws ApiRequestException {
		try {
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();

			if ((userInfo.getThanhVien() && userInfo.getCtckId() != null)
					|| userInfo.getTaiKhoan().toLowerCase().equals("administrator")) {
				List<DropDownDTO> lstDropdown = new ArrayList<>();
				List<MQH> lstEnum = Utils.MQH.initMapping();
				if (lstEnum != null && !lstEnum.isEmpty()) {
					for (MQH mqh : lstEnum) {
						lstDropdown.add(new DropDownDTO(mqh.getValue(), mqh.getText()));
					}
				}

				return ResponseEntity.ok().body(lstDropdown);
			} else {
				throw new ApiRequestException(Constants.Messages.GETBYID_FAIL, HttpStatus.NOT_FOUND);
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.GETBYID_FAIL, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/bmbaocao/dropdown")
	public ResponseEntity<?> getBmBaoCaoDropDown() throws ApiRequestException {
		try {

			List<DropDownDTO> bmBaoCaoDropDownRsl = new ArrayList<DropDownDTO>();
			bmBaoCaoDropDownRsl = this.bcService.getBmBaoCaoDropDownService();

			if (bmBaoCaoDropDownRsl == null) {
				throw new ApiRequestException(Constants.Messages.RC_NOT_EXIST, HttpStatus.NOT_FOUND);
			}
			return ResponseEntity.ok().body(bmBaoCaoDropDownRsl);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.EXCEPTION_FAIL, HttpStatus.NOT_FOUND);
		}

	}

	@RequestMapping(value = "/bmbaocao/lichsu", method = RequestMethod.GET)
	public ResponseEntity<?> lichSuThayDoi(@RequestParam("bmBaoCaoId") int bmBaoCaoId,
			@RequestParam(name = "pageNo", defaultValue = "0") Integer pageNo,
			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
			@RequestParam(name = "keySort", defaultValue = "thoiGian") String keySort,
			@RequestParam(name = "desc", defaultValue = "false") boolean desc) throws ApiRequestException {
		try {
			logger.info(Constants.Logs.GETBYID);
			if (pageNo > 0) {
				pageNo = pageNo - 1;
			}
			BmLichSuBaoCaoBDTO ls = bcService.lichSuThayDoi(pageNo, pageSize, keySort, bmBaoCaoId);
			if (ls == null) {
				throw new ApiRequestException(Constants.Messages.RC_NOT_EXIST, HttpStatus.BAD_REQUEST);
			}
			return ResponseEntity.ok().body(ls);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.GETBYID_FAIL, HttpStatus.NOT_FOUND);
		}
	}

	@RequestMapping(value = "/bmbaocao/bcdaura", method = RequestMethod.GET)
	public ResponseEntity<BmBaoCaoBDTO> listBaoCaoDauRa(
			@Valid @RequestParam(value = "kieuBaoCao", required = true) Integer kieuBaoCao,
			@RequestParam(value = "strfilter", required = false) String strfilter,
			@RequestParam(name = "pageNo", defaultValue = "0") Integer pageNo,
			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
			@RequestParam(name = "keySort", defaultValue = "id") String keySort,
			@RequestParam(name = "desc", defaultValue = "false") boolean desc,
			@RequestParam(value = "tenBaoCao", required = false) String tenBaoCao,
			@RequestParam(value = "maBaoCao", required = false) String maBaoCao,
			@RequestParam(value = "ccPhapLy", required = false) String ccPhapLy) throws ApiRequestException {

		if (!checkKeySort(keySort)) {

			throw new ApiRequestException(Constants.Messages.KEYSORT_FAIL, HttpStatus.EXPECTATION_FAILED);
		}

		try {

			logger.info(Constants.Logs.LIST);
			if (pageNo > 0) {
				pageNo = pageNo - 1;
			}
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			BmBaoCaoBDTO lstCoDong = bcService.listBmBaoCao(userInfo.getId(), kieuBaoCao, strfilter, tenBaoCao,
					maBaoCao, ccPhapLy, pageNo, pageSize, keySort, desc);

			return new ResponseEntity<BmBaoCaoBDTO>(lstCoDong, HttpStatus.OK);

		} catch (Exception e) {
			logger.error(e.toString());
			throw new ApiRequestException(Constants.Messages.EXCEPTION_FAIL, HttpStatus.EXPECTATION_FAILED);
		}
	}

	private boolean checkKeySort(String keySort) {

		Field fld[] = BmBaoCaoDTO.class.getDeclaredFields();
		List<String> listName = new ArrayList<String>();

		for (int i = 0; i < fld.length; i++) {
			listName.add(fld[i].getName());
		}

		return listName.contains(keySort);
	}

	@SuppressWarnings({ "resource", "deprecation" })
	@RequestMapping(value = "/bmbaocao/export", method = RequestMethod.GET)
	public @ResponseBody ResponseEntity<?> export(@Context HttpServletRequest request,
			@RequestParam(name = "id", defaultValue = "-1") Integer bmBaocaoId,
			@RequestParam(name = "reqThanhVienId", defaultValue = "0") Integer reqThanhVienId,
			@RequestParam(value = "bieuMauDauRa", required = false, defaultValue = "false") Boolean bieuMauDauRa) {

		BmBaoCaoExportDTO dto = new BmBaoCaoExportDTO();
		logger.info(Constants.Logs.LIST);

		Workbook workbook = null;

		try {
			dto = bcService.getDataExport(bmBaocaoId);
			dto.setThanhVienId(reqThanhVienId);

			try {
				// workbook = new XSSFWorkbook(new
				// FileInputStream("ExcelTemp/Template_RP.xlsx"));

				File template = loadTemplate().getFile();

				workbook = new XSSFWorkbook(new FileInputStream(template));

			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return null;
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return null;
			}

			workbook = bcService.generateFileTemplateExcel(dto, workbook, bieuMauDauRa);

			if (bieuMauDauRa) {
				int indexSheetBia = workbook.getSheetIndex("Trang bìa");
				workbook.setSheetHidden(indexSheetBia, Workbook.SHEET_STATE_VERY_HIDDEN);

				int indexSheetSitting = workbook.getSheetIndex("Setting");
				workbook.setSheetHidden(indexSheetSitting, Workbook.SHEET_STATE_VERY_HIDDEN);
			}

			CellConfig.autoSizeColumns(workbook);

			String fileName = "bieu_mau_dau_vao";

			FileOutputStream out = null;
			if (workbook instanceof XSSFWorkbook) {
				out = new FileOutputStream(fileName + ".xls");
			} else if (workbook instanceof XSSFWorkbook) {
				out = new FileOutputStream(fileName + ".xlsx");
			}
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			workbook.write(bos);

			byte[] bytes = bos.toByteArray();
			ByteArrayResource resource = new ByteArrayResource(bytes);

			out.close();
			workbook.close();
			QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

			// set IP thực hiện lấy IP remote client
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			dtoLog.setIpThucHien(Utils.getClientIp(request));
			dtoLog.setLogType(Constants.LogSystem.LOG_SYS_UPDATE + "_BMBAOCAO");
			dtoLog.setNgayTao(TimestampUtils.DateUtilsParseTimeStamp(new Date()));
			dtoLog.setNguoiTaoId(userInfo.getId());
			dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " export biểu mẫu báo cáo");
			// save db
			WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);

			// --------------
			HttpHeaders headers1 = new HttpHeaders();
			headers1.add(HttpHeaders.CONTENT_DISPOSITION, "attachement; filename=\"" + fileName + "\"");

			// -------------------

			return ResponseEntity.ok().headers(headers1).contentLength(bytes.length) //
					.body(resource);

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
			return new ResponseEntity<BmBaoCaoExportDTO>(dto, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@RequestMapping(value = "/bmbaocao/exporttemp", method = RequestMethod.GET)
	public ResponseEntity<?> exportTemplate(@RequestParam(name = "id", defaultValue = "-1") Integer bmBaocaoId,
			@Context HttpServletRequest request) {

		BmBaoCaoExportDTO dto = new BmBaoCaoExportDTO();
		logger.info(Constants.Logs.LIST);

		try {
			dto = bcService.getDataExport(bmBaocaoId);

//			Workbook workbook = bcService.generateFileTemplateExcel(dto);
			Workbook workbook = generateFileTemplateExcel(dto);
			CellConfig.autoSizeColumns(workbook);

			String fileName = "bieu_mau_dau_vao";

			FileOutputStream out = null;
			if (workbook instanceof XSSFWorkbook) {
				out = new FileOutputStream(fileName + ".xls");
			} else if (workbook instanceof XSSFWorkbook) {
				out = new FileOutputStream(fileName + ".xlsx");
			}
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			workbook.write(bos);

			byte[] bytes = bos.toByteArray();
			ByteArrayResource resource = new ByteArrayResource(bytes);

			out.close();
			workbook.close();
			QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

			// set IP thực hiện lấy IP remote client
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			dtoLog.setIpThucHien(Utils.getClientIp(request));
			dtoLog.setLogType(Constants.LogSystem.LOG_SYS_UPDATE + "_BMBAOCAO");
			dtoLog.setNgayTao(TimestampUtils.DateUtilsParseTimeStamp(new Date()));
			dtoLog.setNguoiTaoId(userInfo.getId());
			dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " export biểu mẫu báo cáo temp");
			// save db
			WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);
			return ResponseEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION).contentLength(bytes.length) //
					.body(resource);

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
			return new ResponseEntity<BmBaoCaoExportDTO>(dto, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@SuppressWarnings("unused")
	public Workbook generateFileTemplateExcel(BmBaoCaoExportDTO dto) {
		Workbook workbook = new XSSFWorkbook();
		List<BmSheetDTO> listBmSheet = dto.getListBmSheet();

		Collection<BmSheetCotDTO> cots = null;
		Collection<BmSheetHangDTO> hangs = null;
		Collection<BmTieuDeHangDTO> tieuDeHang = null;
		Collection<BmTieuDeHangCotDTO> tieuDeHangCot = null;

		for (BmSheetDTO sheetItem : listBmSheet) {
			Sheet sheet = workbook.createSheet(sheetItem.getTenSheet());

			cots = sheetItem.getBmSheetCotCollection();
			hangs = sheetItem.getBmSheetHangCollection();
			tieuDeHang = sheetItem.getBmTieuDeHangCollection();
			tieuDeHangCot = sheetItem.getBmTieuDeHangCotCollection();

			int hang = hangs == null ? 0 : hangs.size();
			int cot = cots == null ? 0 : cots.size();
			int tongHangTieuDe = tieuDeHang == null ? 0 : tieuDeHang.size();

			if (hang > 0 && cot > 0) {
				createTable(sheetItem, tongHangTieuDe, hang, cot, sheet, workbook);
				sheet = workbook.createSheet(sheetItem.getTenSheet() + "_hidden");
				sheet.protectSheet("scms");
//				sheet.setDisplayFormulas(true);
				createTableHidden(sheetItem, tongHangTieuDe, hang, cot, sheet, sheetItem.getTenSheet(), workbook);
			}
		}

		createSheetSetting(workbook, dto);

		return workbook;

	}

	private void createTable(BmSheetDTO sheetItem, int tongHangTieuDe, int rowNumber, int colNumber, Sheet sheet,
			Workbook workbook) {
		Cell cell = null;
		Row row = null;

		int i = tongHangTieuDe;
		int hangBatDau = tongHangTieuDe;
		int hangKetThuc = rowNumber + tongHangTieuDe;

		for (i = hangBatDau; i < hangKetThuc; i++) {
			row = sheet.createRow(i);
			for (int j = 0; j < colNumber; j++) {
				cell = row.createCell(j, CellType.STRING);
				cell.setCellValue("");
			}
		}

		Collection<BmSheetCtDTO> chiTieus = sheetItem.getBmSheetCtCollection();

		Integer hang = null;
		Integer cot = null;
		for (BmSheetCtDTO chiTieu : chiTieus) {

			chiTieu = getIndexChiTieu(sheetItem, chiTieu, hangBatDau);
			hang = chiTieu.getIndexHang();
			cot = chiTieu.getIndexCot();

			if (hang != null) {
				Row r = sheet.getRow(hang);

//						[#] start setup cell
				if (chiTieu.getIndexCot() != null) {
					Cell c = r.getCell(cot);

					String dinhDangCell = chiTieu.getDinhDang();
					if (dinhDangCell == null) {
						dinhDangCell = "";
					}

					switch (dinhDangCell) {
					case "LB":// label

						if (chiTieu.getInHoa()) {
							c.setCellValue(chiTieu.getLabel().toUpperCase());
						} else {
							c.setCellValue(chiTieu.getLabel());
						}
						break;
					case "CT":// công thức
						c.setCellValue("formula");
						break;

					case "KT":// ký tự
						c.setCellValue((chiTieu.getGiaTriDefault() == null) ? "" : chiTieu.getGiaTriDefault() + "");

						if (chiTieu.getInHoa()) {
							c.setCellValue((chiTieu.getGiaTriDefault() == null) ? ""
									: chiTieu.getGiaTriDefault() + "".toUpperCase());
						} else {
							c.setCellValue(chiTieu.getLabel());
						}
						break;

					case "TT":// tiền tệ
						c.setCellValue((chiTieu.getGiaTriDefault() == null) ? "" : chiTieu.getGiaTriDefault() + "");
						break;

					case "S":// số
						c.setCellValue((chiTieu.getGiaTriDefault() == null) ? "" : chiTieu.getGiaTriDefault() + "");
						break;
					default:
						c.setCellValue("");
						break;
					}

					// style
					c.setCellStyle(customStyle(sheet, workbook, chiTieu.getMauSac(), chiTieu.getCanLe(),
							chiTieu.getInDam(), chiTieu.getInNghieng(), chiTieu.getInHoa(), chiTieu.getGachChan()));

				}
//						 [#] end setup cell
			}

		}

	}

	private void createTableHidden(BmSheetDTO sheetItem, int tongHangTieuDe, int rowNumber, int colNumber, Sheet sheet,
			String sheetRefer, Workbook workbook) {
		Cell cell = null;
		Row row = null;

		int i = tongHangTieuDe;
		int hangBatDau = tongHangTieuDe;
		int hangKetThuc = rowNumber + tongHangTieuDe;

		for (i = hangBatDau; i < hangKetThuc; i++) {
			row = sheet.createRow(i);
			for (int j = 0; j < colNumber * 2; j++) {
				cell = row.createCell(j, CellType.STRING);
				cell.setCellValue("");
			}
		}

		Collection<BmSheetCtDTO> chiTieus = sheetItem.getBmSheetCtCollection();
		Integer hang = null;
		Integer cot = null;
		for (BmSheetCtDTO chiTieu : chiTieus) {

			chiTieu = getIndexChiTieu(sheetItem, chiTieu, hangBatDau);
			hang = chiTieu.getIndexHang();
			cot = chiTieu.getIndexCot();

			if (hang != null) {
				Row r = sheet.getRow(hang);
//						[#] start setup cell
				if (chiTieu.getIndexCot() != null) {
					Cell c = r.getCell(cot);
					c.setCellFormula("CONCATENATE(" + chiTieu.getId() + ",\",\",ROW('" + sheetRefer + "'!"
							+ c.getAddress() + "),\"|\",COLUMN('" + sheetRefer + "'!" + c.getAddress() + "))");
//					Cell c2 = r.getCell(cot);
//					c2.setCellFormula(c.getAddress().toString());
					// c.setcellf
				}
//						 [#] end setup cell
			}

		}

		DataFormat fmt = workbook.createDataFormat();
		CellStyle textStyle = workbook.createCellStyle();
		textStyle.setDataFormat(fmt.getFormat("@"));
		sheet.setDefaultColumnStyle(0, textStyle);

	}

	private BmSheetCtDTO getIndexChiTieu(BmSheetDTO sheetItem, BmSheetCtDTO chiTieu, int hangBatDau) {
		Map<Integer, BmSheetCotDTO> mapCots = getMapCots(sheetItem);
		Map<Integer, BmSheetHangDTO> mapHangs = getMapHangs(sheetItem);

		BmSheetHangDTO hang = mapHangs.get(chiTieu.getBmSheetHangId());
		BmSheetCotDTO cot = mapCots.get(chiTieu.getBmSheetCotId());

		if (hang != null) {
			chiTieu.setIndexHang(hang.getIndex() + hangBatDau);
		}

		if (cot != null) {
			chiTieu.setIndexCot(cot.getIndex());
		}

		return chiTieu;

	}

	private Map<Integer, BmSheetCotDTO> getMapCots(BmSheetDTO sheetItem) {
		List<BmSheetCotDTO> cots = (List<BmSheetCotDTO>) sheetItem.getBmSheetCotCollection();
		Map<Integer, BmSheetCotDTO> mapCots = new HashMap<Integer, BmSheetCotDTO>();

		Collections.sort(cots, new Comparator<BmSheetCotDTO>() {
			@Override
			public int compare(BmSheetCotDTO o1, BmSheetCotDTO o2) {
				return o1.getThuTu().compareTo(o2.getThuTu());
			}
		});

		int index = 0;
		for (BmSheetCotDTO cot : cots) {
			cot.setIndex(index);
			mapCots.put(cot.getId(), cot);
			index++;
		}
		return mapCots;
	}

	private Map<Integer, BmSheetHangDTO> getMapHangs(BmSheetDTO sheetItem) {
		List<BmSheetHangDTO> hangs = (List<BmSheetHangDTO>) sheetItem.getBmSheetHangCollection();
		Map<Integer, BmSheetHangDTO> mapHangs = new HashMap<Integer, BmSheetHangDTO>();

		Collections.sort(hangs, new Comparator<BmSheetHangDTO>() {
			@Override
			public int compare(BmSheetHangDTO o1, BmSheetHangDTO o2) {
				return o1.getThuTu().compareTo(o2.getThuTu());
			}
		});

		int index = 0;
		for (BmSheetHangDTO hang : hangs) {
			hang.setIndex(index);
			mapHangs.put(hang.getId(), hang);
			index++;

		}
		return mapHangs;
	}

//
//	// Tao style
	private void createSheetSetting(Workbook workbook, BmBaoCaoExportDTO dto) {
		Sheet sheetSetting = workbook.createSheet("Setting");
//		CellStyle cellStyle = this.createCellStyleData(sheetSetting, workbook, false);

		Row row = sheetSetting.createRow(0);
		Cell cell = row.createCell(0, CellType.STRING);
		cell.setCellValue(dto.getId());
//		cell.setCellStyle(cellStyle);
		workbook.setSheetHidden(workbook.getSheetIndex("Setting"), false);

	}

	private CellStyle customStyle(Sheet sheet, Workbook workbook, Integer color, String canLe, Boolean bold,
			Boolean italic, Boolean upperCase, Boolean underLine) {
		CellStyle cellStyle = sheet.getWorkbook().createCellStyle();

		// set font
		final Font font = sheet.getWorkbook().createFont();
		font.setFontName("Times New Roman");
		font.setFontHeightInPoints((short) 13);
		font.setBold(bold);
		font.setItalic(italic);
		if (underLine) {
			font.setUnderline(Font.U_SINGLE);
		}

		// màu chứ
		font.setColor((short) 0);

		// set border
		cellStyle.setBorderBottom(BorderStyle.THIN);
		cellStyle.setBorderTop(BorderStyle.THIN);
		cellStyle.setBorderRight(BorderStyle.THIN);
		cellStyle.setBorderLeft(BorderStyle.THIN);
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());

		// set font
		cellStyle.setFont(font);

		// căn lề ngang
		if (canLe != null) {
			if (canLe.equals("CP")) {
				cellStyle.setAlignment(HorizontalAlignment.RIGHT);
			}
			if (canLe.equals("CG")) {
				cellStyle.setAlignment(HorizontalAlignment.CENTER);
			}

		} else {
			cellStyle.setAlignment(HorizontalAlignment.LEFT);
		}

		// căn lề dọc
		cellStyle.setVerticalAlignment(VerticalAlignment.TOP);

		// để màu ô
		if (color != null) {
			int col = color;
			cellStyle.setFillForegroundColor((short) col);
			cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		}

		return cellStyle;
	}

	/**
	 * Get thanh vien theo gia tri bao cao.
	 * 
	 * @param file
	 * @return
	 */
	private int getThanhVienIdByGtBaoCao(FileBieuMauDTO file) throws Exception {
		if (file.getBmBaoCaoId() != null || file.getKyBaoCaoId() != null) {
			// Lay thong tin ctck theo nguoi dung.
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			// Lay thanh vien id theo ctck id, kybc and bao cao id
			BcThanhVienDTO thanhVienDto = this.bcThanhVienService.getGiaTriBaoCaoThanhVienService(userInfo.getCtckId(),
					file.getGiaTriKyBc(), file.getBmBaoCaoId());

			if (thanhVienDto != null && thanhVienDto.getId() != null) {
				return thanhVienDto.getId();
			}
		}
		return 0;
	}

	/**
	 * Get gia tri ID theo Bc Bao cao gia tri import excel.
	 * 
	 * @param dataItem
	 * @param lstBaocaoGt
	 * @return
	 * @throws Ex
	 */
	private int getBcBaoCaoGiaTriIdForImportExcel(DataImportExcelDTO dataItem, List<BcBaoCaoGtDTO> lstBaocaoGt)
			throws Exception {

		// [U - 20200429] - Check data is la chi tieu
		if (lstBaocaoGt != null && !lstBaocaoGt.isEmpty() && dataItem.isLaChiTieu()) {
			// Lay gia tri theo hang - cot
			/*
			 * Optional<BcBaoCaoGtDTO> bcGiaTri = lstBaocaoGt.stream() .filter(f ->
			 * (f.getBmSheetHangId() != null ? (f.getBmSheetHangId().intValue() ==
			 * dataItem.getHang().getId() .intValue()) : false) && (f.getBmSheetCotId() !=
			 * null ? (f.getBmSheetCotId() .intValue() ==
			 * dataItem.getCot().getId().intValue()) : false) && (f.getBmSheetCtId() != null
			 * ? (f.getBmSheetCtId().intValue() == dataItem.getChiTieu()
			 * .getId().intValue()) : false)) .findFirst();
			 */
			int bmHangId = dataItem.getChiTieu().getBmSheetHangId().intValue();
			int bmCotId = dataItem.getChiTieu().getBmSheetCotId().intValue();

			Optional<BcBaoCaoGtDTO> bcGiaTri = lstBaocaoGt.stream()
					.filter(f -> (f.getBmSheetHangId() != null ? (f.getBmSheetHangId().intValue() == bmHangId) : false)
							&& (f.getBmSheetCotId() != null ? (f.getBmSheetCotId().intValue() == bmCotId) : false)
							&& (f.getBmSheetCtId() != null
									? (f.getBmSheetCtId().intValue() == dataItem.getChiTieu().getId().intValue())
									: false))
					.findFirst();

			return bcGiaTri.isPresent() ? bcGiaTri.get().getId() : 0;
		}
		return 0;
	}

	private Map<Integer, SheetItemDTO> getSheetExcelByBmSheetId_v2(Workbook workbook, List<BmSheetDTO> listBmSheet) {
		Map<Integer, SheetItemDTO> mapSheetExcelMap = new HashMap<Integer, SheetItemDTO>();
		SheetItemDTO item = new SheetItemDTO();
		XSSFSheet sheetData;
		XSSFSheet sheetSetting;
		String sheetName = "";
		for (BmSheetDTO bmSheet : listBmSheet) {
			sheetName = bmSheet.getTenSheet() + "_" + bmSheet.getMaSheet();
			item = new SheetItemDTO();
			if (sheetName != null && sheetName.length() > 31) {
				sheetName = sheetName.substring(0, 31);

			}

			sheetData = (XSSFSheet) workbook.getSheet(sheetName);
			sheetSetting = (XSSFSheet) workbook.getSheet(bmSheet.getId() + "_hidden");

			if (sheetSetting != null) {
				item.setSheetData(sheetData);
				item.setSheetSetting(sheetSetting);
				mapSheetExcelMap.put(bmSheet.getId(), item);
			}

		}

		return mapSheetExcelMap;
	}

	@SuppressWarnings({ "unused" })
	private DataImportExcelDTO getDataItem_v2(BmSheetDTO bmSheet, Cell cell, FileBieuMauDTO file, int i, int j,
			int hangBatDau, Integer chiTieuId, Map<String, Integer> mapDataSetting, boolean isChiTieu,
			List<BcBaoCaoGtDTO> lstBaocaoGt) throws Exception {
		BmSheetHangDTO bmHang = null;
		BmSheetCotDTO bmCot = null;
		BmSheetCtDTO bmChiTieu = null;
		Integer bcGiaTriId = null;

		DataImportExcelDTO dataItem = new DataImportExcelDTO();
		dataItem.setBmBaoCaoId(file.getBmBaoCaoId());
		dataItem.setBmSheetId(bmSheet.getId());
		dataItem.setSheetName(bmSheet.getTenSheet());

		// index hang cot truyen tu ngoai vao
		dataItem.setIndexCellHang(i);
		dataItem.setIndexCellCot(j);

		//     	get chi tieu by chi tieu id
		if (isChiTieu) {
			bmChiTieu = bcService.getBmSheetCtById(chiTieuId);
			if (bmChiTieu != null) {
				// [U] Update: set gia tri for update
				dataItem.setLaChiTieu(true);
				dataItem.setChiTieu(bmChiTieu);
				bcGiaTriId = this.getBcBaoCaoGiaTriIdForImportExcel(dataItem, lstBaocaoGt);
			}

		}

		if (cell != null) {
			switch (cell.getCellTypeEnum()) {
			case BOOLEAN:
				dataItem.setGiaTri(cell.getBooleanCellValue() + "");
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case STRING:
				dataItem.setGiaTri(cell.getStringCellValue());
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case NUMERIC:

				// Date
				if (DateUtil.isCellDateFormatted(cell)) {
					if (cell.getNumericCellValue() != 0) {
						// Get date
						Date date = cell.getDateCellValue();
						String giaTri = DateTimeConvertUtil.ConvertDateToString_ddMMyyyy(date);
						dataItem.setGiaTri(giaTri);
					}

				} else {

					if (dataItem.getChiTieu() != null && dataItem.getChiTieu().getDinhDang() != null
							&& dataItem.getChiTieu().getDinhDang().equals("TLPT")) {
						String giaTriSo = String.valueOf((double) cell.getNumericCellValue());
						dataItem.setGiaTri(giaTriSo);
					} else {
						String giaTriSo = String.valueOf((long) cell.getNumericCellValue());
						dataItem.setGiaTri(giaTriSo);
					}

				}
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case FORMULA:
//				dataItem.setGiaTri(cell.getCellFormula() + "");
//				if(cell.getCellTypeEnum() == CellType.NUMERIC) {
//					dataItem.setGiaTri(cell.getNumericCellValue() + "");
//				}
//				else if (cell.getCellTypeEnum() == CellType.STRING) {
//					dataItem.setGiaTri(cell.getStringCellValue() + "");
//				}
				dataItem.setGiaTri(getValueFromFomula(cell));
//				System.out.println(cell.getCellTypeEnum() + " -_- :" + cell.getCachedFormulaResultType() + " | " + XSSFCell.CELL_TYPE_STRING + " || " + dataItem.getGiaTri());
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			case BLANK:
				dataItem.setGiaTri("");
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
				break;
			default:
				dataItem.setGiaTri(null);
				dataItem.setBcBaoCaoGtId(bcGiaTriId);
			}
		}

		// System.out.println(dataItem.toString());
		return dataItem;
	}
	
	private String getValueFromFomula(Cell cell) {
		try {
			return cell.getNumericCellValue() + "";
		}catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.toString());
			return cell.getStringCellValue();
		}
	}
	
	@SuppressWarnings("unused")
	private DataImportExcelBDTO getImportDataFromExcelFile_v2(FileBieuMauDTO file, Workbook workbook)
			throws ApiRequestException {

		DataImportExcelBDTO result = new DataImportExcelBDTO();
		List<DataImportExcelDTO> listData = new ArrayList<DataImportExcelDTO>();
		List<DataImportExcelDTO> listHeader = new ArrayList<DataImportExcelDTO>();
		List<BcBaoCaoGtDTO> lsGiaTri = new ArrayList<BcBaoCaoGtDTO>();
		int tongHang = 0;
		int tongCot = 0;
		try {

			// Get thanh vien Id theo gia tri bao cao.
//	    int thanhVienId = this.getThanhVienIdByGtBaoCao(file);

			int thanhVienId = 0;

			BmBaoCaoExportDTO bmBaoCao = bcService.getDataExport(file.getBmBaoCaoId());

			List<BmSheetDTO> listBmSheet = bmBaoCao.getListBmSheet();

			Map<Integer, SheetItemDTO> mapSheetExcel = getSheetExcelByBmSheetId_v2(workbook, listBmSheet);

			XSSFSheet sheetData;
			XSSFSheet sheetSetting;

			for (BmSheetDTO bmSheet : listBmSheet) {

				System.out.println("========================" + bmSheet.getTieuDeChinh() + " " + bmSheet.getTenSheet()
						+ "===================");

				if ("TÌNH HÌNH NHÂN SỰ CỦA CÔNG TY CHỨNG KHOÁN".equals(bmSheet.getTieuDeChinh())) {
					System.out.println("");
				}
				Collection<BmSheetCotDTO> cots = null;
				Collection<BmSheetHangDTO> hangs = null;
				Collection<BmTieuDeHangDTO> tieuDeHang = null;

				// [Update] - get ds gia tri.
				if (thanhVienId > 0) {
					lsGiaTri = this.bcBaoCaoGtService.getLsGiaTriBaoCaoThanhVien(file.getBmBaoCaoId(), thanhVienId,
							bmSheet.getId());
				}

				cots = bmSheet.getBmSheetCotCollection();
				hangs = bmSheet.getBmSheetHangCollection();
				tieuDeHang = bmSheet.getBmTieuDeHangCollection();

				int soHang = hangs == null ? 0 : hangs.size();
				int soCot = cots == null ? 0 : cots.size();

//		List<String>listTieuDePhu= Pattern.compile(",")
//				.splitAsStream(bmSheet.getTieuDePhu()==null?"":bmSheet.getTieuDePhu())
//				.collect(Collectors.toList());

				String tieuDePhu = bmSheet.getTieuDePhu() == null ? "" : bmSheet.getTieuDePhu();
				List<String> listTieuDePhu = Stream.of(tieuDePhu.split("\\|")).collect(Collectors.toList());
				int tongTieuDePhu = listTieuDePhu.size();
				int tongHangTieuDe = tieuDeHang == null ? 1 : tieuDeHang.size();
				tongHangTieuDe = tongHangTieuDe + tongTieuDePhu + 1;

				int i = tongHangTieuDe;
				int hangBatDau = tongHangTieuDe < 1 ? 1 : tongHangTieuDe;

				//

				int hangKetThuc = soHang + tongHangTieuDe;

				SheetItemDTO sheetItem = mapSheetExcel.get(bmSheet.getId());
				if (sheetItem == null || sheetItem.getSheetSetting() == null) {
					continue;
				}

				sheetSetting = sheetItem.getSheetSetting();
				sheetData = sheetItem.getSheetData();

				// ------------------ get data sheet setting
				
				DataSettingDTO dataSettingDto = getDataSetting(sheetSetting, soHang, soCot, hangBatDau);
				Map<String, Integer> mapDataSetting = dataSettingDto.getMapDataSetting();
				Map<Integer, Boolean> mapHangDong = dataSettingDto.getMapHangDong();

				Row row = null;
				Cell cell = null;
				boolean isChiTieu = false;
				DataImportExcelDTO dataItem = new DataImportExcelDTO();
				if (sheetData == null) {
					continue;
				}
				tongHang = sheetData.getLastRowNum() + 1 - hangBatDau;

				listHeader = getlistHeader(sheetData, hangBatDau);

				boolean hangDong = false;

				for (i = hangBatDau; i <= sheetData.getLastRowNum(); i++) {

					// TODO Check null for sheetExcel.
					if (sheetData == null || sheetData.getRow(i) == null) {
						continue;
					}
					row = sheetData.getRow(i);
					for (int j = 0; j <= row.getLastCellNum() - 1; j++) {

						tongCot = row.getLastCellNum();

						// System.out.println("i - j - row " + i + " - " + j + " - " + row);
						if ((null == row) || (null == row.getCell(j))) {
							continue;
						}
						cell = row.getCell(j);
						// System.out.print("i ="+i+",j="+j+" ");

						String key = (i + 1) + "|" + (j + 1);
						Integer chiTieuId = mapDataSetting.get(key);
						if (chiTieuId != null) {
							isChiTieu = true;
							// check dong hang
							hangDong = mapHangDong.get(chiTieuId);
							dataItem.setLaHangDong(hangDong);
//			    if(j==0) {
//			    	hangDong=mapHangDong.get(chiTieuId);
//			    	 
//			    }
//							System.out.println(chiTieuId + "," + key + "   INDEX [ " + i + "," + j + "]");
						}

						dataItem = getDataItem_v2(bmSheet, cell, file, i, j, hangBatDau, chiTieuId, mapDataSetting,
								isChiTieu, lsGiaTri);
						dataItem.setTongHang(tongHang);
						dataItem.setTongCot(tongCot);

						if (dataItem.isLaChiTieu()) {
							// nếu là chỉ tiêu thì add luôn vào list
							listData.add(dataItem);
						} else {

							// check hang index có động hay không
							if (hangDong == true) {
								listData.add(dataItem);
							}
						}

					}
				}

			}
			result.setListData(listData);
			result.setListHeader(listHeader);
			return result;

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.UPDATE_FAIL, HttpStatus.EXPECTATION_FAILED);

		}
	}

	private List<DataImportExcelDTO> getlistHeader(XSSFSheet sheetData, int hangBatDau) {
		Row row = null;
		List<DataImportExcelDTO> result = new ArrayList<DataImportExcelDTO>();
		int colIndex = 0;
		if (hangBatDau > 0) {
			row = sheetData.getRow(hangBatDau - 1);
			Iterator<Cell> cellIterator = row.cellIterator();
			DataImportExcelDTO dataItem = null;

			while (cellIterator.hasNext()) {
				dataItem = new DataImportExcelDTO();
				Cell cell = cellIterator.next();
				// Check the cell type and format accordingly
				switch (cell.getCellTypeEnum()) {
				case BOOLEAN:
					dataItem.setGiaTri(cell.getBooleanCellValue() + "");
					break;
				case STRING:
					dataItem.setGiaTri(cell.getStringCellValue());
					break;
				case NUMERIC:
					if (DateUtil.isCellDateFormatted(cell)) {
						dataItem.setGiaTri(cell.getNumericCellValue() + "");
					} else {
						dataItem.setGiaTri(cell.getNumericCellValue() + "");
					}
					break;
				case FORMULA:
					dataItem.setGiaTri(cell.getCellFormula() + "");
					break;
				case BLANK:
					dataItem.setGiaTri("");
					break;
				default:
					dataItem.setGiaTri(null);
				}

				dataItem.setIndexCellHang(hangBatDau - 1);
				dataItem.setIndexCellCot(colIndex);
				colIndex = colIndex + 1;
				result.add(dataItem);
			}
		}

		return result;
	}

	@PutMapping("/bmbaocao/import_v2")
	public ResponseEntity<?> importTemplate_v2(@RequestBody FileBieuMauDTO file, @Context HttpServletRequest request)
			throws ApiRequestException, IOException {

		String errorMessage = Constants.Messages.UPDATE_FAIL;

		DataImportExcelBDTO result = new DataImportExcelBDTO();
		List<BmSheetDTO> lsBmSheetImportDTO = new ArrayList<BmSheetDTO>();
		BaoCaoDinhKyImportDataBDTO importBDTO = new BaoCaoDinhKyImportDataBDTO();

		Workbook workbook = getWorkBook(file);

		Double sheetSetting = this.getBaoCaoIdFromSheetSettings(workbook);
		int baoCaoId = sheetSetting.intValue();

		if (baoCaoId != file.getBmBaoCaoId().intValue()) {
			throw new ApiRequestException(Constants.Messages.BM_BAOCAO_NOT_MATCH, HttpStatus.EXPECTATION_FAILED);
		}

		result = this.getImportDataFromExcelFile_v2(file, workbook);
		List<DataImportExcelDTO> listData = result.getListData();
		try {
			if (listData != null && listData.size() > 0) {
				// Get bm sheet dropdown
				List<DropDownDTO> lsSheetIds = this.sheetService.getlsSheetNotTrangBiabyBaoCaoService(baoCaoId);

				// Check exist list sheet.
				if (lsSheetIds == null || lsSheetIds.isEmpty()) {
					errorMessage = "Báo cáo không có sheet dữ liệu hoặc đã có lỗi xảy ra.";
					throw new Exception();
				}

				// Check exist data imported.
				if (result.getListData() == null || result.getListData().isEmpty()) {
					errorMessage = "Báo cáo không có dữ liệu hoặc đã có lỗi xảy ra.";
					throw new Exception();
				}

				// Get sheet from import file.
				lsBmSheetImportDTO = this.sheetService.buildSheetDynamicImportExcelService(result, lsSheetIds);

				importBDTO.setLsSheetImport(lsSheetIds);
				importBDTO.setDetailImportSheet(lsBmSheetImportDTO);

			}
			QtLogHeThongDTO dtoLog = new QtLogHeThongDTO();

			// set IP thực hiện lấy IP remote client
			QtNguoiDungDTO userInfo = UserInfoGlobal.getUserInfoAuthor();
			dtoLog.setIpThucHien(Utils.getClientIp(request));
			dtoLog.setLogType(Constants.LogSystem.LOG_SYS_UPDATE + "_BMBAOCAO");
			dtoLog.setNgayTao(TimestampUtils.DateUtilsParseTimeStamp(new Date()));
			dtoLog.setNguoiTaoId(userInfo.getId());
			dtoLog.setNoiDung("Tài khoản " + userInfo.getTaiKhoan() + " import biểu mẫu báo cáo v2");
			// save db
			WriteLogInDataBaseGlobal.WriteLogDB(dtoLog);
			return new ResponseEntity<BaoCaoDinhKyImportDataBDTO>(importBDTO, HttpStatus.ACCEPTED);

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			throw new ApiRequestException(errorMessage, HttpStatus.EXPECTATION_FAILED);

		}
	}

	@GetMapping("/bmbaocao/checkexistma")
	public ResponseEntity<?> checkTrungMaBaoCao(@RequestParam(name = "maBaoCao") String maBaoCao,
			@RequestParam(name = "bmId") Integer bmId, @RequestParam(name = "bmBaoCaoId") Integer bmBaoCaoId)
			throws ApiRequestException {
		try {
			if (!StringUtils.isEmpty(maBaoCao) && maBaoCao != null) {
				maBaoCao = maBaoCao.trim();
			}
			if ((!StringUtils.isEmpty(maBaoCao) && maBaoCao != null) || bmId != null || bmBaoCaoId != null) {

				if (bcService.checkExistMaBaoCao(maBaoCao, bmId, bmBaoCaoId)) {
					return ResponseEntity.ok().body(true);
				}
			}
			return ResponseEntity.ok().body(false);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.EXCEPTION_FAIL, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/bmbaocao/checkLoaiBaoCaoLT")
	public ResponseEntity<?> checkTrungLoaiBaoCaoLT(
			@RequestParam(name = "loaiBaoCaoLT", defaultValue = "") String loaiBaoCaoLT,
			@RequestParam(name = "bmId", defaultValue = "0") Integer bmId,
			@RequestParam(name = "bmBaoCaoId", defaultValue = "0") Integer bmBaoCaoId) throws ApiRequestException {
		try {
			if (!StringUtils.isEmpty(loaiBaoCaoLT) && loaiBaoCaoLT != null) {
				loaiBaoCaoLT = loaiBaoCaoLT.trim();
			}

			if (bcService.checkExistLoaiBaoCaoLT(loaiBaoCaoLT, bmId, bmBaoCaoId)) {
				return ResponseEntity.ok().body(true);
			}
			return ResponseEntity.ok().body(false);

		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new ApiRequestException(Constants.Messages.EXCEPTION_FAIL, HttpStatus.NOT_FOUND);
		}
	}

	public Resource loadTemplate() {
		return new ClassPathResource("ExcelTemp/Template_RP.xlsx");
	}

	private String getSheetNameExcel(BmSheetDTO bmSheet) {
		String sheetName = "";
		sheetName = bmSheet.getTenSheet() + "_" + bmSheet.getMaSheet();

		if (sheetName != null && sheetName.length() > 31) {
			sheetName = sheetName.substring(0, 31);

		}

		return sheetName;
	}
	
	private String uploadFileDinhKem(List<UploadFileDefaultDTO> arrFileDinhKem, String fileDinhKem,
			HttpServletRequest request) throws Exception {
		if (arrFileDinhKem == null || arrFileDinhKem.size() == 0) {
			return StringUtils.EMPTY;
		}

		String PathUpload_update = StringUtils.EMPTY;
		if (arrFileDinhKem != null && !arrFileDinhKem.isEmpty()) {
			for (UploadFileDefaultDTO e : arrFileDinhKem) {
				if (!StringUtils.isEmpty(e.getNameFile())) {
					PathUpload_update += e.getPath() + ",";
				}
			}
			if (!PathUpload_update.isEmpty()) {
				PathUpload_update = PathUpload_update.substring(0, PathUpload_update.length() - 1);
			}
		}

		// add file moi
		if (!StringUtils.isEmpty(fileDinhKem)) {
			String UrlPathCDNLQ = Constants.FolderUpload.FOLDER_BMBAOCAO;
			String[] splipPath = fileDinhKem.split("`");
			String pathNew = "";
			if (splipPath.length > 0) {
				for (int i = 0; i < splipPath.length; i++) {
					String path = splipPath[i];
					String[] pathRelative = path.split("~");
					if (pathRelative.length > 0 && pathRelative.length < 3) {
//						System.out.println(pathRelative[1]);
//						System.out.println(request.getServletContext().getRealPath("/") + pathRelative[0]);
//						File file = new File(pathRelative[0]);
//						Path tmpPath = Paths.get(UrlPathCDNLQ);
//						String tmp = tmpPath.toFile().toString();
						try {
							pathNew += Utils.CommonSavePathFile(fileDinhKem, UrlPathCDNLQ, null) + ",";
						} catch (IOException e) {
							return null;
						}
//						pathNew += UrlPathCDNLQ + pathRelative[1] + ",";

					}

				}

			}
			if (pathNew != null) {
				pathNew = pathNew.substring(0, pathNew.length() - 1);
				if (!PathUpload_update.isEmpty()) {
					PathUpload_update = PathUpload_update + "," + pathNew;
				} else {
					PathUpload_update = pathNew;
				}

			}

		}
		PathUpload_update = PathUpload_update.replace("\\", "/");

		return PathUpload_update;
	}
}