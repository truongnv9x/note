package tvs.com.ridc.wcc.service;

//import com.rsa.certj.pkcs7.Data;

import ejbmodel.ParameterTypeMismatchException;
import ejbmodel.PropertyNotFoundException;

import ejbmodel.entities.TvsSysLogs;

import ejbmodel.remote.SessionEJB;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.common.JboCompOper;

import oracle.stellent.ridc.model.DataBinder;
import oracle.stellent.ridc.model.DataObject;
import oracle.stellent.ridc.model.DataResultSet;
import oracle.stellent.ridc.model.TransferFile;
import oracle.stellent.ridc.model.impl.DataObjectImpl;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;

import tvs.com.ridc.wcc.meta.CollectionAttributeDef;
import tvs.com.ridc.wcc.meta.DocType;
import tvs.com.ridc.wcc.meta.DocumentAttributeDef;
import tvs.com.ridc.wcc.operation.CheckInNewFolio;
import tvs.com.ridc.wcc.operation.CheckInNewOperation;
import tvs.com.ridc.wcc.operation.CheckInSelOperation;
import tvs.com.ridc.wcc.operation.CheckInUniversalOperation;
import tvs.com.ridc.wcc.operation.CheckOutByNameOperation;
import tvs.com.ridc.wcc.operation.CheckOutOperation;
import tvs.com.ridc.wcc.operation.CollectionAddLinkOperation;
import tvs.com.ridc.wcc.operation.CollectionAddOperation;
import tvs.com.ridc.wcc.operation.CollectionCopyLotOperation;
import tvs.com.ridc.wcc.operation.CollectionDeleteItemOperation;
import tvs.com.ridc.wcc.operation.CollectionDeleteLotOperation;
import tvs.com.ridc.wcc.operation.CollectionDeleteOperation;
import tvs.com.ridc.wcc.operation.CollectionMoveLotOperation;
import tvs.com.ridc.wcc.operation.CollectionRestoreItemOperation;
import tvs.com.ridc.wcc.operation.CollectionUpdateOperation;
import tvs.com.ridc.wcc.operation.ContentWaitForBrowserOperation;
import tvs.com.ridc.wcc.operation.DeleteDocOperation;
import tvs.com.ridc.wcc.operation.DeleteRivisionOperation;
import tvs.com.ridc.wcc.operation.ExpriedContentsOperations;
import tvs.com.ridc.wcc.operation.FactoryOperations;
import tvs.com.ridc.wcc.operation.GetCheckInNewFormOperation;
import tvs.com.ridc.wcc.operation.GetCheckInSelFormOperation;
import tvs.com.ridc.wcc.operation.GetCollectionInfoOperation;
import tvs.com.ridc.wcc.operation.GetCollectionOperation;
import tvs.com.ridc.wcc.operation.GetCollectionsOperation;
import tvs.com.ridc.wcc.operation.GetContentOperation;
import tvs.com.ridc.wcc.operation.GetContentsOperation;
import tvs.com.ridc.wcc.operation.GetDocInfoByName;
import tvs.com.ridc.wcc.operation.GetDocInfoOperation;
import tvs.com.ridc.wcc.operation.GetDocTypesOperation;
import tvs.com.ridc.wcc.operation.GetDynamicConversion;
import tvs.com.ridc.wcc.operation.GetFileOperation;
import tvs.com.ridc.wcc.operation.GetFolioInforOperation;
import tvs.com.ridc.wcc.operation.GetGUIDS;
import tvs.com.ridc.wcc.operation.GetOptionListOperation;
import tvs.com.ridc.wcc.operation.GetProfilesOperation;
import tvs.com.ridc.wcc.operation.GetSchemaFieldInfoOperation;
import tvs.com.ridc.wcc.operation.GetSchemaViewFragmentOperation;
import tvs.com.ridc.wcc.operation.GetSearchResultsOperation;
import tvs.com.ridc.wcc.operation.GetUpdateFormOperation;
import tvs.com.ridc.wcc.operation.GetUserPermissionsOperation;
import tvs.com.ridc.wcc.operation.QueryUserAttributesOperation;
import tvs.com.ridc.wcc.operation.UndoCheckOutByNameOperation;
import tvs.com.ridc.wcc.operation.UpdateDocInfoOperation;
import tvs.com.ridc.wcc.operation.UpdateFolio;
import tvs.com.ridc.wcc.operation.WorkFlowCheckInOperation;
import tvs.com.ridc.wcc.util.ActionChecker;
import tvs.com.ridc.wcc.util.OperationUtil;
import tvs.com.ridc.wcc.util.PermissionChecker;
import tvs.com.web.pojo.CollectionItem;
import tvs.com.web.pojo.ContentItem;
import tvs.com.web.pojo.FieldItem;
import tvs.com.web.pojo.FileUploaded;
import tvs.com.web.pojo.FolioItem;
import tvs.com.web.pojo.RuleItem;
import tvs.com.web.pojo.User;
import tvs.com.web.pojo.WfDocInfo;
import tvs.com.web.pojo.WorkflowInfo;
import tvs.com.web.pojo.WorkflowStep;

import view.backing.common.ADFUtils;
import view.backing.common.FormUtils;
import view.backing.common.JSFUtils;
import view.backing.factory.EjbServiceFactory;
import view.backing.system.config.ConfigEnum;
import view.backing.system.config.ConfigUtil;
import view.backing.system.logs.LogsBean;
import view.backing.system.utils.SystemUtils;


//import org.apache.jcs.JCS;


//import tvs.com.vn.ridc.dc.SearchDataObject;
//import tvs.com.vn.ridc.operation.SearchWebContent;


public class ServiceFacade {
    //          INSTANCE;
    //    private static final ADFLogger _logger = ADFLogger.createADFLogger(ServiceFacade.class);
    //    private static final UCMConnector ucmConnector = UCMConnector.getInstance();
    private static String totalRow;

    //    private static JCS serviceCache;
    //
    //    static{
    //        try{
    //            serviceCache = JCS.getInstance("bookCache");
    //           }
    //           catch (Exception e)
    //           {
    //            // Handle cache region initialization failure
    //            e.printStackTrace();
    //           }
    //    }

    public ServiceFacade() {
        super();
    }

    public static List<ContentItem> getContentsByQueryText(String queryText) throws Exception {
        GetSearchResultsOperation operation =
            (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
        List<ContentItem> contents = new ArrayList<ContentItem>();
        operation.setQueryText(queryText);
        operation.setResultCount(String.valueOf(Integer.MAX_VALUE));
        boolean result = operation.execute();
        if (!result) {
            return contents;
        }
        setTotalRow(operation.getTotalRow().toString());
        DataResultSet dataRs = operation.getSearchResults();
        ContentItem item = null;
        User user = ServiceFacade.queryCurrUserAttributes();
        for (DataObject row : dataRs.getRows()) {
            item = extractDataObjetcToContentItem(row, user);       
            if(item != null)
                contents.add(item);
            // add more if needed
        }
        return contents;
    }

    /**
     * PhuongNH comment : lưu ý hàm search này tạm thời chưa limit
     * @param queryText
     * @param sortField
     * @param sortOrder
     * @param startRow
     * @param resultCount
     * @return
     * @throws Exception
     */
    public static List<ContentItem> getContentsLimitByQueryText(String queryText,String sortField, String sortOrder, String startRow,String resultCount) throws Exception {
        GetSearchResultsOperation operation =
            (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
        List<ContentItem> contents = new ArrayList<ContentItem>();
        operation.setQueryText(queryText);
        operation.setSortField(sortField);
        operation.setSortOrder(sortOrder);
        operation.setStartRow(startRow);
        if (!resultCount.isEmpty()) {
            try {
                int count = Integer.valueOf(resultCount);
                if (count > 0)
                    operation.setResultCount(resultCount);
            } catch (Exception nfe) {
                // TODO: Add catch code
                nfe.printStackTrace();
            }

        }
        operation.setResultCount(resultCount);
        setTotalRow("0");
        boolean result = operation.execute();
        if (!result) {
            return contents;
            //            throw new Exception(operation.getMessage());
        }
        //setTotalRow(operation.getTotalRow().toString());
        User user = ServiceFacade.queryCurrUserAttributes();
        DataResultSet dataRs = operation.getSearchResults();
        ContentItem item = null;
        String trashFolderId = "";
        Object obj =
            ConfigUtil.getConfigValue(ConfigEnum.TrashRepositoryRoot.getName());
        if (null != obj && StringUtils.isEmpty(obj.toString())) {
            trashFolderId = obj.toString();
        }
        for (DataObject row : dataRs.getRows()) {
            item = extractDataObjetcToContentItem(row, user);
            if (item != null) {
                if (!StringUtils.isEmpty(trashFolderId)) {
                    if (!item.getxCollectionID().equalsIgnoreCase(trashFolderId)) {
                        contents.add(item);
                    }

                } else {
                    contents.add(item);
                }
            }

        }
        setTotalRow(String.valueOf(contents.size()));
        return contents;
    }

    /**
     * hàm thực hiện việc tìm kiếm, trả về bản ghi theo limit
     * @author PhuongNH
     * @param queryText
     * @param sortField
     * @param sortOrder
     * @param startRow
     * @param endRow
     * @param resultCount
     * @return
     * @throws Exception
     */
    public static List<ContentItem> getContentsLimitByQueryTextOk(String queryText,
                                                                  String sortField,
                                                                  String sortOrder,
                                                                  String startRow,
                                                                  String endRow,
                                                                  String resultCount) throws Exception {
        GetSearchResultsOperation operation =
            (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
        List<ContentItem> contents = new ArrayList<ContentItem>();
        operation.setQueryText(queryText);
        operation.setSortField(sortField);
        operation.setSortOrder(sortOrder);
        operation.setStartRow(startRow);
        operation.setEndRow(endRow);
        if (!resultCount.isEmpty()) {
            try {
                int count = Integer.valueOf(resultCount);
                if (count > 0)
                    operation.setResultCount(resultCount);
            } catch (Exception nfe) {
                // TODO: Add catch code
                nfe.printStackTrace();
            }

        }
        operation.setResultCount(resultCount);
        setTotalRow("0");
        boolean result = operation.execute();
        if (!result) {
            return contents;
            //            throw new Exception(operation.getMessage());
        }
        //setTotalRow(operation.getTotalRow().toString());
        String trashCollectionID =
            ConfigUtil.getValue(ConfigEnum.TrashRepositoryRoot.getName());
        User user = ServiceFacade.queryCurrUserAttributes();
        DataResultSet dataRs = operation.getSearchResults();
        ContentItem item = null;
        for (DataObject row : dataRs.getRows()) {

            item = extractDataObjetcToContentItem(row, user);
            if (item != null) {
                if (null == trashCollectionID ||
                    StringUtils.isEmpty(trashCollectionID)) {
                    contents.add(item);
                } else if (!item.getxCollectionID().equalsIgnoreCase(trashCollectionID)) {
                    contents.add(item);
                }
            }
        }
        setTotalRow(String.valueOf(contents.size()));
        return contents;
    }

    //    public static int countContentsByQueryTextOk(String queryText) throws Exception {
    //        int count = 0;
    //        ContentItem item;
    //        GetSearchResultsOperation operation =
    //            (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
    //        List<ContentItem> contents = new ArrayList<ContentItem>();
    //        operation.setQueryText(queryText);
    //        //        operation.setSortField(sortField);
    //        //        operation.setSortOrder(sortOrder);
    //        //        operation.setStartRow(startRow);
    //        //        operation.setEndRow(endRow);
    //        //        if (!resultCount.isEmpty()) {
    //        //            try {
    //        //                int count = Integer.valueOf(resultCount);
    //        //                if (count > 0)
    //        //                    operation.setResultCount(resultCount);
    //        //            } catch (Exception nfe) {
    //        //                // TODO: Add catch code
    //        //                nfe.printStackTrace();
    //        //            }
    //        //
    //        //        }
    //        //        operation.setResultCount(resultCount);
    //        //        setTotalRow("0");
    //        boolean result = operation.execute();
    //        if (!result) {
    //            return 0;
    //            //            throw new Exception(operation.getMessage());
    //        }
    //        //setTotalRow(operation.getTotalRow().toString());
    //        User user = ServiceFacade.queryCurrUserAttributes();
    //        DataResultSet dataRs = operation.getSearchResults();
    //        if (null == dataRs) {
    //            return 0;
    //        }
    //        String trashCollectionID =
    //            ConfigUtil.getValue(ConfigEnum.TrashRepositoryRoot.getName());
    //        if (null == trashCollectionID ||
    //            StringUtils.isEmpty(trashCollectionID)) {
    //            dataRs.getRows().size();
    //        }
    //        for (DataObject row : dataRs.getRows()) {
    //            item = extractDataObjetcToContentItem(row, user);
    //            if (item != null) {
    //                if (!item.getxCollectionID().equalsIgnoreCase(trashCollectionID)) {
    //                    count++;
    //                }
    //            }
    //        }
    //        return count;
    //    }

    /**
     * @Createdby TuyenNT
     * @Comment thu tuc dem so ban ghi theo dieu kien truyen vao
     * @param queryText
     * @return
     * @throws Exception
     */
    public static int countContentsByQueryTextOk(String queryText) throws Exception {
        int count = 0;
        ContentItem item;
        GetSearchResultsOperation operation =
            (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
        List<ContentItem> contents = new ArrayList<ContentItem>();
        operation.setQueryText(queryText);
        boolean result = operation.execute();
        if (!result) {
            return 0;
            //            throw new Exception(operation.getMessage());
        }
        //setTotalRow(operation.getTotalRow().toString());
        //        User user = ServiceFacade.queryCurrUserAttributes();
        //        DataResultSet dataRs = operation.getSearchResults();
        String totalrow = operation.getTotalRow();
        if (!totalrow.trim().isEmpty())
            count = Integer.parseInt(totalrow);
        //Loai bo so luong noi dung nam trong thung rac
        String trashCollectionID =
            ConfigUtil.getValue(ConfigEnum.TrashRepositoryRoot.getName());
        if (trashCollectionID != null && !trashCollectionID.isEmpty()) {
            operation =
                    (GetSearchResultsOperation)FactoryOperations.INSTANCE.getOperation(GetSearchResultsOperation.class);
            queryText += " <AND> xCollectionID = `" + trashCollectionID + "`";
            operation.setQueryText(queryText);
            result = operation.execute();
            if (!result) {
                return 0;
                //            throw new Exception(operation.getMessage());
            }
            totalrow = operation.getTotalRow();
            if (!totalrow.trim().isEmpty()) {
                count = count - Integer.parseInt(totalrow);
            }
        }
        return count;
    }

    /**
     *
     * @param dID String
     * @param dDocName String
     * @throws Exception
     */
    public static boolean deleteDoc(String dID,
                                 String dDocName) throws Exception {
        DeleteDocOperation operation =
            (DeleteDocOperation)FactoryOperations.INSTANCE.getOperation(DeleteDocOperation.class);
        operation.setdID(dID);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
//        if (!result) {
//            throw new Exception(operation.getMessage());
//        }
        return result;
    }

    /**
     *
     * @param params Map<String,Object>
     * @return boolean
     * @throws Exception
     */
    public static boolean checkInNew(Map<String, Object> params) throws Exception {
        CheckInNewOperation operation =
            (CheckInNewOperation)FactoryOperations.INSTANCE.getOperation(CheckInNewOperation.class);
        operation.setParams(params);
        boolean result = operation.execute();
        return result;
    }

    /**
     *
     * @param params Map<String,Object>
     * @return boolean
     * @throws Exception
     */
    public static DataObject checkInNew2(Map<String, Object> params) throws Exception {
        CheckInUniversalOperation operation =
            (CheckInUniversalOperation)FactoryOperations.INSTANCE.getOperation(CheckInUniversalOperation.class);
        operation.setParams(params);
        boolean result = operation.execute();
        if (result) {
            DataObject obj = operation.getLocalData();

            return obj;
        }
        return null;
        //        return StringUtils.EMPTY;
    }


    public static boolean checkInSel(Map<String, Object> params,
                                     boolean adMinContext) throws Exception {
        String userContext = StringUtils.EMPTY;
        if (adMinContext) {
            userContext =
                    String.valueOf(ConfigUtil.getConfigValue(ConfigEnum.WCCAdmin.getName()));
        } else {
            userContext = SystemUtils.getCurrentUserName();
        }
        return checkInSel(params, userContext);
    }

    /**
     * Service that checks in a revision to an existing content item
     * @param params Map<String,Object>
     * @return boolean
     * @throws Exception
     */
    public static boolean checkInSel(Map<String, Object> params,
                                     String userContext) throws Exception {
        CheckInSelOperation operation =
            (CheckInSelOperation)FactoryOperations.INSTANCE.getOperation(CheckInSelOperation.class);
        if (StringUtils.isEmpty(userContext)) {
            throw new NullPointerException("userName param is null or empty string.");
        }
        OperationUtil.setSpecialContext(operation, userContext);
        operation.setParams(params);
        boolean result = operation.execute();
        //        if(!result){
        //            throw new Exception(JSFUtils.getResourceBundle("TAO_PHIEN_BAN_NOI_DUNG_KHONG_THANH_CONG"));
        //        }
        return result;
    }

    /**
     * Service that checks in a new revision of a content item that is in a workflow
     * @param params Map<String,Object>
     * @return boolean
     * @throws Exception
     */
    public static boolean workflowCheckin(Map<String, Object> params) throws Exception {
        WorkFlowCheckInOperation operation =
            (WorkFlowCheckInOperation)FactoryOperations.INSTANCE.getOperation(WorkFlowCheckInOperation.class);
        operation.setParams(params);
        boolean result = operation.execute();
        if (!result) {
            throw new Exception(JSFUtils.getResourceBundle("WORKFLOW_CHECKIN_KHONG_THANH_CONG"));
        }
        return result;
    }


    /**
     * Get content checkin form
     * @param xCollectionID String: Folder ID
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getCheckInNewForm(String xCollectionID) throws Exception {
        List<RuleItem> rules = new ArrayList<RuleItem>();
        // cache lookup
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("xCollectionID", xCollectionID);
        Object objCached =
            ServiceCacheManager.get(false, GetCheckInNewFormOperation.class.getName(),
                                    keyMapParam);
        if (objCached instanceof List) {
            rules = (List<RuleItem>)objCached;
            return rules;
        }

        GetCheckInNewFormOperation operation =
            (GetCheckInNewFormOperation)FactoryOperations.INSTANCE.getOperation(GetCheckInNewFormOperation.class);
        operation.setxCollectionID(xCollectionID);
        boolean result = operation.execute();
        if (!result) {
            return new ArrayList<RuleItem>();
        }
        // query from ucm
        rules = operation.getRuleItems();

        for (RuleItem rule : rules) {
            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
            //            fieldList = rule.getGroupFieldList();
            Iterator fieldItemsIter = fieldList.values().iterator();
            FieldItem fieldItem;
            while (fieldItemsIter.hasNext()) {
                fieldItem = (FieldItem)fieldItemsIter.next();
                ServiceFacade.setupStandardFieldItem(fieldItem);
                ServiceFacade.setupCustomFieldItem(fieldItem);
            }
        }
        //        setupDependFields(rules);

        // set default value for xmTrangthai
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(rules);
        if (MapUtils.isNotEmpty(allFields) &&
            allFields.containsKey(DocumentAttributeDef.XM_TRANG_THAI.getName())) {
            FieldItem field =
                allFields.get(DocumentAttributeDef.XM_TRANG_THAI.getName());
            if (field.getDpFieldValue() == null ||
                StringUtils.isBlank(String.valueOf(field.getDpFieldValue()))) {
                Map<String, String> options = field.getOptionList();
                if (MapUtils.isNotEmpty(options)) {
                    Set<String> keySet = options.keySet();
                    if (keySet.iterator().hasNext()) {
                        String firstValue = keySet.iterator().next();
                        field.setDpFieldValue(firstValue);
                    }
                }
            }
        }
        //                // primaryFile  rule
        //        RuleItem fileRule = new RuleItem();
        //        fileRule.setGroupHeader(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        //        //        fileRule.setRuleName("file");
        //        fileRule.setRuleName(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        //
        //        Map<String, FieldItem> fieldListFile =
        //            new LinkedHashMap<String, FieldItem>();
        //        fileRule.setGroupFieldList(fieldListFile);
        //        FieldItem primaryFile = FormUtils.INSTANCE.buildPrimaryFileField();
        //        fieldListFile.put(primaryFile.getDFieldName(), primaryFile);
        //
        //        rules.add(0, fileRule);

        // put to cache
        ServiceCacheManager.put(false,
                                GetCheckInNewFormOperation.class.getName(),
                                keyMapParam, rules);
        return rules;
    }

    public static List<RuleItem> getContentNewStarndardForm(String dCollectionID) {
        List<RuleItem> rules = new ArrayList<RuleItem>();
        RuleItem basicRule = new RuleItem();
        RuleItem moreCollectInfoRule = new RuleItem();
        rules.add(basicRule);
        rules.add(moreCollectInfoRule);
        Map<String, FieldItem> fields = new LinkedHashMap<String, FieldItem>();
        basicRule.setGroupFieldList(fields);

        FieldItem field;
        String dFieldName;

        field = new FieldItem();
        dFieldName = DocumentAttributeDef.PRIMARY_FILE.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setIshidden(false);
        field.setType("system");
        field.setDType("file");
        fields.put(dFieldName, field);

        fields = new LinkedHashMap<String, FieldItem>();
        moreCollectInfoRule.setGroupFieldList(fields);

        // D_DOC_TYPE
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.D_DOC_TYPE.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        //        field.setRequiredMsg(JSFUtils.getMessage(dFieldName));
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map<String, String> docTypes = ServiceFacade.getDocTypes();
            field.setdIsOptionList(true);
            field.setOptionList(docTypes);
        } catch (Exception e) {
            e.printStackTrace();
        }

        //dCollectionID
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.X_COLLECTION_ID.getName();
        field.setDFieldName(dFieldName);
        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setIshidden(true);
        field.setType("system");
        fields.put(dFieldName, field);

        field = new FieldItem();
        dFieldName = DocumentAttributeDef.X_COLLECTION_ID_PATH.getName();
        field.setDFieldName(dFieldName);
        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(true);

        field.setType("system");
        fields.put(dFieldName, field);


        //dCollectionID
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.D_DOC_TITLE.getName();
        field.setDFieldName(dFieldName);
        //        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);

        // D_DOC_TYPE
        //        field  = new FieldItem();
        //        dFieldName = DocumentAttributeDef.D_DOC_TYPE.getName();
        //        field.setDFieldName(dFieldName);
        //        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        //        field.setIsRequired(false);
        //        field.setIsInfoOnly(false);
        //        field.setType("system");
        //        fields.put(dFieldName, field);
        //        try {
        //        Map<String, String>  docTypes = ServiceFacade.getDocTypes();
        //        field.setdIsOptionList(true);
        //        field.setOptionList(docTypes);
        //        } catch (Exception e) {
        //        e.printStackTrace();
        //        }
        // more info
        //        fields = new LinkedHashMap<String,FieldItem>();
        //        moreCollectInfoRule.setGroupFieldList(fields);

        // D_SECURITY_GROUP
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.D_SECURITY_GROUP.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map docTypes = ServiceFacade.getSecurityGroups();
            field.setdIsOptionList(true);
            field.setOptionList(docTypes);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // D_DOC_ACCOUNT
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.D_DOC_ACCOUNT.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map documentAccounts = ServiceFacade.getDocumentAccounts();
            field.setdIsOptionList(true);
            field.setOptionList(documentAccounts);
        } catch (Exception e) {
            e.printStackTrace();
        }
        //dCreateDate
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.D_CREATE_DATE.getName();
        //        field.setDpFieldValue(PreferenceUtil.INSTANCE.encodeDate(Calendar.getInstance().getTime()));
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        field.setDType("date");
        fields.put(dFieldName, field);
        return rules;
    }

    //    public static List<RuleItem> getCheckInNewFormWithAdMinContext(String xCollectionID) throws Exception {
    //        GetCheckInNewFormOperation operation =
    //            (GetCheckInNewFormOperation)FactoryOperations.INSTANCE.getOperation(GetCheckInNewFormOperation.class);
    //        OperationUtil.setAdminContext(operation);
    //        operation.setxCollectionID(xCollectionID);
    //        boolean result = operation.execute();
    //        if (!result) {
    //            return new ArrayList<RuleItem>();
    //        }
    //        List<RuleItem> rules = new ArrayList<RuleItem>();
    //        rules = operation.getRuleItems();
    //        for (RuleItem rule : rules) {
    //            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
    //            Iterator fieldItemsIter = fieldList.values().iterator();
    //            FieldItem fieldItem;
    //            while (fieldItemsIter.hasNext()) {
    //                fieldItem = (FieldItem)fieldItemsIter.next();
    //                ServiceFacade.setupStandardFieldItem(fieldItem);
    //                ServiceFacade.setupCustomFieldItem(fieldItem);
    //            }
    //        }
    //        setupDependFields(rules);
    //        return rules;
    //    }

    private static void setupDependFields(List<RuleItem> ruleItems) throws Exception {
        if (CollectionUtils.isEmpty(ruleItems))
            return;
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(ruleItems);
        Iterator<String> iter = allFields.keySet().iterator();
        String fieldName = StringUtils.EMPTY;
        FieldItem fieldItem;
        while (iter.hasNext()) {
            fieldName = iter.next();
            fieldItem = allFields.get(fieldName);
            if ("system".equalsIgnoreCase(fieldItem.getType()))
                continue;
            if (!fieldItem.isDIsOptionList())
                continue;
            // is meta and is option list
            try {
                FieldItem tmpField = getSchemaFieldInfoOperation(fieldName);
                fieldItem.setIsDependentList(tmpField.isIsDependentList());
                fieldItem.setDependentOnField(tmpField.getDependentOnField());
                fieldItem.setDependentRelationship(tmpField.getDependentRelationship());
                fieldItem.setOptionViewKey(tmpField.getOptionViewKey());
                if (tmpField.isIsDependentList()) {
                    FieldItem fieldTrigger =
                        allFields.get(fieldItem.getDependentOnField());
                    fieldTrigger.setIsTriggerDependent(true);
                    // call GET_SCHEMA_VIEW_FRAGMENT service to set map values to field
                    Map<String, String> dependMap =
                        getSchemaViewFragment(fieldItem.getOptionViewKey(),
                                              fieldItem.getDependentRelationship(),
                                              String.valueOf(fieldTrigger.getDpFieldValue()));
                    fieldItem.setOptionList(dependMap);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
    
    public static void setupDependFields2(List<RuleItem> ruleItems,
                                          String dCollectionID) throws Exception {
        if (CollectionUtils.isEmpty(ruleItems))
            return;
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(ruleItems);
        Iterator<String> iter = allFields.keySet().iterator();
        String fieldName = StringUtils.EMPTY;
        Map<String, Object> propertiesData =
            ServiceFacade.getCollectionInfoAsMap(true, dCollectionID);
        FieldItem fieldItem;
        while (iter.hasNext()) {
            fieldName = iter.next();
            fieldItem = allFields.get(fieldName);
            if ("system".equalsIgnoreCase(fieldItem.getType()))
                continue;
            if (!fieldItem.isDIsOptionList())
                continue;
            // is meta and is option list
            try {
                FieldItem tmpField = getSchemaFieldInfoOperation(fieldName);
                fieldItem.setIsDependentList(tmpField.isIsDependentList());
                fieldItem.setDependentOnField(tmpField.getDependentOnField());
                fieldItem.setDependentRelationship(tmpField.getDependentRelationship());
                fieldItem.setOptionViewKey(tmpField.getOptionViewKey());
                if (tmpField.isIsDependentList()) {
                    FieldItem fieldTrigger =
                        allFields.get(fieldItem.getDependentOnField());
                    fieldTrigger.setIsTriggerDependent(true);
                    // call GET_SCHEMA_VIEW_FRAGMENT service to set map values to field
                    Map<String, String> dependMap =
                        getSchemaViewFragment(fieldItem.getOptionViewKey(),
                                              fieldItem.getDependentRelationship(),
                                              String.valueOf(fieldTrigger.getDpFieldValue()));
                    fieldItem.setOptionList(dependMap);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    /**
     *
     * @param dID String
     * @param dDocName String
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getCheckInSelForm(String dID,
                                                   String dDocName) throws Exception {
        GetCheckInSelFormOperation operation =
            (GetCheckInSelFormOperation)FactoryOperations.INSTANCE.getOperation(GetCheckInSelFormOperation.class);
        operation.setdID(dID);
        operation.setdDocName(dDocName);

        boolean result = operation.execute();
        if (!result) {
            return new ArrayList<RuleItem>();
        }
        List<RuleItem> rules = new ArrayList<RuleItem>();
        rules = operation.getRuleItems();
        for (RuleItem rule : rules) {
            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
            Iterator fieldItemsIter = fieldList.values().iterator();
            FieldItem fieldItem;
            while (fieldItemsIter.hasNext()) {
                fieldItem = (FieldItem)fieldItemsIter.next();
                ServiceFacade.setupStandardFieldItem(fieldItem);
                ServiceFacade.setupCustomFieldItem(fieldItem);
            }
        }

        //        RuleItem fileRule = new RuleItem();
        //        fileRule.setGroupHeader(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        ////        fileRule.setRuleName("file");
        //        fileRule.setRuleName(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        //
        //        Map<String, FieldItem> fieldList =
        //            new LinkedHashMap<String, FieldItem>();
        //        fileRule.setGroupFieldList(fieldList);
        //
        //        FieldItem dOriginalFile = new FieldItem(); //dOriginalName
        //        dOriginalFile.setDFieldName(DocumentAttributeDef.D_ORIGINAL_NAME.getName()); //dOriginalName
        //        dOriginalFile.setDprFieldCaption(JSFUtils.getResourceBundle("D_ORIGINAL_NAME"));
        //        dOriginalFile.setIsInfoOnly(true);
        //        dOriginalFile.setIshidden(false);
        //        dOriginalFile.setIsRequired(true);
        //        String dOriginalFilevalue =
        //            OperationUtil.INSTANCE.getDpFieldValue(dOriginalFile.getDFieldName(),
        //                                                   operation.getDocInfoDataResultSet());
        //        dOriginalFile.setDpFieldValue(dOriginalFilevalue);
        //
        //        fieldList.put(DocumentAttributeDef.D_ORIGINAL_NAME.getName(),
        //                      dOriginalFile);
        //
        //        FieldItem primaryFile = FormUtils.INSTANCE.buildPrimaryFileField();
        //        primaryFile.setIsRequired(false);
        //        fieldList.put(primaryFile.getDFieldName(), primaryFile);
        //
        //        rules.add(fileRule);

        setupDependFields(rules);
        return rules;
    }

    /**
     *
     * @param fieldItem FieldItem
     * @throws Exception
     */
    public static void setupStandardFieldItem(FieldItem fieldItem) throws Exception {
        String fieldName = fieldItem.getDFieldName();

        if (DocumentAttributeDef.D_DOC_TYPE.getName().equalsIgnoreCase(fieldName)) {
            fieldItem.setDType("text");
            fieldItem.setType("system");
            fieldItem.setdIsOptionList(true);
            fieldItem.setDOptionListKey("docTypes");
            fieldItem.setDOptionListType("choice");
            fieldItem.setOptionList(ServiceFacade.getDocTypes());

        }
        if (DocumentAttributeDef.D_SECURITY_GROUP.getName().equalsIgnoreCase(fieldName)) {
            fieldItem.setDType("text");
            fieldItem.setType("system");
            fieldItem.setdIsOptionList(true);
            fieldItem.setDOptionListKey("SecurityGroups");
            fieldItem.setDOptionListType("choice");
            fieldItem.setOptionList(ServiceFacade.getSecurityGroups()); //schViewName
        }
        if (DocumentAttributeDef.D_DOC_ACCOUNT.getName().equalsIgnoreCase(fieldName)) {
            fieldItem.setDType("text");
            fieldItem.setType("system");
            fieldItem.setdIsOptionList(true);
            fieldItem.setDOptionListKey("DocumentAccounts");
            fieldItem.setDOptionListType("choice");
            fieldItem.setOptionList(ServiceFacade.getDocumentAccounts()); //schViewName
        }
        // doc formats
    }

    /**
     * Lấy thông tin Revision của  Content Item
     * @author loind
     * @createdDate Jul 8, 2014
     * @param
     * @return
     * @exceptions
     */
    public static List<DataObject> getContentItemData(String dID,
                                                      String dDocName) throws Exception {
        List<DataObject> lstDataObj = null;
        GetDocInfoOperation operation =
            (GetDocInfoOperation)FactoryOperations.INSTANCE.getOperation(GetDocInfoOperation.class);
        operation.setdID(dID);
        operation.setdDocName(dDocName);
        operation.execute();
        lstDataObj = operation.getDataResultSet().getRows();
        return lstDataObj;
    }

    /**
     * Lấy thông tin ContentItem kèm Map<> Permission được grant tương ứng
     * @author loind
     * @createdDate Jun 26, 2014
     * @param
     * @return
     * @exceptions
     */
    public static ContentItem getContentItem(String dID, String dDocName,
                                             boolean permissionCheck) throws Exception {
        ContentItem contentItem = null;
        try {
            List<DataObject> dataObj = new ArrayList<DataObject>();

            GetDocInfoOperation operation =
                (GetDocInfoOperation)FactoryOperations.INSTANCE.getOperation(GetDocInfoOperation.class);
            operation.setdID(dID);
            operation.setdDocName(dDocName);
            operation.execute();
            dataObj = operation.getDataResultSet().getRows();

            User user = ServiceFacade.queryCurrUserAttributes();
            for (DataObject row : dataObj) {
                if (permissionCheck) {
                    contentItem =
                            ServiceFacade.extractDataObjetcToContentItem(row,
                                                                         user);
                } else {
                    contentItem =
                            ServiceFacade.extractDataObjetcToContentItem(row);
                }
            }
            if (contentItem != null) {
                contentItem.setDocUrl(operation.getLocalData().get(DocumentAttributeDef.DOC_URL.getName()));
                contentItem.setdWebURL(operation.getLocalData().get(DocumentAttributeDef.D_WEB_URL.getName()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return contentItem;
    }

    public static String getDocUrlBydDocName(String dDocName) throws Exception {
        GetDocInfoByName operation =
            (GetDocInfoByName)FactoryOperations.INSTANCE.getOperation(GetDocInfoByName.class);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        if (result) {
            return operation.getLocalData().get(DocumentAttributeDef.DOC_URL.getName());
        }
        return StringUtils.EMPTY;
    }

    public static String getDocPreviewImage(String dDocName) throws Exception {
        GetFileOperation operation =
            (GetFileOperation)FactoryOperations.INSTANCE.getOperation(GetFileOperation.class);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        if (result) {
            return operation.getLocalData().get(DocumentAttributeDef.DOC_URL.getName());
        }
        return StringUtils.EMPTY;
    }

    /**
     * Trả về đường dẫn chứa urlpattern tới servlet,servlet này lấy stream từ ucm rồi trả  ảnh Thumbnaill về cho client.
     * @author PhuongNH
     * @param dDocName String
     * @return String
     * @throws Exception
     */
    public static String buildPreviewImage(String dDocName) throws Exception {

        String urlStr =
            "/cs/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=Latest&allowInterrupt=1&noSaveAs=1";
        urlStr = urlStr + "&dDocName=" + dDocName;

        return urlStr;
    }

    /**
     * trả về ảnh preview
     * @author PhuongNH
     * @param dDocName String
     * @return String
     * @throws Exception
     */
    public static String buildPreviewImage1(String dDocName) throws Exception {

        String urlStr =
            "/cs/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=Latest&allowInterrupt=1&noSaveAs=1&Rendition=Preview";
        urlStr = urlStr + "&dDocName=" + dDocName;

        return urlStr;
    }

    /**
     * trả về ảnh thumb
     * @author PhuongNH
     * @param dDocName String
     * @return String
     * @throws Exception
     */
    public static String buildThumbImage(String dDocName) throws Exception {

        String urlStr =
            "/cs/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=Latest&allowInterrupt=1&noSaveAs=1&Rendition=Thumbnail";
        urlStr = urlStr + "&dDocName=" + dDocName;

        return urlStr;
    }
    
    public static String buildThumbImageRemix(String dDocName) throws Exception {

        String urlStr =
            "/cs/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=Latest&allowInterrupt=1&noSaveAs=1";
        urlStr = urlStr + "&dDocName=" + dDocName;

        return urlStr;
    }

    /**
     * trả về ảnh thumb
     * @author PhuongNH
     * @param dDocName String
     * @return String
     * @throws Exception
     */
    public static String buildWebImage(String dDocName) throws Exception {

        String urlStr =
            "/cs/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=Latest&allowInterrupt=1&noSaveAs=1&Rendition=Web";
        urlStr = urlStr + "&dDocName=" + dDocName;

        return urlStr;
    }


    /**
     * Trả về đường dẫn chứ urlpattern tới servlet, servlet này lấy stream từ ucm rồi trả về cho client với các tham số phù hợp để client download
     * @param dID String
     * @param dDocName String
     * @param orignName String
     * @return String
     */
    public static String buildLinkDownload(String dID, String dDocName,
                                           String orignName) {
        //          String urlStr =  "/file/idcplg?IdcService=GET_FILE&RevisionSelectionMethod=specific&Rendition=web&allowInterrupt=1";
        String urlStr = "/cs/idcplg?IdcService=GET_FILE&allowInterrupt=1";
        StringBuilder builder = new StringBuilder(urlStr);

        if (StringUtils.isNotBlank(dID)) {
            //            urlStr = urlStr + "&dID=" + dID;
            //            urlStr = urlStr + "&RevisionSelectionMethod=specific";
            builder.append("&dID=" + dID);
            builder.append("&RevisionSelectionMethod=specific");
        } else {
            //            urlStr = urlStr + "&RevisionSelectionMethod=Latest";
            builder.append("&RevisionSelectionMethod=Latest");
        }
        if (StringUtils.isNotBlank(dDocName)) {
            //            urlStr = urlStr + "&dDocName=" + dDocName;
            builder.append("&dDocName=" + dDocName);
        }
        if (StringUtils.isNotBlank(orignName)) {
            //            urlStr = urlStr+"&dOriginalName="+orignName;
            builder.append("&dOriginalName=" + orignName);
        }
        return builder.toString();
    }

    /**
     *
     * @param fieldItem FieldItem
     * @throws Exception
     */
    public static void setupCustomFieldItem(FieldItem fieldItem) throws Exception {
        String fieldName = fieldItem.getDFieldName();
        if ("meta".equalsIgnoreCase(fieldItem.getType()) &&
            fieldItem.isDIsOptionList()) {
            //        fieldItem.setDType("text");
            //        fieldItem.setType("system");
            //        fieldItem.setdIsOptionList(true);
            //        fieldItem.setDOptionListKey("SecurityGroups");
            //        fieldItem.setDOptionListType("choice");
            String viewName = fieldItem.getDOptionListKey();

            //"view://NgonNgu_VIEW",
            if (StringUtils.isNotBlank(viewName)) {
                if (viewName.startsWith("view://")) {
                    viewName = viewName.substring(7, viewName.length());
                }
                if(!viewName.equals("Folders.TrueFalseView") && !viewName.equals("tree://")){
                    Map<String, String> optionList =
                        ServiceFacade.getOptionList(viewName);
                    fieldItem.setOptionList(optionList); //schViewName
                }
            }


            // doc formats
        }
    }

    /**
     * Lấy thông tin form tạo mới nội dung theo giá trị contentType.
     * @param dpdIsplayLabel String
     * @param dpTriggerValue String
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getCheckInNewForm(String dpdIsplayLabel,
                                                   String dpTriggerValue) throws Exception {
        return getCheckInNewForm(dpdIsplayLabel, dpTriggerValue, false);
    }

    public static List<RuleItem> getCheckInNewForm(String dpdIsplayLabel,
                                                   String dpTriggerValue,
                                                   boolean adMinContext) throws Exception {
        GetCheckInNewFormOperation operation =
            (GetCheckInNewFormOperation)FactoryOperations.INSTANCE.getOperation(GetCheckInNewFormOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setDpdisplayLabel(dpdIsplayLabel);
        operation.setDpTriggerValue(dpTriggerValue);
        boolean result = operation.execute();
        if (!result) {
            return new ArrayList<RuleItem>();
        }
        List<RuleItem> rules = new ArrayList<RuleItem>();
        rules = operation.getRuleItems();
        for (RuleItem ri : rules) {
            Map<String, FieldItem> fieldList = ri.getGroupFieldList();
            Iterator fieldItemsIter = fieldList.values().iterator();
            FieldItem fieldItem;
            while (fieldItemsIter.hasNext()) {
                fieldItem = (FieldItem)fieldItemsIter.next();
                ServiceFacade.setupStandardFieldItem(fieldItem);
                ServiceFacade.setupCustomFieldItem(fieldItem);
            }
        }

//        setupDependFields(rules);

        //        // set default value for xmTrangthai
        //        Map<String, FieldItem> allFields =
        //            FormUtils.INSTANCE.getAllFields(rules);
        //        if (MapUtils.isNotEmpty(allFields) &&
        //            allFields.containsKey(DocumentAttributeDef.XM_TRANG_THAI.getName())) {
        //            FieldItem field =
        //                allFields.get(DocumentAttributeDef.XM_TRANG_THAI.getName());
        //            if (field.getDpFieldValue() == null ||
        //                StringUtils.isBlank(String.valueOf(field.getDpFieldValue()))) {
        //               Map<String, String> options = field.getOptionList();
        //               if(MapUtils.isNotEmpty(options)){
        //                    Set<String> keySet = options.keySet();
        //                    if(keySet.iterator().hasNext()){
        //                        String firstValue = keySet.iterator().next();
        //                        field.setDpFieldValue(firstValue);
        //                    }
        //               }
        //           }
        //        }
        // primaryFile  rule
        //        RuleItem fileRule = new RuleItem();
        //        fileRule.setGroupHeader(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        //        //        fileRule.setRuleName("file");
        //        fileRule.setRuleName(JSFUtils.getResourceBundle("TEP_NOI_DUNG"));
        //
        //        Map<String, FieldItem> fieldListFile =
        //           new LinkedHashMap<String, FieldItem>();
        //        fileRule.setGroupFieldList(fieldListFile);
        //        FieldItem primaryFile = FormUtils.INSTANCE.buildPrimaryFileField();
        //        fieldListFile.put(primaryFile.getDFieldName(), primaryFile);
        //
        //        rules.add(0, fileRule);

        return rules;
    }

    public static Map<String, String> getNewFormFields(String dpdIsplayLabel,
                                                       String dpTriggerValue) throws Exception {
        List<RuleItem> rules =
            getCheckInNewForm(dpdIsplayLabel, dpTriggerValue);
        Map<String, FieldItem> fieldItems =
            FormUtils.INSTANCE.getAllFields(rules);
        if (MapUtils.isEmpty(fieldItems)) {
            return new HashMap<String, String>();
        }
        Map<String, String> fields = new HashMap<String, String>();
        Iterator<String> keyIter = fieldItems.keySet().iterator();
        String fieldName;
        while (keyIter.hasNext()) {
            fieldName = keyIter.next();
            fields.put(fieldName,
                       fieldItems.get(fieldName).getDprFieldCaption());
        }
        return fields;
    }


    /**
     *
     * @param schViewName String
     * @return Map<String, Object>
     * @throws Exception
     */
    public static Map<String, String> getOptionList(String schViewName) throws Exception {
        return getOptionList(schViewName, true);
    }

    /**
     * Cache supported
     * @param schViewName
     * @param adMinContext
     * @return
     * @throws Exception
     */
    public static Map<String, String> getOptionList(String schViewName,
                                                    boolean adMinContext) throws Exception {
        Map<String, String> optionList = new HashMap<String, String>();
        //VuTA disable cache=====begin
        // cache lookup
        //        Map<String, String> keyMapParam = new HashMap<String, String>();
        //        keyMapParam.put("schViewName", schViewName);
        //        Object objCached =
        //            ServiceCacheManager.get(adMinContext, GetOptionListOperation.class.getName(),
        //                                    keyMapParam);
        //        if (objCached instanceof Map) {
        //            optionList = (Map<String, String>)objCached;
        //            return optionList;
        //        }
        //VuTA disable cache=====end
        GetOptionListOperation operation =
            (GetOptionListOperation)FactoryOperations.INSTANCE.getOperation(GetOptionListOperation.class);
        operation.setSchViewName(schViewName);

        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        boolean result = operation.execute();
        if (result) {
            optionList = operation.getOptionList();
        }
        //VuTA disable cache=====begin
        //        ServiceCacheManager.put(adMinContext,
        //                                GetOptionListOperation.class.getName(),
        //                                keyMapParam, optionList);
        //VuTA disable cache=====end
        return optionList;
    }

    /**
     * Cache supported
     * @param schViewName
     * @param schRelationName
     * @param schParentValue
     * @return
     * @throws Exception
     */
    public static Map<String, String> getSchemaViewFragment(String schViewName,
                                                            String schRelationName,
                                                            String schParentValue) throws Exception {
        Map<String, String> schemaViewData = new HashMap<String, String>();

        //VuTA disabe cache=====begin
        // cache lookup
        //        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        //        keyMapParam.put("schViewName", schViewName);
        //        keyMapParam.put("schRelationName", schRelationName);
        //        keyMapParam.put("schParentValue", schParentValue);
        //        Object objCached =
        //            ServiceCacheManager.get(true, GetSchemaViewFragmentOperation.class.getName(),
        //                                    keyMapParam);
        //        if (objCached instanceof Map) {
        //            schemaViewData = (Map<String, String>)objCached;
        //            return schemaViewData;
        //        }
        //VuTA disabe cache=====end

        GetSchemaViewFragmentOperation operation =
            (GetSchemaViewFragmentOperation)FactoryOperations.INSTANCE.getOperation(GetSchemaViewFragmentOperation.class);
        OperationUtil.setAdminContext(operation);
        operation.setSchViewName(schViewName);
        operation.setSchRelationName(schRelationName);
        operation.setSchParentValue(schParentValue);

        boolean result = operation.execute();
        if (result) {
            schemaViewData = operation.getOptionList();
        }
        //VuTA disabe cache=====begin
        //        ServiceCacheManager.put(true,
        //                                GetSchemaViewFragmentOperation.class.getName(),
        //                                keyMapParam, schemaViewData);
        //VuTA disabe cache=====end
        return schemaViewData;
    }

    /**
     * cache supported
     * @return
     * @throws Exception
     */
    public static Map<String, String> getDocTypes() throws Exception {
        Map<String, String> docTypesHasProfile = new HashMap<String, String>();
        // cache lookup
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        Object objCached =
            ServiceCacheManager.get(true, GetDocTypesOperation.class.getName(),
                                    keyMapParam);
        if (objCached instanceof Map) {
            docTypesHasProfile = (Map<String, String>)objCached;
            return docTypesHasProfile;
        }

        GetDocTypesOperation operation =
            (GetDocTypesOperation)FactoryOperations.INSTANCE.getOperation(GetDocTypesOperation.class);
        OperationUtil.setAdminContext(operation);
        boolean result = operation.execute();
        Map<String, String> allDocTypes = new HashMap<String, String>();
        if (result) {
            allDocTypes = operation.getDocTypesMap();
        }
        Map<String, String> profiles = ServiceFacade.getProfiles();
        Iterator<String> profIter = profiles.keySet().iterator();
        while (profIter.hasNext()) {
            String prof = profIter.next();
            if (allDocTypes.containsKey(prof)) {
                docTypesHasProfile.put(prof, allDocTypes.get(prof));
            }
        }
        ServiceCacheManager.put(true, GetDocTypesOperation.class.getName(),
                                keyMapParam, docTypesHasProfile);
        return docTypesHasProfile;
    }


    public static Map<String, String> getDocumentAccounts() throws Exception {
        Map<String, String> allDocumentAccounts =
            new HashMap<String, String>();
        Map<String, String> myDocumentsAccount = new HashMap<String, String>();
        allDocumentAccounts =
                ServiceFacade.getOptionList("DocumentAccounts", true);
        User user = ServiceFacade.queryCurrUserAttributes();

        if (user != null && allDocumentAccounts != null) {
            if (user.getDocumentAccounts().get("#all") != null &&
                user.getDocumentAccounts().get("#all") >= 3) {
                return allDocumentAccounts;
            }
            Iterator<String> iter = allDocumentAccounts.keySet().iterator();
            String key;
            while (iter.hasNext()) {
                key = iter.next();
                if (user.getDocumentAccounts().containsKey(key)) {
                    if (user.getDocumentAccounts().get(key) >=
                        PermissionChecker.WRITE) {
                        myDocumentsAccount.put(key,
                                               allDocumentAccounts.get(key));
                    }

                }
            }
        }
        return myDocumentsAccount;
    }

    public static Map<String, String> getSecurityGroups() throws Exception {
        Map<String, String> allSecurityGroups = new HashMap<String, String>();
        Map<String, String> mySecurityGroups = new HashMap<String, String>();
        allSecurityGroups =
                ServiceFacade.getOptionList("SecurityGroups", true);
        User user = ServiceFacade.queryCurrUserAttributes();
        if (user != null && allSecurityGroups != null) {
            Iterator<String> iter = allSecurityGroups.keySet().iterator();
            String key;
            while (iter.hasNext()) {
                key = iter.next();
                if (user.getSecurityGroups().containsKey(key)) {
                    if (user.getSecurityGroups().get(key) >=
                        PermissionChecker.WRITE) {
                        mySecurityGroups.put(key, allSecurityGroups.get(key));
                    }
                }
            }
        }
        return OperationUtil.sortByValue(mySecurityGroups);
    }


    public CollectionItem getCollection(boolean collectionID,
                                        String dCollectionID) throws Exception {
        //        GetCollectionOperation operation  = new GetCollectionOperation(collectionID, dCollectionID);
        GetCollectionOperation operation =
            (GetCollectionOperation)FactoryOperations.INSTANCE.getOperation(GetCollectionOperation.class);
        operation.setCollectionID(collectionID);
        operation.setdCollectionID(dCollectionID);
        //        operation.init(ucmConnector.getIdcClient(), ucmConnector.getUserContext());
        boolean result = operation.execute();
        CollectionItem collectionItem = null;
        if (!result) {
            collectionItem = new CollectionItem();
        }

        DataResultSet dataRs = operation.getDataResultSet();

        for (DataObject row : dataRs.getRows()) {
            // ko dung fields
            collectionItem = extractDataObjetcToCollectionItem(row);
            // add more if needed
        }
        return collectionItem;
    }

    /**
     *
     * @param collectionID boolean
     * @param dCollectionID String
     * @return List<CollectionItem>
     * @throws Exception
     */
    public static List<CollectionItem> getCollections(boolean collectionID,
                                                      String dCollectionID) throws Exception {
        GetCollectionsOperation operation =
            (GetCollectionsOperation)FactoryOperations.INSTANCE.getOperation(GetCollectionsOperation.class);
        operation.setCollectionID(collectionID);
        if (collectionID) {
            operation.setdCollectionID(dCollectionID);
        } else {
            //            operation.setdCollectionPath(dCollectionPath);
            operation.setdCollectionPath(dCollectionID);
        }
        boolean result = operation.execute();
        List<CollectionItem> collectionItems = new ArrayList<CollectionItem>();
        if (!result) {
            return collectionItems;
        }
        DataResultSet dataRs = operation.getDataResultSet();
        CollectionItem collectionItem = null;
        for (DataObject row : dataRs.getRows()) {
            collectionItem = extractDataObjetcToCollectionItem(row);
            collectionItems.add(collectionItem);
            // add more if needed
        }
        return collectionItems;
    }

    public static List<RuleItem> getCollectionNewStarndardForm(String dCollectionID) {
        List<RuleItem> rules = new ArrayList<RuleItem>();
        RuleItem basicRule = new RuleItem();
        RuleItem moreCollectInfoRule = new RuleItem();
        rules.add(basicRule);
        rules.add(moreCollectInfoRule);
        Map<String, FieldItem> fields = new LinkedHashMap<String, FieldItem>();
        basicRule.setGroupFieldList(fields);

        FieldItem field;
        String dFieldName;

        //dCollectionID
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_COLLECTION_ID.getName();
        field.setDFieldName(dFieldName);
        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);

        // D_COLLECTION_NAME
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_COLLECTION_NAME.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);

        //D_COLLECTION_OWNER
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_COLLECTION_OWNER.getName();
        //        field.setDpFieldValue(SystemUtils.getCurrentUserName());
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        //        field.setdIsOptionList(true);
        fields.put(dFieldName, field);

        // D_COLLECTION_CREATOR
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_COLLECTION_CREATOR.getName();
        //        field.setDpFieldValue(SystemUtils.getCurrentUserName());
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        //        field.setdIsOptionList(true);
        fields.put(dFieldName, field);

        //dCreateDate
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_CREATE_DATE.getName();
        //        field.setDpFieldValue(PreferenceUtil.INSTANCE.encodeDate(Calendar.getInstance().getTime()));
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        field.setDType("date");
        fields.put(dFieldName, field);

        //dCollectionModifier
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_COLLECTION_MODIFIER.getName();
        //        field.setDpFieldValue(SystemUtils.getCurrentUserName());
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        fields.put(dFieldName, field);

        //dLastModifiedDate
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_LAST_MODIFIED_DATE.getName();
        //        field.setDpFieldValue(PreferenceUtil.INSTANCE.encodeDate(Calendar.getInstance().getTime()));
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(true);
        field.setType("system");
        field.setDType("date");
        fields.put(dFieldName, field);

        // more info
        fields = new LinkedHashMap<String, FieldItem>();
        moreCollectInfoRule.setGroupFieldList(fields);

        //dCollectionID
        field = new FieldItem();
        dFieldName = DocumentAttributeDef.X_COLLECTION_ID.getName();
        field.setDFieldName(dFieldName);
        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);

        field = new FieldItem();
        dFieldName = DocumentAttributeDef.X_COLLECTION_ID_PATH.getName();
        field.setDFieldName(dFieldName);
        field.setDpFieldValue(dCollectionID);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(true);
        field.setIsInfoOnly(true);
        field.setType("system");
        fields.put(dFieldName, field);

        // D_DOC_TYPE
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_DOC_TYPE.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        //field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map<String, String> allDocTypes = ServiceFacade.getDocTypes();
            Map<String, String> profiles = ServiceFacade.getProfiles();
            Map<String, String> docTypes = new HashMap<String, String>();
            Iterator<String> profIter = profiles.keySet().iterator();
            while (profIter.hasNext()) {
                String prof = profIter.next();
                if (allDocTypes.containsKey(prof)) {
                    docTypes.put(prof, allDocTypes.get(prof));
                }
            }
            field.setdIsOptionList(true);
            field.setOptionList(docTypes);
        } catch (Exception e) {
            e.printStackTrace();
        }
        // D_SECURITY_GROUP
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_SECURITY_GROUP.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map docTypes = ServiceFacade.getSecurityGroups();
            field.setdIsOptionList(true);
            field.setOptionList(docTypes);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // D_DOC_ACCOUNT
        field = new FieldItem();
        dFieldName = CollectionAttributeDef.D_DOC_ACCOUNT.getName();
        field.setDFieldName(dFieldName);
        field.setDprFieldCaption(JSFUtils.getMessage(dFieldName));
        field.setIsRequired(false);
        field.setIsInfoOnly(false);
        field.setType("system");
        fields.put(dFieldName, field);
        try {
            Map documentAccounts = ServiceFacade.getDocumentAccounts();
            field.setdIsOptionList(true);
            field.setOptionList(documentAccounts);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return rules;
    }

    public static List<RuleItem> getCollectionInfoStarndardForm(boolean collectionID,
                                                                String dCollectionIDOrDCollectionPath) throws Exception {
        GetCollectionInfoOperation operation =
            (GetCollectionInfoOperation)FactoryOperations.INSTANCE.getOperation(GetCollectionInfoOperation.class);
        operation.setCollectionID(collectionID);
        if (collectionID) {
            operation.setdCollectionID(dCollectionIDOrDCollectionPath);
        } else {
            operation.setdCollectionPath(dCollectionIDOrDCollectionPath);
        }
        boolean result = operation.execute();
        if (!result) {
            return new ArrayList<RuleItem>();
        }
        List<RuleItem> rules = new ArrayList<RuleItem>();
        DataObject localData = operation.getLocalData();

        RuleItem ruleItem = new RuleItem();
        FieldItem fieldItem;

        List<String> fieldNames = new ArrayList<String>();
        //            fieldNames.add("dCollectionID");
        //            fieldNames.add("dCollectionGUID");
        fieldNames.add("dCollectionName");
        fieldNames.add("dCollectionPath");
        fieldNames.add("dCollectionOwner");
        fieldNames.add("dCollectionCreator");
        fieldNames.add("dCreateDate");
        fieldNames.add("dCollectionModIfier");
        fieldNames.add("dLastModIfiedDate");
        fieldNames.add("dDocAccount");
        fieldNames.add("dSecurityGroup");
        //            fieldNames.add("dParentCollectionID");
        //            fieldNames.add("dUser");
        //            fieldNames.add("defaultAccount");

        for (String fieldName : fieldNames) {
            if (localData.containsKey(fieldName)) {
                fieldItem = new FieldItem();
                fieldItem.setDFieldName(fieldName);
                fieldItem.setDpFieldValue(localData.get(fieldName));
                fieldItem.setDprFieldCaption(JSFUtils.getMessage(fieldName));
                fieldItem.setIsInfoOnly(true);
                if (fieldName.equals("dLastModIfiedDate") ||
                    fieldName.equals("dCreateDate")) {
                    fieldItem.setDType("date");
                }

                ruleItem.getGroupFieldList().put(fieldName, fieldItem);
            }
        }

        rules.add(ruleItem);


        try {
            String contentRepositoryRootId =
                ConfigUtil.getValue(ConfigEnum.ContentRepositoryRoot);
            CollectionItem collectionRepoRoot =
                ServiceFacade.getCollectionInfo(true, contentRepositoryRootId);

            String rootPath = StringUtils.EMPTY;
            if (collectionRepoRoot != null) {
                rootPath = collectionRepoRoot.getdCollectionPath();
            }

            if (ruleItem.getGroupFieldList().containsKey("dCollectionPath")) {

                FieldItem collectionPath =
                    ruleItem.getGroupFieldList().get("dCollectionPath");
                String path = String.valueOf(collectionPath.getDpFieldValue());
                String sub = path.substring(rootPath.length());
                if (StringUtils.isEmpty(sub)) {
                    sub = "/";
                }
                collectionPath.setDpFieldValue(sub);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return rules;
    }

    public static CollectionItem getCollectionInfo(boolean collectionID,
                                                   String dCollectionID) throws Exception {
        return getCollectionInfo(collectionID, dCollectionID, false);
    }

    /**
     *
     * @param collectionID boolean
     * @param dCollectionIDOrDCollectionPath String
     * @return CollectionItem
     * @throws Exception
     */
    public static CollectionItem getCollectionInfo(boolean collectionID,
                                                   String dCollectionIDOrDCollectionPath,
                                                   boolean adMinContext) throws Exception {
        GetCollectionInfoOperation operation =
            (GetCollectionInfoOperation)FactoryOperations.INSTANCE.getOperation(GetCollectionInfoOperation.class);
        //        operation.init(ucmConnector.getIdcClient(), ucmConnector.getUserContext());
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setCollectionID(collectionID);
        if (collectionID) {
            operation.setdCollectionID(dCollectionIDOrDCollectionPath);
        } else {
            operation.setdCollectionPath(dCollectionIDOrDCollectionPath);
        }

        boolean result = operation.execute();
        if (!result) {
            return null;
        }
        CollectionItem collectionItem = new CollectionItem();
        DataObject localData = operation.getLocalData();
        collectionItem.setdDocType(localData.get(CollectionAttributeDef.D_DOC_TYPE.getName()));
        collectionItem.setdCollectionID(localData.get(CollectionAttributeDef.D_COLLECTION_ID.getName()));
        collectionItem.setdCollectionGUID(localData.get(CollectionAttributeDef.D_COLLECTION_GUID.getName()));
        collectionItem.setdCollectionPath(localData.get(CollectionAttributeDef.D_COLLECTION_PATH.getName()));
        collectionItem.setdCollectionName(localData.get(CollectionAttributeDef.D_COLLECTION_NAME.getName()));
        collectionItem.setdCollectionOwner(localData.get(CollectionAttributeDef.D_COLLECTION_OWNER.getName()));
        collectionItem.setdCollectionType(localData.get(CollectionAttributeDef.D_COLLECTION_TYPE.getName()));
        collectionItem.setdSecurityGroup(localData.get(CollectionAttributeDef.D_SECURITY_GROUP.getName()));
        collectionItem.setdDocAccount(localData.get(CollectionAttributeDef.D_DOC_ACCOUNT.getName()));
        collectionItem.setdParentCollectionID(localData.get(CollectionAttributeDef.D_PARENT_COLLECTION_ID.getName()));


        collectionItem.setCanReadCollection(localData.getBoolean(CollectionAttributeDef.CAN_READ_COLLECTION.getName(),
                                                                 false));
        collectionItem.setCanWriteCollection(localData.getBoolean(CollectionAttributeDef.CAN_WRITE_COLLECTION.getName(),
                                                                  false));
        collectionItem.setCanDeleteCollection(localData.getBoolean(CollectionAttributeDef.CAN_DELETE_COLLECTION.getName(),
                                                                   false));
        collectionItem.setCanAdminCollection(localData.getBoolean(CollectionAttributeDef.CAN_ADMIN_COLLECTION.getName(),
                                                                  false));

        DataResultSet pathResultSet = operation.getPathResultSet();
        List<CollectionItem> paths = new ArrayList<CollectionItem>();

        CollectionItem collectionItemPath;
        for (DataObject row : pathResultSet.getRows()) {
            collectionItemPath = extractDataObjetcToCollectionItem(row);
            paths.add(collectionItemPath);
        }
        collectionItem.setPath(paths);
        return collectionItem;
    }

    /**
     * Trả về dữ liệu trong localdata thông quan COLLECTION_INFO service
     * @param collectionID
     * @param dCollectionID
     * @return
     * @throws Exception
     */
    public static Map<String, Object> getCollectionInfoAsMap(boolean collectionID,
                                                             String dCollectionID) throws Exception {
        GetCollectionInfoOperation operation =
            (GetCollectionInfoOperation)FactoryOperations.INSTANCE.getOperation(GetCollectionInfoOperation.class);
        operation.setCollectionID(collectionID);
        operation.setdCollectionID(dCollectionID);
        Map<String, Object> dataMap = new HashMap<String, Object>();
        boolean result = operation.execute();
        if (!result)
            return dataMap;
        DataObject localData = operation.getLocalData();
        Set<String> set = localData.keySet();
        Iterator<String> iter = set.iterator();
        String fieldName;
        while (iter.hasNext()) {
            fieldName = iter.next();
            // date object
            if (fieldName.equals(CollectionAttributeDef.D_CREATE_DATE.getName()) ||
                fieldName.equals(CollectionAttributeDef.D_LAST_MODIFIED_DATE.getName())) {
                Date dateobj = localData.getDate(fieldName);
                dataMap.put(fieldName, dateobj);
                ////System.out.println("**** dateobj : "+dateobj);
                continue;
            }
            dataMap.put(fieldName, localData.get(fieldName));
        }
        return dataMap;
    }

    /**
     * Đã filter với content có xmTrangthai = ban nhap' không phải của user hiện thời
     * @param collectionID
     * @param dCollectionID
     * @return
     * @throws Exception
     */
    public static List<ContentItem> getContents(boolean collectionID,
                                                String dCollectionID) throws Exception {
        GetContentsOperation operation =
            (GetContentsOperation)FactoryOperations.INSTANCE.getOperation(GetContentsOperation.class);
        operation.setCollectionID(collectionID);
        operation.setdCollectionID(dCollectionID);
        boolean result = operation.execute();
        List<ContentItem> items = new ArrayList<ContentItem>();
        if (!result) {
            return items;
        }
        DataResultSet dataRs = operation.getContents();
        ContentItem item = null;
        User user = ServiceFacade.queryCurrUserAttributes();
        //        List<DataObject> contentsAssigned =
        //            ServiceFacade.getContentWaitForBrowser();
        for (DataObject row : dataRs.getRows()) {
            item = extractDataObjetcToContentItem(row, user);
            if (item != null) {
                items.add(item);
            }
        }
        return items;
    }

    /**
     * Lấy danh sách Item trong thư mục Folio
     * @author loind
     * @createdDate Jun 24, 2014
     * @param
     * @return
     * @exceptions
     */
    public static List<ContentItem> getFolioItems(boolean collectionID,
                                                  String dCollectionID) throws Exception {
        GetContentsOperation operation =
            (GetContentsOperation)FactoryOperations.INSTANCE.getOperation(GetContentsOperation.class);
        operation.setCollectionID(collectionID);
        operation.setdCollectionID(dCollectionID);
        boolean result = operation.execute();
        List<ContentItem> items = new ArrayList<ContentItem>();
        if (!result) {
            return items;
        }
        DataResultSet dataRs = operation.getContents();
        ContentItem item = null;

        for (DataObject row : dataRs.getRows()) {
            item = extractDataObjetcToContentItem(row);
            if (item != null) {
                items.add(item);
            }
        }
        return items;
    }


    /**
     * @creator Tuyến NT
     * @comment thủ tục lấy tất cả các nội dung dưới thư mục theo service COLLECTION_DISPLAY
     * @param collectionID
     * @param dCollectionID
     * @return
     * @throws Exception
     */
    public static List<ContentItem> getContentsUnderFolder(boolean collectionID,
                                                           String dCollectionID) throws Exception {
        GetContentOperation operation =
            (GetContentOperation)FactoryOperations.INSTANCE.getOperation(GetContentOperation.class);
        operation.setCollectionID(collectionID);
        operation.setdCollectionID(dCollectionID);
        boolean result = operation.execute();
        List<ContentItem> items = new ArrayList<ContentItem>();
        if (!result) {
            return items;
        }
        DataResultSet dataRs = operation.getDataResultSet();
        ContentItem item = null;
        User user = ServiceFacade.queryCurrUserAttributes();
        //        List<DataObject> contentsAssigned =
        //            ServiceFacade.getContentWaitForBrowser();
        for (DataObject row : dataRs.getRows()) {
            item = extractDataObjetcToContentItem(row, user);
            if (item != null) {
                items.add(item);
            }
        }
        return items;
    }

    public static int countContents(boolean collectionID,
                                    String dCollectionID) throws Exception {
        List<ContentItem> contents =
            ServiceFacade.getContents(collectionID, dCollectionID);
        if (contents != null) {
            return contents.size();
        }
        return 0;
    }

    /**
     *
     * @param dID String
     * @param dDocName String
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getDocInfoForm(String dID,
                                                String dDocName) throws Exception {
        GetDocInfoOperation operation = (GetDocInfoOperation)FactoryOperations.INSTANCE.getOperation(GetDocInfoOperation.class);
        operation.setdID(dID);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();

        if (!result) {
            return new ArrayList<RuleItem>();
        }

        List<RuleItem> rules = new ArrayList<RuleItem>();
        rules = operation.getRuleItems();
        for (RuleItem rule : rules) {
            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
            if(fieldList != null && fieldList.values() != null){
                Iterator fieldItemsIter = fieldList.values().iterator();
                FieldItem fieldItem;
                while (fieldItemsIter.hasNext()) {
                    fieldItem = (FieldItem)fieldItemsIter.next();
                    ServiceFacade.setupStandardFieldItem(fieldItem);
                    ServiceFacade.setupCustomFieldItem(fieldItem);
                    // set all to readonly
                    fieldItem.setIsInfoOnly(true);
                    //                fieldItem.setIshidden(false);
                    //                fieldItem.setIsEnabled(true);
                    //                fieldItem.setIsRequired(false);

                }
            }
        }
        return rules;
    }

    public static List<RuleItem> getDocInfoFormByName(String dDocName) throws Exception {
        GetDocInfoByName operation =
            (GetDocInfoByName)FactoryOperations.INSTANCE.getOperation(GetDocInfoByName.class);
        //        operation.setdID(dID);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();

        if (!result) {
            return new ArrayList<RuleItem>();
        }

        List<RuleItem> rules = new ArrayList<RuleItem>();
        rules = operation.getRuleItems();
        for (RuleItem rule : rules) {
            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
            Iterator fieldItemsIter = fieldList.values().iterator();
            FieldItem fieldItem;
            while (fieldItemsIter.hasNext()) {
                fieldItem = (FieldItem)fieldItemsIter.next();
                ServiceFacade.setupStandardFieldItem(fieldItem);
                ServiceFacade.setupCustomFieldItem(fieldItem);
                // set all to readonly
                fieldItem.setIsInfoOnly(true);
                //                fieldItem.setIshidden(false);
                //                fieldItem.setIsEnabled(true);
                //                fieldItem.setIsRequired(false);

            }
        }
        return rules;
    }

    /**
     *
     * @param hasCollectionPath boolean
     * @param dCollectionPath String
     * @return boolean
     * @throws Exception
     */
    public static boolean deleteCollection(boolean hasCollectionPath,
                                           String dCollectionPath) throws Exception {
        CollectionDeleteOperation operation =
            (CollectionDeleteOperation)FactoryOperations.INSTANCE.getOperation(CollectionDeleteOperation.class);
        if (hasCollectionPath) {
            operation.setHasCollectionPath(hasCollectionPath);
            operation.setdCollectionPath(dCollectionPath);
        } else {
            operation.setHasCollectionGUID(true);
            operation.setdCollectionGUID(dCollectionPath);
        }

        boolean result = operation.execute();
        return result;
    }

    /**
     *
     * @param dDocName String
     * @return boolean
     * @throws Exception
     */
    public static boolean deleteCollectionItem(String dDocName) throws Exception {
        CollectionDeleteItemOperation operation =
            (CollectionDeleteItemOperation)FactoryOperations.INSTANCE.getOperation(CollectionDeleteItemOperation.class);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        return result;
    }

    public static Map<String, String> getProfiles() throws Exception {
        GetProfilesOperation operation =
            (GetProfilesOperation)FactoryOperations.INSTANCE.getOperation(GetProfilesOperation.class);
        boolean result = operation.execute();

        Map<String, String> profilesMap = new HashMap<String, String>();
        for (DataObject row : operation.getProfiles().getRows()) {
            profilesMap.put(row.get(DocumentAttributeDef.DP_TRIGGER_VALUE.getName()),
                            row.get(DocumentAttributeDef.DP_DISPLAY_LABEL.getName()));

        }
        return profilesMap;
    }

    public static List<DataObject> getExpriedContents(String querytext,
                                                      String startrow,
                                                      String endRow,
                                                      String sortorder,
                                                      String sortfiled,
                                                      String rowresult) throws Exception {
        ExpriedContentsOperations operation =
            (ExpriedContentsOperations)FactoryOperations.INSTANCE.getOperation(ExpriedContentsOperations.class);
        operation.setQueryText(querytext);
        operation.setStartRow(startrow);
        operation.setEndRow(endRow);
        operation.setSortOrder(sortorder);
        operation.setSortField(sortfiled);
        operation.setResultCount(rowresult);
        operation.execute();
        List<DataObject> dataObject = operation.getDataResultSet().getRows();

        return dataObject;
    }

    /**
     * @creator: thuongkc
     * @comment: lấy ra tin bài chờ duyệt
     * @return
     * @throws Exception
     */
    public static List<DataObject> getContentWaitForBrowser() throws Exception {

        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        operation.execute();
        List<DataObject> dataObject = operation.getDataResultSet().getRows();

        return dataObject;
    }

    /**
     * @creator: thuongkc
     * @comment: trả lại tin bài với tham số truyền vào là dID và message
     * @param dID
     * @param dMessage
     * @throws Exception
     */
    public static boolean rejectDoc(String dID,
                                    String dMessage) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        ContentItem contentItem = new ContentItem();
        contentItem.setdID(dID);
        contentItem.setdMessage(dMessage);
        operation.setContentItem(contentItem);
        boolean rejectRs = operation.executeReject();
        if (rejectRs) {
            DataObject localData = operation.getLocalData();
            Map<String, Object> mapParam = new HashMap<String, Object>();

            String dDocName =
                localData.get(DocumentAttributeDef.D_DOC_NAME.getName());
            String dId = localData.get(DocumentAttributeDef.D_ID.getName());
            if (!StringUtils.isBlank(dDocName)) {
                mapParam.put(DocumentAttributeDef.D_DOC_NAME.getName(),
                             localData.get(DocumentAttributeDef.D_DOC_NAME.getName()));
            }
            if (!StringUtils.isBlank(dId)) {
                mapParam.put(DocumentAttributeDef.D_ID.getName(),
                             localData.get(DocumentAttributeDef.D_ID.getName()));
            }
            // execute update metadata if content item
            try {
                contentItem =
                        ServiceFacade.getContentItem(dID, dDocName, false);
                mapParam.put(DocumentAttributeDef.D_REV_LABEL.getName(),
                             contentItem.getdRevLabel());
                mapParam.put(DocumentAttributeDef.D_SECURITY_GROUP.getName(),
                             contentItem.getdSecurityGroup());
                mapParam.put(DocumentAttributeDef.D_DOC_ACCOUNT.getName(),
                             contentItem.getdDocAccount());
                mapParam.put(DocumentAttributeDef.XM_TRANG_THAI.getName(),
                             contentItem.getXmTrangthai());

                boolean updateRs = ServiceFacade.updateContent(mapParam);
                if (updateRs) {

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return rejectRs;
    }

    /**
     * @creator: thuongkc
     * @comment: duyệt tin bài với tham số truyền vào là dID
     * @param dID
     * @throws Exception
     */
    public static boolean approveDoc(String dID) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        ContentItem contentItem = new ContentItem();
        contentItem.setdID(dID);
        operation.setContentItem(contentItem);
        boolean rejectRs = operation.executeApprove();
        if (rejectRs) {
            DataObject localData = operation.getLocalData();
            Map<String, Object> mapParam = new HashMap<String, Object>();

            String dDocName =
                localData.get(DocumentAttributeDef.D_DOC_NAME.getName());
            String dId = localData.get(DocumentAttributeDef.D_ID.getName());
            if (!StringUtils.isBlank(dDocName)) {
                mapParam.put(DocumentAttributeDef.D_DOC_NAME.getName(),
                             localData.get(DocumentAttributeDef.D_DOC_NAME.getName()));
            }
            if (!StringUtils.isBlank(dId)) {
                mapParam.put(DocumentAttributeDef.D_ID.getName(),
                             localData.get(DocumentAttributeDef.D_ID.getName()));
            }
            // execute update metadata if content item
            try {
                contentItem =
                        ServiceFacade.getContentItem(dID, dDocName, false);
                mapParam.put(DocumentAttributeDef.D_REV_LABEL.getName(),
                             contentItem.getdRevLabel());
                mapParam.put(DocumentAttributeDef.D_SECURITY_GROUP.getName(),
                             contentItem.getdSecurityGroup());
                mapParam.put(DocumentAttributeDef.D_DOC_ACCOUNT.getName(),
                             contentItem.getdDocAccount());
                mapParam.put(DocumentAttributeDef.XM_TRANG_THAI.getName(),
                             contentItem.getXmTrangthai());

                boolean updateRs = ServiceFacade.updateContent(mapParam);
                if (updateRs) {

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return rejectRs;
    }


    /**
     * @creator:thuongkc
     * @comment: khóa tin bài theo dID
     * @param dID
     * @throws Exception
     */
    public static void checkOutDoc(String dID) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        ContentItem contentItem = new ContentItem();
        contentItem.setdID(dID);
        operation.setContentItem(contentItem);
        operation.executeCheckOut();
    }

    public static DataBinder getWorkFlowInfo(String dDocName) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        DataBinder dataBinder = operation.executeWorkFlowInfo(dDocName);
        return dataBinder;
    }

    /**
     * @param dDocName String : dDocName của content.
     * @return Map<String,Object>  with keys flow as:
     *     Key :  WorkflowSteps ( WorkflowInfo instance ) : Toàn bộ step của workflow
     *     Key : WorkflowInfo ( WorkflowInfo instance) : Thông tin chung và toàn bộ các step của workflow
     *     Key : WF_DOC_INFO (WfDocInfo instance ) : Thông tin liên kết giữa content và workflow -> có chứa current step id
     *     Key : WorkflowStep (WorkflowStep instance) : Thông tin step hiện thời tương ứng với content & workflow. có chứa current step id , các users cho có quyền ở bước duyệt tiếp theo.
     * @throws Exception
     */
    public static Map<String, Object> getWfInfoOfContent(String dDocName) throws Exception {
        Map<String, Object> results = new HashMap<String, Object>();
        DataBinder dataBinder = ServiceFacade.getWorkFlowInfo(dDocName);
        Map<String, DataResultSet> dataResultSetMap =
            dataBinder.getResultSets();

        //extract info of workflow
        WorkflowInfo workflowInfo = new WorkflowInfo();
        Set<WorkflowStep> workflowSteps = new LinkedHashSet<WorkflowStep>();
        // common info of workflow
        DataResultSet WorkflowInfoRs = dataResultSetMap.get("WorkflowInfo");
        for (DataObject row : WorkflowInfoRs.getRows()) {
            workflowInfo.setDCompletionDate(row.getDate("dCompletionDate"));
            workflowInfo.setdIsCollaboration(row.getBoolean("dIsCollaboration",
                                                            false));
            workflowInfo.setDProjectID(row.getInteger("dProjectID"));
            workflowInfo.setdSecurityGroup(row.get("dSecurityGroup"));
            workflowInfo.setDWfDescription(row.get("dWfDescription"));
            workflowInfo.setDWfID(row.getInteger("dWfID"));
            workflowInfo.setDWfName(row.get("dWfName"));
            workflowInfo.setDWfStatus(row.get("dWfStatus"));
            workflowInfo.setDWfType(row.get("dWfType"));
        }
        // get all step of workflows
        DataResultSet workflowStepsRs = dataResultSetMap.get("WorkflowSteps");
        WorkflowStep workflowStepChild;
        for (DataObject row : workflowStepsRs.getRows()) {
            workflowStepChild = new WorkflowStep();
            workflowStepChild.setDWfID(row.getInteger("dWfID"));
            workflowStepChild.setDWfStepID(row.getInteger("dWfStepID"));
            workflowStepChild.setDWfStepName(row.get("dWfStepName"));
            workflowStepChild.setDWfStepDescription(row.get("dWfStepDescription"));
            workflowStepChild.setDWfStepType(row.get("dWfStepType"));
            workflowStepChild.setDWfStepWeight(row.get("dWfStepWeight"));
            workflowStepChild.setDWfStepIsSignature(row.getBoolean("dWfStepIsSignature",
                                                                   false));
            workflowStepChild.setDWfStepIsAll(row.getBoolean("dWfStepIsAll",
                                                             false));
            workflowSteps.add(workflowStepChild);
        }
        workflowInfo.setWorkflowSteps(workflowSteps);


        DataResultSet wfDocInfoRs = dataResultSetMap.get("WF_DOC_INFO");
        WfDocInfo wfDocInfo = new WfDocInfo();
        for (DataObject row : wfDocInfoRs.getRows()) {
            wfDocInfo.setDClbraName(row.get("dClbraName"));
            wfDocInfo.setdDocName(row.get("dDocName"));
            wfDocInfo.setDWfComputed(row.get("dWfComputed"));
            wfDocInfo.setDWfCurrentStepID(row.getInteger("dWfCurrentStepID"));
            wfDocInfo.setdWfdIrectory(row.get("dWfdIrectory"));
            wfDocInfo.setDWfDocState(row.get("dWfDocState"));
            wfDocInfo.setDWfID(row.getInteger("dWfID"));
        }

        DataResultSet workflowStepRs = dataResultSetMap.get("WorkflowStep");
        WorkflowStep workflowStep = new WorkflowStep();
        for (DataObject row : workflowStepRs.getRows()) {
            workflowStep.setDWfID(row.getInteger("dWfID"));
            workflowStep.setDWfStepID(row.getInteger("dWfStepID"));
            workflowStep.setDWfStepName(row.get("dWfStepName"));
            workflowStep.setDWfStepDescription(row.get("dWfStepDescription"));
            workflowStep.setDWfStepType(row.get("dWfStepType"));
            workflowStep.setDWfStepWeight(row.get("dWfStepWeight"));
            workflowStep.setDWfStepIsSignature(row.getBoolean("dWfStepIsSignature",
                                                              false));
            workflowStep.setDWfStepIsAll(row.getBoolean("dWfStepIsAll",
                                                        false));

            workflowStep.setDHasTokens(row.getBoolean("dHasTokens", false));
            Set<String> dUsers = new HashSet<String>();
            String usersStr = row.get("dUsers");
            //            //System.out.println("***** usersStr:" + usersStr);
            if (StringUtils.isNotBlank(usersStr)) {
                StringTokenizer token = new StringTokenizer(usersStr, "\t");
                while (token.hasMoreTokens()) {
                    dUsers.add(token.nextToken());
                }
                workflowStep.setDUsers(dUsers);
            }
            //            //System.out.println("***** dUsers: " + dUsers);

        }

        results.put("WorkflowSteps", workflowSteps);
        results.put("WorkflowInfo", workflowInfo);
        results.put("WF_DOC_INFO", wfDocInfo);
        results.put("WorkflowStep", workflowStep);

        //        if(CollectionUtils.isNotEmpty(workflowSteps)){
        //            Iterator<WorkflowStep> iter = workflowSteps.iterator();
        //            WorkflowStep lastStep = null;
        //            while(iter.hasNext()){
        //                lastStep = iter.next();
        //            }
        //            if(lastStep!=null  && workflowStep != null){
        //                if(lastStep.getDWfStepID() == workflowStep.getDWfStepID() ){
        //                    //System.out.println("***** xua ban   - last step ");
        //                }
        //                //System.out.println("***** lastStep.getDWfStepID(): " + lastStep.getDWfStepID());
        //                //System.out.println("***** workflowStep.getDWfStepID(): " + workflowStep.getDWfStepID());
        //
        //            }
        //        }
        return results;
    }


    public static List<ContentItem> convertToContentPending(final List<DataObject> pendingDataObjects) throws Exception {
        List<ContentItem> contentItems = new ArrayList<ContentItem>();
        User user;
        ContentItem content;
        String dID;
        String dDocName;
        DCIteratorBinding systemLogIterator =
            null; //ADFUtils.findIterator("SystemLogsView1Iterator");
        user = queryCurrUserAttributes();
        Map<String, Boolean> actions = new HashMap<String, Boolean>();
        for (DataObject row : pendingDataObjects) {
            dID = row.get("dID");
            dDocName = row.get("dDocName");
            try {
                //                List<DataObject> docInfoDataObj =
                //                    ServiceFacade.getContentItemData(dID, dDocName);
                //                String message = "";
                //                for (DataObject contentRow : docInfoDataObj) {
                //                    content = extractDataObjetcToContentItem(contentRow, user);
                //                    if (content != null) {
                //                        message =
                //                                getMessageBydDocName(content.getdDocName(), systemLogIterator);
                //                        content.setWfMessage(message);
                //                        contentItems.add(content);
                //
                //                    }
                //                }
                content = ServiceFacade.getContentItemByDDocName(dDocName);
                String message = "";
                if (content != null) {
                    message =
                            getMessageBydDocName(content.getdDocName(), systemLogIterator);
                    content.setWfMessage(message);
                    contentItems.add(content);

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return contentItems;
    }


    public static String getMessageBydDocName(String dDocName,
                                              DCIteratorBinding systemLogIterator) throws PropertyNotFoundException,
                                                                                          ParameterTypeMismatchException {
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        //            ViewObject vo_ = ADFUtils.findViewObjectByIteratorName("SystemLogsView1");
        //        ApplicationModule am = ADFUtils.findApplicationModule();
        //        ViewObject vo_ = null;
        //        Row row = null;
        TvsSysLogs tvsSysLog = null;
        TvsSysLogs _tvsSysLog = null;
        SessionEJB _sessionEJB = EjbServiceFactory.getSessionEJBRemote();
        List<TvsSysLogs> sysLogList = new ArrayList<TvsSysLogs>();
        String message = "";
        String user = "";
        Date date = null;
        //        Row row_ = null;
        //        try {
        //            vo_ = am.findViewObject("TvsSysLogsView1");
        //
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //        }
        //        ViewObject vo =
        //            ADFUtils.getDataFromIteratorBinding(vo_, "MaBanGhi", dDocName,
        //                                                JboCompOper.OPER_EQ);
        sysLogList = _sessionEJB.findSysLogRowByMaBanGhi(dDocName);
        for (int i = 0; i < sysLogList.size(); i++) {
            tvsSysLog = sysLogList.get(i);
            String thaotac = String.valueOf(tvsSysLog.getThaoTac());

            if (thaotac.equals(LogsBean.ThaoTac.KhongDuyet.toString())) {
                _tvsSysLog = tvsSysLog;
                break;
            }
        }

        String thaotac = "";
        if (_tvsSysLog != null) {
            thaotac = (String)_tvsSysLog.getThaoTac();
        }

        if (thaotac.equals(LogsBean.ThaoTac.KhongDuyet.toString())) {
            message = _tvsSysLog.getGhiChu();
            user = tvsSysLog.getNguoiDung();
            Object ob = tvsSysLog.getNgayThucHien();
            if (ob instanceof oracle.jbo.domain.Timestamp) {
                oracle.jbo.domain.Timestamp temp =
                    (oracle.jbo.domain.Timestamp)ob;
                date = new Date(temp.getTime());
            } else
                date = (Date)tvsSysLog.getNgayThucHien();
            if (StringUtils.isNotBlank(message)) {
                message =
                        user + ": " + message + " (" + format.format(date) + ")";
            }
        }
        //        Configuration.releaseRootApplicationModule(am, true);
        return message;
    }


    /**
     * @creator: thuongkc
     * @comment: lấy full thông tin cho tin bài
     * @param lstData
     * @return
     */
    public static List<ContentItem> getDocInfoByDocId(List<DataObject> lstData) {
        //dIsCheckedOut
        List<DataObject> lst = new ArrayList<DataObject>();
        List<ContentItem> contentItems = new ArrayList<ContentItem>();
        DataObject dObj_ = null;
        String xmUrlDownload = "";
        if (lstData != null) {
            for (DataObject dtObj : lstData) {
                dObj_ = new DataObjectImpl();
                String dID = dtObj.get("dID");
                String dDocName = dtObj.get("dDocName");
                String orignName = dtObj.get("dOriginalName");
                xmUrlDownload =
                        ServiceFacade.buildLinkDownload(dID, dDocName, orignName);
                try {

                    List<DataObject> lstDto =
                        ServiceFacade.getContentItemData(dID, dDocName);
                    String dWfStepNameWorkFlowInfo =
                        ServiceFacade.getWorkFlowInfo(dDocName).getResultSets().get("WorkflowSteps").getRows().get(1).get("dWfStepName");
                    DataObject dObj = lstDto.get(0);
                    Iterator iterator = dObj.entrySet().iterator();
                    String wfQueueActionState =
                        dtObj.get("wfQueueActionState");
                    String wfMessage = dtObj.get("wfMessage");
                    String dCheckoutUser = dtObj.get("dCheckoutUser");
                    String dFormat = "";
                    String dWfStepName = dtObj.get("dWfStepName");
                    while (iterator.hasNext()) {
                        Map.Entry entry = (Map.Entry)iterator.next();
                        String key = (String)entry.getKey();
                        String value = (String)entry.getValue();
                        dObj_.put(key, value);
                    }
                    dObj_.put("isCancelApprove",
                              dWfStepNameWorkFlowInfo.equals(dWfStepName) ?
                              "false" : "true");
                    dObj_.put("wfQueueActionState", wfQueueActionState);
                    dObj_.put("dWfStepName", dWfStepName);
                    dObj_.put("isSelect", "false");
                    dObj_.put("dCheckoutUser", dCheckoutUser);
                    dObj_.put("xmUrlDownload", xmUrlDownload);
                    if (wfMessage == null || wfMessage.equals("null") ||
                        wfMessage.equals("")) {
                        dObj_.put("wfMessage", "");
                    } else {
                        dObj_.put("wfMessage", wfMessage);
                    }
                    lst.add(dObj_);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } else {
            lst = null;
        }

        User user;
        try {
            user = queryCurrUserAttributes();
            ContentItem contentItem = null;
            Map<String, Boolean> actions = new HashMap<String, Boolean>();
            for (DataObject row : lst) {
                contentItem = convertDataObjectToContentItem(row);
                if (contentItem != null) {
                    actions =
                            ActionChecker.getActionsOnContentItem(contentItem,
                                                                  user);
                    contentItem.setActions(actions);
                    contentItems.add(contentItem);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return contentItems;


    }


    /**
     * @creator : thuongkc
     * @comment : mở khóa tin bài, tham số truyền vào là dID
     * @param dID
     * @throws Exception
     */
    public static void undoCheckOut(String dID) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        ContentItem contentItem = new ContentItem();
        contentItem.setdID(dID);
        operation.setContentItem(contentItem);
        operation.executeUndoCheckOut();
    }

    /**
     * @author PhuongNH
     * @comment: phục hồi bản ghi đã bị xóa trong thư mục trash
     * @param dCollectionID
     * @param contentName
     * @throws Exception
     */
    public static boolean restoreContentItem(String dCollectionID,
                                             String contentName) throws Exception {
        CollectionRestoreItemOperation operation =
            (CollectionRestoreItemOperation)FactoryOperations.INSTANCE.getOperation(CollectionRestoreItemOperation.class);
        //BEGIN ---lay quyen admin de restore content de co the resoter cac content van nam trong workflow
        OperationUtil.setAdminContext(operation);
        //END------lay quyen admin de restore content de co the resoter cac content van nam trong workflow
        operation.setHasCollectionID(true);
        operation.setContentName(contentName);
        operation.setDCollectionID(dCollectionID);

        return operation.execute();
    }


    /**
     * @author Tuyennt
     * @comment: phục hồi bản ghi đã bị xóa trong thư mục trash
     * @param dCollectionID
     * @param contentName
     * @throws Exception
     */
    public static boolean restoreContentItem(String dCollectionID,
                                             String contentName,
                                             boolean adminContext) throws Exception {
        CollectionRestoreItemOperation operation =
            (CollectionRestoreItemOperation)FactoryOperations.INSTANCE.getOperation(CollectionRestoreItemOperation.class);
        if (adminContext)
            OperationUtil.setAdminContext(operation);
        operation.setHasCollectionID(true);
        operation.setContentName(contentName);
        operation.setDCollectionID(dCollectionID);

        return operation.execute();
    }

    public static InputStream DownloadFile(String dDocName,
                                           String dID) throws Exception {
        ContentWaitForBrowserOperation operation =
            (ContentWaitForBrowserOperation)FactoryOperations.INSTANCE.getOperation(ContentWaitForBrowserOperation.class);
        ContentItem contentItem = new ContentItem();
        contentItem.setdDocName(dDocName);
        contentItem.setdID(dID);
        operation.setContentItem(contentItem);
        InputStream inputStream = operation.executeDownloadImage();
        return inputStream;
    }

    /**
     *
     * @param dDocName
     * @param dID
     * @param revisionSelectionMethod
     * @param Rendition
     * @return Map : idc-file, file , Content-type, Content-Length. if idc-file != null
     * @throws Exception
     */
    public static Map<String, Object> getFileWithAdminContext(String dDocName,
                                                              String dID,
                                                              String revisionSelectionMethod,
                                                              String Rendition) throws Exception {
        GetFileOperation operation =
            (GetFileOperation)FactoryOperations.INSTANCE.getOperation(GetFileOperation.class);
        OperationUtil.setAdminContext(operation);
        operation.setdDocName(dDocName);
        operation.setdID(dID);
        operation.setRendition(Rendition);
        operation.setRevisionSelectionMethod(revisionSelectionMethod);

        boolean result = operation.execute();
        if (result) {
            return operation.getFile();
        }
        return new HashMap<String, Object>();
    }

    public static boolean testCheckOutByuser(String dDocName) throws Exception {
        GetDocInfoByName operation =
            (GetDocInfoByName)FactoryOperations.INSTANCE.getOperation(GetDocInfoByName.class);
        boolean result = operation.testCheckOutByuser(dDocName);
        return result;
    }

    public static boolean deleteRivision(String dID, String dDocName,
                                         boolean adminContext) throws Exception {
        DeleteRivisionOperation operation =
            (DeleteRivisionOperation)FactoryOperations.INSTANCE.getOperation(DeleteRivisionOperation.class);
        if (adminContext) {
            OperationUtil.setAdminContext(operation);
        }
        ContentItem contentItem = new ContentItem();
        contentItem.setdDocName(dDocName);
        contentItem.setdID(dID);
        operation.setContentItem(contentItem);
        boolean result = operation.execute();

        // remove all dependencies : xmAnhdaidien & xmTeptindinhkem

        //            try{
        //
        //                if(result){
        //                    for(ContentItem content : contents){
        //                        if(StringUtils.isNotBlank(content.getxmAnhdaidien())){
        //                            contentDepence = new ContentItem();
        //                            contentDepence.setdDocName(content.getxmAnhdaidien());
        //                            contentDepencies.add(contentDepence);
        //                        }
        //                        String xmTeptindinhkem = content.getxmTeptindinhkem();
        //                        if(StringUtils.isNotBlank(xmTeptindinhkem)){
        //                            StringTokenizer token = new StringTokenizer(xmTeptindinhkem,",");
        //                            while(token.hasMoreTokens()){
        //                                String dDocName = token.nextToken();
        //                                if(StringUtils.isNotBlank(dDocName)){
        //                                    contentDepence = new ContentItem();
        //                                    contentDepence.setdDocName(dDocName);
        //                                    contentDepencies.add(contentDepence);
        //                                }
        //                            }
        //                        }
        //                    }
        //
        //                }
        //
        //
        //                if(CollectionUtils.isNotEmpty(contentDepencies)){
        //                    ServiceFacade.deleteContents(contentDepencies, true);
        //                }
        //            }catch(Exception de){
        //                de.printStackTrace();
        //            }
        return result;
    }


    public static boolean isContentItemAvalible(String dDocName) {
        boolean flag = true;
        try {
            ServiceFacade.getContentItemByDDocName(dDocName);
        } catch (Exception e) {
            flag = false;
        }
        return flag;
    }


    //    public static String splitString(String s ){
    //        String utf8 = "\uD800";
    //        String result;
    //
    //            result = new String(s.getBytes("UTF-8"));
    //
    //        int count = 0;
    //        for (int i = 0; i < s.length(); i++) {
    //            char chari = s.charAt(i);
    //            if(chari == ' '){
    //                count ++;
    //            }
    //            result = result + String.valueOf(chari);
    //            if(count == 12){
    //                result = result + "\n";
    //                count = 0;
    //            }
    //
    //        }
    //        //System.out.println(result);
    //        return result;
    //    }

    /**
     *  Delete list of Collection or collection's Shortcut
     *  ex Map Struct:
     *  is  folder
     *      collectionselect:true
     *      fromhasCollectionID:1
     *      fromdCollectionID:106680019494001005
     *      fromCollectionisLink:0
     *  is folder shortcut
     *      collectionselect:true
     *      fromhasCollectionID:1
     *      fromdCollectionID:106680019494000203
     *      fromCollectionisLink:1
     *      fromCollectiondLinkID:4
     */
    public static boolean deleteCollections(List<CollectionItem> collections) throws Exception {
        if (CollectionUtils.isEmpty(collections)) {
            return false;
        }
        CollectionDeleteLotOperation operation =
            (CollectionDeleteLotOperation)FactoryOperations.INSTANCE.getOperation(CollectionDeleteLotOperation.class);
        List<Map<String, String>> items = new ArrayList<Map<String, String>>();
        Map<String, String> item;
        for (CollectionItem collection : collections) {
            item = new HashMap<String, String>();
            if (collection.getIsLink()) { // is collection's shortcut
                item.put("fromCollectionisLink", "1");
                item.put("fromCollectiondLinkID", collection.getdLinkID());
            } else {
                item.put("fromCollectionisLink", "0");
            }
            item.put("collectionselect", "true");
            item.put("fromhasCollectionID", "1");
            item.put("fromdCollectionID", collection.getdCollectionID());

            items.add(item);
        }

        operation.setItems(items);
        boolean result = operation.execute();
        return result;
    }

    public static boolean moveCollections(CollectionItem target,
                                          List<CollectionItem> collections) throws Exception {
        if (CollectionUtils.isEmpty(collections)) {
            return false;
        }
        CollectionMoveLotOperation operation =
            (CollectionMoveLotOperation)FactoryOperations.INSTANCE.getOperation(CollectionMoveLotOperation.class);
        List<Map<String, String>> items = new ArrayList<Map<String, String>>();
        Map<String, String> item;
        for (CollectionItem collection : collections) {
            item = new HashMap<String, String>();
            if (collection.getIsLink()) { // is collection's shortcut
                item.put("fromCollectionisLink", "1");
                item.put("fromCollectiondLinkID", collection.getdLinkID());
            } else {
                item.put("fromCollectionisLink", "0");
            }
            item.put("collectionselect", "true");
            item.put("fromhasCollectionID", "1");
            item.put("fromdCollectionID", collection.getdCollectionID());

            items.add(item);
        }

        operation.setItems(items);
        boolean result = operation.execute();
        return result;
    }


    public static boolean deleteContents(List<ContentItem> contents) throws Exception {
        return deleteContents(contents, false);
    }

    /**
     *  Delete list of content items or content's Shortcut
     *  ex Map Struct:
     *  is content
     *      contentselect:true
     *      fromdDocName:WCCDEV16200001411
     *      fromContentisLink:0
     *  is  content shortcut
     *      contentselect:true
     *      fromdDocName:WCCDEV16200001409
     *      fromContentisLink:1
     *      fromContentdLinkID:3
     */
    public static boolean deleteContents(List<ContentItem> contents,
                                         boolean adMinContext) throws Exception {
        if (CollectionUtils.isEmpty(contents)) {
            return false;
        }
        CollectionDeleteLotOperation operation =
            (CollectionDeleteLotOperation)FactoryOperations.INSTANCE.getOperation(CollectionDeleteLotOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        List<Map<String, String>> items = new ArrayList<Map<String, String>>();
        Map<String, String> item;
        for (ContentItem content : contents) {
            item = new HashMap<String, String>();
            if (BooleanUtils.isTrue(content.getIsLink())) { // is content's shortcut
                item.put("fromContentisLink", "1");
                item.put("fromContentdLinkID", content.getdLinkID());
            } else {
                item.put("fromContentisLink", "0");
            }
            item.put("contentselect", "true");
            item.put("fromdDocName", content.getdDocName());
            items.add(item);
        }

        operation.setItems(items);
        boolean result = operation.execute();
        // delete xmAnhdaidien & all xmTeptindinhkem
        List<ContentItem> contentDepencies = new ArrayList<ContentItem>();
        ContentItem contentDepence;
        if (result) {
//            for (ContentItem content : contents) {
//                //Neu noi dung la dang Album anh thi se danh dau xoa cac anh thuoc album
//                if (content.getdDocType().equals(DocType.ALBUM_ANH)) {
//                    try {
//                        GetFolioInforOperation folioOperation;
//                        try {
//                            folioOperation = ServiceFacade.getFolioInfo(content.getdID());
//                            if (folioOperation != null) {                                
//                                DataResultSet contentresultset = folioOperation.getDataSlot();
//                                if (contentresultset != null) {
//                                    List<DataObject> lstDataObject = contentresultset.getRows();
//                                    for (DataObject obj : lstDataObject) {
//                                        try {
//                                            FolioItem fitem =
//                                                ServiceFacade.convertDataObjectToFolioItem(obj);                                              
//                                            String p_dDocname = fitem.getXcsd_dDocName();
//                                            ContentItem citem =
//                                                ServiceFacade.getContentItemByDDocName(p_dDocname);             
//                                            Map<String, Object> params =  new HashMap<String, Object>();
//                                            params.put(DocumentAttributeDef.D_DOC_NAME.getName(),
//                                                       citem.getdDocName());
//                                            params.put(DocumentAttributeDef.D_ID.getName(),
//                                                       citem.getdID());
//                                            params.put(DocumentAttributeDef.XM_XOA.getName(), 1);
//                                            ServiceFacade.updateContent(params, true);
//                                        } catch (Exception e) {
//                                            e.printStackTrace();
//                                        }
//                                    }
//                                }
//                            }
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//                       
//                    } catch (Exception de) {
//                        de.printStackTrace();
//                    }
//                }
//            }
        }
        return result;
    }

    /**
     *  adMinContext = true, thực hiện operation với user context là user adMin trong app config.
     * @param target
     * @param contents
     * @param adMinContext
     * @return
     * @throws Exception
     */
    public static boolean moveContents(CollectionItem target,
                                       List<ContentItem> contents,
                                       boolean adMinContext) throws Exception {
        String userName = StringUtils.EMPTY;
        if (adMinContext) {
            userName =
                    String.valueOf(ConfigUtil.getConfigValue(ConfigEnum.WCCAdmin.getName()));
        }
        return moveContents(target, contents, userName);
    }


    /**
     * Nếu userName is blank thì lấy  curr user
     * @param target
     * @param contents
     * @param userName
     * @return
     * @throws Exception
     */
    public static boolean moveContents(CollectionItem target,
                                       List<ContentItem> contents,
                                       String userName) throws Exception {
        if (target == null || CollectionUtils.isEmpty(contents)) {
            //            throw new Exception(JSFUtils.getResourceBundle("THU_MUC_dICH_HOAC_DANH_SACH_NOI_DUNG_KHONG_HOP_LE"));
            return false;
        }
        CollectionMoveLotOperation operation =
            (CollectionMoveLotOperation)FactoryOperations.INSTANCE.getOperation(CollectionMoveLotOperation.class);
        if (StringUtils.isNotBlank(userName)) {
            OperationUtil.setSpecialContext(operation, userName);
        }
        List<Map<String, String>> items = new ArrayList<Map<String, String>>();
        Map<String, String> item;
        for (ContentItem content : contents) {
            item = new HashMap<String, String>();
            if (BooleanUtils.isTrue(content.getIsLink())) { // is content's shortcut
                item.put("fromContentisLink", "1");
                item.put("fromContentdLinkID", content.getdLinkID());
            } else {
                item.put("fromContentisLink", "0");
            }
            item.put("contentselect", "true");
            item.put("fromdDocName", content.getdDocName());
            items.add(item);
        }

        operation.setTohasCollectionID(true);
        operation.setTodCollectionID(target.getdCollectionID());
        operation.setItems(items);
        boolean result = operation.execute();
        return result;
    }

    public static boolean copyContents(CollectionItem target,
                                       List<ContentItem> contents) throws Exception {
        return copyContents(target, contents, false);
    }

    public static boolean copyContents(CollectionItem target,
                                       List<ContentItem> contents,
                                       boolean adMinContext) throws Exception {
        if (target == null || CollectionUtils.isEmpty(contents)) {
            //            throw new Exception(JSFUtils.getResourceBundle("THU_MUC_dICH_HOAC_DANH_SACH_NOI_DUNG_KHONG_HOP_LE"));
            return false;
        }
        CollectionCopyLotOperation operation =
            (CollectionCopyLotOperation)FactoryOperations.INSTANCE.getOperation(CollectionCopyLotOperation.class);
        if (adMinContext)
            OperationUtil.setAdminContext(operation);
        List<Map<String, String>> items = new ArrayList<Map<String, String>>();
        Map<String, String> item;
        for (ContentItem content : contents) {
            item = new HashMap<String, String>();
            if (BooleanUtils.isTrue(content.getIsLink())) { // is content's shortcut
                item.put("fromContentisLink", "1");
                item.put("fromContentdLinkID", content.getdLinkID());
            } else {
                item.put("fromContentisLink", "0");
            }
            item.put("contentselect", "true");
            item.put("fromdDocName", content.getdDocName());
            items.add(item);
        }

        operation.setTohasCollectionID(true);
        operation.setTodCollectionID(target.getdCollectionID());
        operation.setItems(items);
        boolean result = operation.execute();
        return result;
    }

    /**
     * Lấy Form MetaData của form cập nhật một Content Item
     * @author loind
     * @createdDate Jul 8, 2014
     * @param
     * @return
     * @exceptions
     */
    public static List<RuleItem> getContentUpdateForm(String dID,
                                                      String dDocName) throws Exception {
        GetUpdateFormOperation operation =
            (GetUpdateFormOperation)FactoryOperations.INSTANCE.getOperation(GetUpdateFormOperation.class);
        operation.setdID(dID);
        operation.setdDocName(dDocName);

        boolean result = operation.execute();
        if (!result) {
            return new ArrayList<RuleItem>();
        }

        Map<String, Object> requiredField = new HashMap<String, Object>();
        requiredField.put(DocumentAttributeDef.D_ID.getName(),
                          DocumentAttributeDef.D_ID.getName());
        requiredField.put(DocumentAttributeDef.D_DOC_NAME.getName(),
                          DocumentAttributeDef.D_DOC_NAME.getName());
        requiredField.put(DocumentAttributeDef.D_SECURITY_GROUP.getName(),
                          DocumentAttributeDef.D_SECURITY_GROUP.getName());
        requiredField.put(DocumentAttributeDef.D_REV_LABEL.getName(),
                          DocumentAttributeDef.D_REV_LABEL.getName());

        List<RuleItem> rules = new ArrayList<RuleItem>();
        rules = operation.getRuleItems();
        for (RuleItem rule : rules) {
            Map<String, FieldItem> fieldList = rule.getGroupFieldList();
            Iterator fieldItemsIter = fieldList.values().iterator();
            FieldItem fieldItem;
            while (fieldItemsIter.hasNext()) {
                fieldItem = (FieldItem)fieldItemsIter.next();
                ServiceFacade.setupStandardFieldItem(fieldItem);
                ServiceFacade.setupCustomFieldItem(fieldItem);

                // check required field
                if (requiredField.containsKey(fieldItem.getDFieldName())) {
                    requiredField.remove(fieldItem.getDFieldName());
                }
            }
        }

        // set field required if not exist
        Iterator iter = requiredField.keySet().iterator();
        List<FieldItem> requiredListField = new ArrayList<FieldItem>();
        FieldItem fieldItem;
        while (iter.hasNext()) {
            String key = (String)iter.next();
            fieldItem = new FieldItem();
            fieldItem.setDFieldName(key);

            if (operation.getDocInfoResultSet().hasField(key)) {
                for (DataObject row :
                     operation.getDocInfoResultSet().getRows()) {
                    if (row.containsKey(key)) {
                        fieldItem.setDpFieldValue(row.get(key));
                        break;
                    }
                }
            } else {
                if (key.equalsIgnoreCase(DocumentAttributeDef.D_ID.getName())) {
                    fieldItem.setDpFieldValue(dID);
                } else if (key.equalsIgnoreCase(DocumentAttributeDef.D_DOC_NAME.getName())) {
                    fieldItem.setDpFieldValue(dDocName);
                } else {
                    fieldItem.setDpFieldValue(StringUtils.EMPTY);
                }
            }
            fieldItem.setIshidden(true);
            fieldItem.setIsEnabled(true);
            fieldItem.setIsRelocated(false);
            requiredListField.add(fieldItem);

        }

        // add required list field to rules
        for (FieldItem rqField : requiredListField) {
            rules.get(0).getGroupFieldList().put(rqField.getDFieldName(),
                                                 rqField);
        }

        return rules;
    }

    /**
     * Cập nhật Metadata cho Content Item
     * @author loind
     * @createdDate Jul 8, 2014
     * @param
     *  adMinContext boolean
     *  params Map<String,Object>
     * @return
     * @exceptions
     */
    public static boolean updateContent(Map<String, Object> params) throws Exception {
        return updateContent(params, false);
    }


    public static boolean updateContent(Map<String, Object> params,boolean adMinContext) throws Exception {
        UpdateDocInfoOperation operation =(UpdateDocInfoOperation)FactoryOperations.INSTANCE.getOperation(UpdateDocInfoOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setParams(params);
        boolean result = operation.execute();
        return result;
    }

    /**
     * @creator TuyenNT
     * @comment Thu tuc kiểm tra xem nội dung có đang bị checkout boi user hay ko
     * @param dID
     * @param dDocName
     * @return "Tên người dùng" check-out nội dung; "" nếu nội dung không bị check-out
     * @throws Exception
     */
    public static String checkOutedByUser(String dID, String dDocName) throws Exception {
        String checkoutby = "";
        List<DataObject> lstdobj = getContentItemData(dID, dDocName);
        DataObject dtobjj = lstdobj.get(0);
        if (!dtobjj.get("dCheckoutUser").equals("")) {
            checkoutby = dtobjj.get("dCheckoutUser").toString();
        }
        return checkoutby;
    }

    public static boolean checkOutByName(String dDocName, String userName) throws Exception {
        CheckOutByNameOperation operation =
            (CheckOutByNameOperation)FactoryOperations.INSTANCE.getOperation(CheckOutByNameOperation.class);
        if (StringUtils.isNotBlank(userName)) {
            OperationUtil.setSpecialContext(operation, userName);
        }
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        return result;
    }

    public static boolean checkOutByName(String dDocName) throws Exception {
        return checkOutByName(dDocName, false);
    }

    public static boolean checkOutByName(String dDocName, boolean adMinContext) throws Exception {
        CheckOutByNameOperation operation =
            (CheckOutByNameOperation)FactoryOperations.INSTANCE.getOperation(CheckOutByNameOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        return result;


    }

    public static boolean checkOutByDId(String dID) throws Exception {
        CheckOutOperation operation =
            (CheckOutOperation)FactoryOperations.INSTANCE.getOperation(CheckOutOperation.class);
        operation.setdID(dID);
        boolean result = operation.execute();
        return result;
    }

    public static boolean undoCheckOutByName(String dDocName,
                                             String userName) throws Exception {
        UndoCheckOutByNameOperation operation =
            (UndoCheckOutByNameOperation)FactoryOperations.INSTANCE.getOperation(UndoCheckOutByNameOperation.class);
        if (StringUtils.isNotBlank(userName)) {
            OperationUtil.setSpecialContext(operation, userName);
        }
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        return result;
    }

    public static boolean undoCheckOutByName(String dDocName) throws Exception {
        return undoCheckOutByName(dDocName, false);
    }

    public static boolean undoCheckOutByName(String dDocName,
                                             boolean adMinContext) throws Exception {
        UndoCheckOutByNameOperation operation =
            (UndoCheckOutByNameOperation)FactoryOperations.INSTANCE.getOperation(UndoCheckOutByNameOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        //        if(!result){
        //            throw new Exception(JSFUtils.getResourceBundle("THUC_HIEN_MO_KHOA_NOI_DUNG_KHONG_THANH_CONG"));
        //        }
        return result;
    }

    /**
     *
     * @param hasCollectionID boolean
     * @param dCollectionID String
     * @param customParams Map<String, Object>
     * @return boolean
     * @throws Exception
     */
    public static boolean collectionUpdate(boolean hasCollectionID,
                                           String dCollectionID,
                                           Map<String, Object> customParams) throws Exception {
        CollectionUpdateOperation operation =
            (CollectionUpdateOperation)FactoryOperations.INSTANCE.getOperation(CollectionUpdateOperation.class);
        operation.setHasCollectionID(hasCollectionID);
        operation.setdCollectionID(dCollectionID);
        operation.setCustomParams(customParams);
        boolean result = operation.execute();
        return result;
    }

    /**
     * Tạo thưc mục con
     * @param hasParentCollectionID
     * @param dParentCollectionID
     * @param dCollectionName
     * @param customParams
     * @return
     * @throws Exception
     */

    public static String collectionAdd(boolean hasParentCollectionID,
                                       String dParentCollectionID,
                                       String dCollectionName,
                                       Map<String, Object> customParams) throws Exception {
        return collectionadd(hasParentCollectionID, dParentCollectionID,
                             dCollectionName, customParams, false);
    }

    public static String collectionadd(boolean hasParentCollectionID,
                                       String dParentCollectionID,
                                       String dCollectionName,
                                       Map<String, Object> customParams,
                                       boolean adMinContext) throws Exception {

        CollectionAddOperation operation =
            (CollectionAddOperation)FactoryOperations.INSTANCE.getOperation(CollectionAddOperation.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setdCollectionName(dCollectionName);

        operation.setHasParentCollectionID(hasParentCollectionID);
        operation.setdParentCollectionID(dParentCollectionID);
        operation.setCustomParams(customParams);

        boolean result = operation.execute();
        if (!result) {
            return StringUtils.EMPTY;
        }
        DataObject localData = operation.getLocalData();

        return localData.get(CollectionAttributeDef.D_COLLECTION_ID.getName());
    }

    /**
     * Tạo các thư mục con,thứ tự các subCollection tương ứng là thức tự các collectionName trong List
     * @param hasParentCollectionID
     * @param dParentCollectionID
     * @param dCollectionNames
     * @param customParams
     * @return
     * @throws Exception
     */
    public static String collectionadd(boolean hasParentCollectionID,
                                       String dParentCollectionID,
                                       List<String> dCollectionNames,
                                       Map<String, Object> customParams,
                                       boolean adMinContext) throws Exception {
        CollectionItem collectionParent = null;

        try {
            collectionParent =
                    ServiceFacade.getCollectionInfo(hasParentCollectionID,
                                                    dParentCollectionID,
                                                    adMinContext);
            String parentPath = collectionParent.getdCollectionPath();
            String collectionID;
            for (String collectionName : dCollectionNames) {
                parentPath = parentPath + collectionName + "/";
                try {
                    collectionParent =
                            ServiceFacade.getCollectionInfo(false, parentPath,
                                                            adMinContext);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    collectionID =
                            ServiceFacade.collectionadd(true, collectionParent.getdCollectionID(),
                                                        collectionName,
                                                        customParams,
                                                        adMinContext);
                    collectionParent =
                            ServiceFacade.getCollectionInfo(true, collectionID,
                                                            adMinContext);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new Exception(e.getMessage());
        }
        if (collectionParent != null) {
            return collectionParent.getdCollectionID();
        }
        return StringUtils.EMPTY;
    }

    /**
     * Checkin một image làm ảnh đại dIện vào một thư mục định trước,các thư mục con tự sinh theo ngày tháng, tên file tự sinh.
     * @param dDocType
     * @param primaryFile
     * @return
     * @throws Exception
     */
    public static String addxmAnhdaidien(TransferFile transferFile,
                                         Map<String, Object> customParams) throws Exception {
        if (customParams == null)
            customParams = new HashMap<String, Object>();
        Map<String, Object> attachFileCustomParams =
            new HashMap<String, Object>();
        if (customParams.containsKey(DocumentAttributeDef.XM_NGAY_TAO.getName())) {
            attachFileCustomParams.put(DocumentAttributeDef.XM_NGAY_TAO.getName(),
                                       customParams.get(DocumentAttributeDef.XM_NGAY_TAO.getName()));
        }
        //        if (customParams.containsKey(DocumentAttributeDef.D_DOC_CREATOR.getName())) {
        //            attachFileCustomParams.put(DocumentAttributeDef.D_DOC_CREATOR.getName(),
        //                                       customParams.get(DocumentAttributeDef.D_DOC_CREATOR.getName()));
        //        }


        CollectionItem collection = null;

        List<String> dCollectionNames = new ArrayList<String>();
        Calendar calendar = Calendar.getInstance();
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.YEAR)));
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.MONTH) + 1));
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)));

        //        Map<String, Object> customParams = new HashMap<String,Object>();
        attachFileCustomParams.put(DocumentAttributeDef.D_DOC_TYPE.getName(),
                                   ConfigUtil.getValue(ConfigEnum.NewsImageContenType)); //"Image"
        attachFileCustomParams.put(DocumentAttributeDef.D_SECURITY_GROUP.getName(),
                                   ConfigUtil.getValue(ConfigEnum.NewsImageSecurityGroups)); //"Public"

        String dDocNameImageRepo =
            ConfigUtil.getValue(ConfigEnum.NewsImageFolderID);
        String collectionID =
            ServiceFacade.collectionadd(true, dDocNameImageRepo,
                                        dCollectionNames,
                                        attachFileCustomParams,
                                        true); // 106680019494001801 - kho anh/anh tin bai


        CheckInUniversalOperation operation =
            (CheckInUniversalOperation)FactoryOperations.INSTANCE.getOperation(CheckInUniversalOperation.class);
        OperationUtil.setAdminContext(operation);

        operation.setHasCollectionID(true);
        operation.setdCollectionID(collectionID);
        //        operation.setdDocType(dDocType);

        //        operation.setdDocName(String.valueOf(Calendar.getInstance().getTimeInMillis()));
        operation.setdDocTitle(transferFile.getFileName());
        operation.setPrimaryFile(transferFile);
        //        operation.setdSecurityGroup("Public");
        operation.setParams(attachFileCustomParams);
        String fileNameUnion =
            DigestUtils.md5Hex(SystemUtils.getCurrentUserName() +
                               Calendar.getInstance().getTimeInMillis());
        transferFile.setFileName(fileNameUnion + "." +
                                 FilenameUtils.getExtension(transferFile.getFileName()));

        boolean result = operation.execute();
        if (result) {
            //            return operation.getLocalData().get("dID");
            return operation.getLocalData().get(DocumentAttributeDef.D_DOC_NAME.getName());
        }
        return StringUtils.EMPTY;
    }

    /**
     * Thực hiện checkin một tệp tinh đính kèm vào thư mục định trước. Tên tệp tin sẽ được sinh tự động, các subfolder tự sinh theo ngày thàng năm.
     * @param transferFile
     * @return
     * @throws Exception
     */
    public static String addxmTeptindinhkem(TransferFile transferFile,
                                            Map<String, Object> customParams) throws Exception {

        Map<String, Object> attachFileCustomParams =
            new HashMap<String, Object>();
        if (customParams == null)
            customParams = new HashMap<String, Object>();
        if (customParams.containsKey(DocumentAttributeDef.XM_NGAY_TAO.getName())) {
            attachFileCustomParams.put(DocumentAttributeDef.XM_NGAY_TAO.getName(),
                                       customParams.get(DocumentAttributeDef.XM_NGAY_TAO.getName()));
        }
        if (customParams.containsKey(DocumentAttributeDef.D_DOC_CREATOR.getName())) {
            attachFileCustomParams.put(DocumentAttributeDef.D_DOC_CREATOR.getName(),
                                       customParams.get(DocumentAttributeDef.D_DOC_CREATOR.getName()));
        }

        CollectionItem collection = null;
        List<String> dCollectionNames = new ArrayList<String>();
        Calendar calendar = Calendar.getInstance();
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.YEAR)));
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.MONTH) + 1));
        dCollectionNames.add(String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)));


        attachFileCustomParams.put(DocumentAttributeDef.D_DOC_TYPE.getName(),
                                   ConfigUtil.getValue(ConfigEnum.AttachFileContentType)); //Teptailieu
        attachFileCustomParams.put(DocumentAttributeDef.D_SECURITY_GROUP.getName(),
                                   ConfigUtil.getValue(ConfigEnum.AttachFileSecurityGroups));
        String dDocNameAttachFileRepo =
            ConfigUtil.getValue(ConfigEnum.AttachFileFolderID);
        String collectionID =
            ServiceFacade.collectionadd(true, dDocNameAttachFileRepo,
                                        dCollectionNames,
                                        attachFileCustomParams,
                                        true); // 106680019494002620 - kho tep dInh kem

        CheckInUniversalOperation operation =
            (CheckInUniversalOperation)FactoryOperations.INSTANCE.getOperation(CheckInUniversalOperation.class);
        OperationUtil.setAdminContext(operation);

        attachFileCustomParams.put("hasCollectionID", "true");
        attachFileCustomParams.put(CollectionAttributeDef.D_COLLECTION_ID.getName(),
                                   collectionID);
        attachFileCustomParams.put(DocumentAttributeDef.D_DOC_TITLE.getName(),
                                   transferFile.getFileName());
        //        customParams.put("dOriginalName", transferFile.getFileName());
        attachFileCustomParams.put(DocumentAttributeDef.PRIMARY_FILE.getName(),
                                   transferFile);
        operation.setParams(attachFileCustomParams);

        String fileNameUnion =
            DigestUtils.md5Hex(SystemUtils.getCurrentUserName() +
                               Calendar.getInstance().getTimeInMillis());

        transferFile.setFileName(fileNameUnion + "." +
                                 FilenameUtils.getExtension(transferFile.getFileName()));

        boolean result = operation.execute();
        if (result) {
            //            return operation.getLocalData().get("dID");
            return operation.getLocalData().get(DocumentAttributeDef.D_DOC_NAME.getName());
        }
        return StringUtils.EMPTY;
    }

    /**
     * Checkin content Item với một Map Params
     * @param params
     * @return
     * @throws Exception
     */
    public static boolean checkInUniversal(Map<String, Object> params) throws Exception {
        CheckInUniversalOperation operation =
            (CheckInUniversalOperation)FactoryOperations.INSTANCE.getOperation(CheckInUniversalOperation.class);
        operation.setParams(params);

        boolean result = operation.execute();
        if (result) {
            //            return operation.getLocalData().get("dID");
            return result;
        }
        return false;
    }

    /**
     * Checkin một Content Item với một tên userName cụ thể để đẩy sang UCM
     * @param params
     * @return
     * @throws Exception
     */
    public static boolean checkInUniversal(Map<String, Object> params,
                                           String userContext) throws Exception {
        CheckInUniversalOperation operation =
            (CheckInUniversalOperation)FactoryOperations.INSTANCE.getOperation(CheckInUniversalOperation.class);
        if (StringUtils.isBlank(userContext)) {
            throw new NullPointerException("userName param is null or empty string.");
        }
        OperationUtil.setSpecialContext(operation, userContext);
        operation.setParams(params);

        boolean result = operation.execute();
        return result;
    }

    public static boolean checkInUniversalAdMinContext(Map<String, Object> params) throws Exception {
        String userContext =
            String.valueOf(ConfigUtil.getConfigValue(ConfigEnum.WCCAdmin.getName()));
        boolean result = checkInUniversal(params, userContext);
        return result;
    }

    public static void setTotalRow(String totalRow) {
        ServiceFacade.totalRow = totalRow;
    }

    public static String getTotalRow() {
        return totalRow;
    }

    //    private static ContentItem extractDataObjetcToContentItem(DataObject row,
    //                                                              User user) throws Exception {
    //
    //        return  extractDataObjetcToContentItem(row, user);
    //    }

    /**
     * @param str : dữ liệu cần format
     * @param partern : mẫu dùng để format
     * @creator Thuongkc
     * @comment : chức năng này dùng để format ngày tháng trong tin bài và rả về một chuỗi ngày tháng đã được format
     * @return
     */
    public static String convertDateByPattern(String str, String partern) {
        DateFormat df = new SimpleDateFormat(partern);
        Date date = null;
        String result = "";
        if (StringUtils.isNotBlank(str)) {
            try {
                //date = df.parse(str);
                String[] partten = { "dD-MM-yyyy hh:mm" };
                date = DateUtils.parseDate(str, partten);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            //            df=new SimpleDateFormat(partern);
            result = df.format(date);
        }
        return result;
    }


    private static ContentItem convertDataObjectToContentItem(DataObject row) throws Exception {
        ContentItem contentItem = new ContentItem();
        //        Map<String, Boolean> actions = null;
        StringBuilder build = new StringBuilder();
        Field[] fields = contentItem.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            try {
                for (String dataObjectKey : row.keySet()) {
                    Object type = field.getType();

                    if (field.getName().equals(dataObjectKey) &&
                        type == Date.class) {
                        field.set(contentItem, row.getDate(dataObjectKey));
                    } else if (field.getName().equals(dataObjectKey) &&
                               type == Boolean.class) {
                        field.set(contentItem,
                                  row.getBoolean(dataObjectKey, false));
                    } else if (field.getName().equals(dataObjectKey) &&
                               type == String.class) {
                        String value = String.valueOf(row.get(dataObjectKey));
                        if (field.getName().equals("xmNgaytao")) {
                            Field fieldTemp =
                                contentItem.getClass().getDeclaredField("xmNgaytaodate");
                            fieldTemp.setAccessible(true);
                            fieldTemp.set(contentItem,
                                          row.getDate(dataObjectKey));
                        }
                        field.set(contentItem, value);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        //            actions = ActionChecker.getActionsOnContentItem(contentItem, user);
        //
        //        contentItem.setActions(actions);
        //        if(MapUtils.isEmpty(actions)){
        //            return null; // don't  have view privilege
        //        }
        return contentItem;
    }

    public static FolioItem convertDataObjectToFolioItem(DataObject row) {
        FolioItem item = new FolioItem();
        Map<String, Object> propertiesMap = new HashMap<String, Object>();
        try {
            propertiesMap = PropertyUtils.describe(item);
            Set<String> propertiesSet = propertiesMap.keySet();
            Iterator<String> propertiesIter = propertiesSet.iterator();
            String property = StringUtils.EMPTY;
            while (propertiesIter.hasNext()) {
                property = propertiesIter.next();
                String temp = property;
                //                Iterator i=row.keySet().iterator();
                //                while(i.hasNext()) {
                //                    Object ob=i.next();
                //                    //System.out.println("private String "+ob.toString()+";");
                //                }
                if (temp.contains("_"))
                    temp = temp.replace("_", ":");
                if (row.containsKey(temp)) {
                    Class propertyClass =
                        PropertyUtils.getPropertyType(item, property);
                    Object properyValue = null;
                    if (propertyClass == Integer.class) {
                        properyValue = row.getInteger(temp);
                    } else if (propertyClass == Boolean.class) {
                        properyValue = row.getBoolean(temp, false);

                    } else if (propertyClass == Date.class) {
                        properyValue = row.getDate(temp);
                        ////System.out.println("************** getdate:" + PreferenceUtil.formatDateTime((Date)properyValue));
                    } else if (propertyClass == Calendar.class) {
                        properyValue = row.getCalendar(temp);
                    } else {
                        properyValue = row.get(temp);
                        if (properyValue != null)
                            properyValue =
                                    StringEscapeUtils.unescapeHtml4(String.valueOf(properyValue));
                    }
                    if (properyValue != null) {
                        PropertyUtils.setProperty(item, property,
                                                  properyValue);
                    }
                }
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
        return item;
    }


    /**
     * thực hiện Convert dữ liệu từ DataObject sang ContentItem Object. Đồng thời check permmission, dữ liệu permission được lưu trong Map<> actions
     * @param row DataObject
     * @return CollectionItem
     */
    private static ContentItem extractDataObjetcToContentItem(DataObject row,
                                                              User user) throws Exception {
        if (row == null || user == null)
            return null;
        ContentItem contentItem = extractDataObjetcToContentItem(row);

        contentItem.setdRead(PermissionChecker.hasRead(user.getAccounts(),
                                                       contentItem.getdDocAccount()));
        contentItem.setdWrite(PermissionChecker.hasWrite(user.getAccounts(),
                                                         contentItem.getdDocAccount()));

        contentItem.setdDelete(PermissionChecker.hasDelete(user.getAccounts(),
                                                           contentItem.getdDocAccount()));
        contentItem.setdAdmin(PermissionChecker.hasAdmin(user.getAccounts(),
                                                         contentItem.getdDocAccount()));

        // Loại bỏ các bản ghi có xmTrangthai = ban nháp mà không phải do user hiện thời tạo ra. Áp dụng với người dùng ko có quyền adMin
        //            if(BooleanUtils.isFalse(contentItem.getdAdmin())){
        //                if (XmTrangThaiContentConstants.BAN_NHAP.getName().equals(contentItem.getXmTrangthai()) &&
        //                    !user.getUserName().equals(contentItem.getdDocCreator())) {
        //                        return null;
        //                    }
        //            }

        // actions menu check
        Map<String, Boolean> actions =
            ActionChecker.getActionsOnContentItem(contentItem, user);
        contentItem.setActions(actions);
        if (MapUtils.isEmpty(actions)) {
            return null; // don't  have view privilege
        }

        return contentItem;
    }

    /**
     * thực hiện Convert dữ liệu từ DataObject sang ContentItem Object. Không thực hiện check permmission
     * @author loind
     * @createdDate Jun 24, 2014
     * @param
     * @return
     * @exceptions
     */
    private static ContentItem extractDataObjetcToContentItem(DataObject row) throws Exception {

        ContentItem contentItem = new ContentItem();
        // using reflection to extract data
        Map<String, Object> propertiesMap = new HashMap<String, Object>();
        try {
            propertiesMap = PropertyUtils.describe(contentItem);
            Set<String> propertiesSet = propertiesMap.keySet();
            Iterator<String> propertiesIter = propertiesSet.iterator();
            String property = StringUtils.EMPTY;
            while (propertiesIter.hasNext()) {
                property = propertiesIter.next();

                if (row.containsKey(property)) {
                    Class propertyClass =
                        PropertyUtils.getPropertyType(contentItem, property);
                    Object properyValue = null;
                    if (propertyClass == Integer.class) {

                    } else if (propertyClass == Boolean.class) {
                        properyValue = row.getBoolean(property, false);

                    } else if (propertyClass == Date.class) {
                        properyValue = row.getDate(property);
                    } else if (propertyClass == Calendar.class) {
                        properyValue = row.getCalendar(property);
                    } else {
                        properyValue = row.get(property);
                        if (properyValue != null)
                            properyValue =
                                    StringEscapeUtils.unescapeHtml4(String.valueOf(properyValue));
                    }   
                    if (properyValue != null) {
                        PropertyUtils.setProperty(contentItem, property,
                                                  properyValue);
                    }
                }
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
        return contentItem;
    }

    /**
     * Thực hiện Map dữ liệu từ DataObject thành một CollectionItem
     * @param row DataObject
     * @return CollectionItem
     */
    private static CollectionItem extractDataObjetcToCollectionItem(DataObject row) {
        CollectionItem collectionItem = new CollectionItem();
        // common info
        // using reflection to extract data
        Map<String, Object> propertiesMap = new HashMap<String, Object>();
        try {
            propertiesMap = PropertyUtils.describe(collectionItem);
            Set<String> propertiesSet = propertiesMap.keySet();
            Iterator<String> propertiesIter = propertiesSet.iterator();
            String property = StringUtils.EMPTY;
            while (propertiesIter.hasNext()) {
                property = propertiesIter.next();
                if (row.containsKey(property)) {
                    Class propertyClass =
                        PropertyUtils.getPropertyType(collectionItem,
                                                      property);
                    Object properyValue = null;
                    if (propertyClass == Integer.class) {
                        properyValue = row.getInteger(property);
                    } else if (propertyClass == Boolean.class) {
                        properyValue = row.getBoolean(property, false);

                    } else if (propertyClass == Date.class) {
                        properyValue = row.getDate(property);
                    } else if (propertyClass == Calendar.class) {
                        properyValue = row.getCalendar(property);
                    } else {
                        properyValue = row.get(property); // as string
                        if (properyValue != null) {
                            properyValue =
                                    StringEscapeUtils.unescapeHtml4(String.valueOf(properyValue));
                        }
                    }

                    if (properyValue != null) {
                        PropertyUtils.setProperty(collectionItem, property,
                                                  properyValue);
                    }
                }
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }

        return collectionItem;
    }

    /**
     * Lấy chi tiết thông tin Content Item dựa trên dDocName
     * @author loind
     * @createdDate Jul 8, 2014
     * @param
     * @return
     * @exceptions
     */
    public static ContentItem getContentItemByDDocName(final String dDocName) throws Exception {
        return getContentItemByDDocName(dDocName, false);
    }

    public static ContentItem getContentItemByDDocName(final String dDocName,
                                                       boolean adMinContext) throws Exception {

        GetDocInfoByName operation =
            (GetDocInfoByName)FactoryOperations.INSTANCE.getOperation(GetDocInfoByName.class);
        if (adMinContext) {
            OperationUtil.setAdminContext(operation);
        }
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        if (!result) {
            return null;
        }
        ContentItem contentItem = null;
        DataResultSet docInfo = operation.getDataResultSet();
        User user = null;
        if (adMinContext) {
            user =
ServiceFacade.queryUserAttributes(ConfigUtil.getValue(ConfigEnum.WCCAdmin));
        } else {
            user = ServiceFacade.queryCurrUserAttributes();
        }

        for (DataObject row : docInfo.getRows()) {
            contentItem = extractDataObjetcToContentItem(row, user);
        }
        return contentItem;
    }

    /**
     * Lấy thông tin của một Item Folio
     * @author loind
     * @createdDate Jun 24, 2014
     * @param
     * @return
     * @exceptions
     */
    public static ContentItem getFolioItemInfo(final String dDocName) throws Exception {

        GetDocInfoByName operation =
            (GetDocInfoByName)FactoryOperations.INSTANCE.getOperation(GetDocInfoByName.class);
        operation.setdDocName(dDocName);
        boolean result = operation.execute();
        if (!result) {
            return null;
        }
        ContentItem contentItem = null;
        DataResultSet docInfo = operation.getDataResultSet();
        for (DataObject row : docInfo.getRows()) {
            contentItem = extractDataObjetcToContentItem(row);
        }
        return contentItem;
    }

    /**
     * Lấy về danh sách các ContentItem tương ứng với String xmTeptindinhkem, String xmTeptindinhkem có dạng là "dDocName,xmTeptindinhkem,xmTeptindinhkem..."
     * Mỗi dDocName ngăn cách nhau bởi dấu phẩy.
     * @param xmTeptindinhkem String
     * @return List<ContentItem>
     */
    public static List<ContentItem> getAttachedFiles(final String xmTeptindinhkem,
                                                     boolean adMinContext) {
        if (StringUtils.isBlank(xmTeptindinhkem)) {
            return new ArrayList<ContentItem>();
        }
        StringTokenizer token = new StringTokenizer(xmTeptindinhkem, ",");
        String dDocName = StringUtils.EMPTY;
        List<ContentItem> contents = new ArrayList<ContentItem>();
        ContentItem contentItem;
        while (token.hasMoreTokens()) {
            try {
                dDocName = token.nextToken().trim();
                contentItem =
                        ServiceFacade.getContentItemByDDocName(dDocName, adMinContext);
                contents.add(contentItem);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return contents;
    }

    public static List<RuleItem> getCollectionNewForm(CollectionItem collectionItemParent,
                                                      boolean inheritDataFromParent) {
        List<RuleItem> rules = new ArrayList<RuleItem>();
        if (collectionItemParent == null)
            return rules;

        String dCollectionID = collectionItemParent.getdCollectionID();
        String dDocType = collectionItemParent.getdDocType();
        try {
            if (StringUtils.isNotBlank(dDocType)) {
                rules =
                        ServiceFacade.getCollectionCheckInNewForm(collectionItemParent);

            } else {
                rules =
                        ServiceFacade.getCollectionNewStarndardForm(dCollectionID);
            }

            // fill data kế thừa từ collection parent
            if (inheritDataFromParent) {
                fillCollectionData(rules, dCollectionID);
            }


            Map<String, FieldItem> allFields =
                FormUtils.INSTANCE.getAllFields(rules);

            if (allFields.containsKey(DocumentAttributeDef.X_COLLECTION_ID.getName())) {
                FieldItem field =
                    allFields.get(DocumentAttributeDef.X_COLLECTION_ID.getName());
                field.setDpFieldValue(dCollectionID);
                field.setIshidden(true);
            } else {
                FieldItem field = new FieldItem();
                field.setDFieldName(DocumentAttributeDef.X_COLLECTION_ID.getName());
                field.setDprFieldCaption(DocumentAttributeDef.X_COLLECTION_ID.getName());
                field.setDpFieldValue(dCollectionID);
                field.setIshidden(true);
            }
            if (allFields.containsKey(DocumentAttributeDef.X_COLLECTION_ID_PATH.getName())) {
                FieldItem field =
                    allFields.get(DocumentAttributeDef.X_COLLECTION_ID_PATH.getName());
                field.setDpFieldValue(dCollectionID);
                field.setIsInfoOnly(true);
            }

            //================================================================
            //================PhuongNH - bo sung dDocType=====================
            //================================================================
            if (allFields.containsKey(DocumentAttributeDef.D_DOC_TYPE.getName())) {
                FieldItem field =
                    allFields.get(DocumentAttributeDef.D_DOC_TYPE.getName());
                field.setDpFieldValue(collectionItemParent.getdDocType());
                //                field.setIsInfoOnly(true);
            }

            if (allFields.containsKey(CollectionAttributeDef.D_COLLECTION_ID.getName())) {
                FieldItem field =
                    allFields.get(CollectionAttributeDef.D_COLLECTION_ID.getName());
                field.setDpFieldValue(dCollectionID);
                field.setIshidden(true);
            }

            if (allFields.containsKey(CollectionAttributeDef.D_COLLECTION_NAME.getName())) {
                FieldItem field =
                    allFields.get(CollectionAttributeDef.D_COLLECTION_NAME.getName());
                field.setDpFieldValue(StringUtils.EMPTY);
            }

            // set account default
            if (allFields.containsKey(CollectionAttributeDef.D_DOC_ACCOUNT.getName())) {
                FieldItem field =
                    allFields.get(CollectionAttributeDef.D_DOC_ACCOUNT.getName());
                try {
                    User user = ServiceFacade.queryCurrUserAttributes();
                    field.setDpFieldValue(user.getDefaultAccount());
                } catch (Exception uex) {
                    uex.printStackTrace();
                }
            }

            FormUtils.INSTANCE.setupXCollectionIDPath(allFields);
            FormUtils.INSTANCE.setupAnhDaiDien(allFields);
            FormUtils.INSTANCE.setMucHienThiSelectManyValues(allFields);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return rules;

    }

    /**
     * Lấy danh sách RuleItem tương ứng cho SubCollection dựa theo Parent Collection. Có Sử dụng getCheckInNewForm.
     * @param dParentCollectionID String
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getCollectionCheckInNewForm(CollectionItem collectionParent) throws Exception {
        //            String dParentCollectionID;
        // virtual forld info  - dCollectionName
        RuleItem collectionRule = new RuleItem();
        collectionRule.setRuleName("Virtual Folder Name");
        collectionRule.setGroupHeader("Virtual Folder Name");
        Map<String, FieldItem> groupFieldList =
            new LinkedHashMap<String, FieldItem>();
        collectionRule.setGroupFieldList(groupFieldList);

        // dCollectionName
        FieldItem fieldItem = new FieldItem();
        fieldItem.setDFieldName(CollectionAttributeDef.D_COLLECTION_NAME.getName());
        fieldItem.setDType("text");
        fieldItem.setDprFieldCaption(JSFUtils.getMessage("TEN_THU_MUC"));
        fieldItem.setIshidden(false);
        fieldItem.setIsRequired(true);
        fieldItem.setRequiredMsg(JSFUtils.getMessage("YEU_CAU_NHAP_TEN_THU_MUC"));
        fieldItem.setIsInfoOnly(false);
        groupFieldList.put(CollectionAttributeDef.D_COLLECTION_NAME.getName(),
                           fieldItem);

        // dCollectionOwner
        fieldItem = new FieldItem();
        fieldItem.setDFieldName(CollectionAttributeDef.D_COLLECTION_OWNER.getName());

        fieldItem.setDType("text");
        fieldItem.setDprFieldCaption(JSFUtils.getMessage("D_COLLECTION_OWNER"));
        fieldItem.setIshidden(false);
        fieldItem.setIsRequired(true);
        //           dCollectionName.setRequiredMsg(JSFUtils.getMessage("YEU_CAU_NHAP_TEN_THU_MUC"));
        fieldItem.setIsInfoOnly(false);
        groupFieldList.put(CollectionAttributeDef.D_COLLECTION_OWNER.getName(),
                           fieldItem);

        // dCollectionCreator
        fieldItem = new FieldItem();
        fieldItem.setDFieldName(CollectionAttributeDef.D_COLLECTION_CREATOR.getName());
        fieldItem.setDType("text");
        fieldItem.setDprFieldCaption(JSFUtils.getMessage("D_COLLECTION_CREATOR"));
        fieldItem.setIshidden(false);
        fieldItem.setIsRequired(true);
        //           dCollectionName.setRequiredMsg(JSFUtils.getMessage("YEU_CAU_NHAP_TEN_THU_MUC"));
        fieldItem.setIsInfoOnly(false);
        groupFieldList.put(CollectionAttributeDef.D_COLLECTION_CREATOR.getName(),
                           fieldItem);


        String dDocType = collectionParent.getdDocType();
        //        List<RuleItem> rules = ServiceFacade.getCheckInNewForm(dParentCollectionID);
        List<RuleItem> rules =
            ServiceFacade.getCheckInNewForm(dDocType, dDocType);

        //        ServiceFacade.getNewFormFields(dpdIsplayLabel, dpTriggerValue)

        // remove all exClude fields and set required to false
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(rules);
        FieldItem field;
        for (String fieldName : allFields.keySet()) {
            field = allFields.get(fieldName);
            field.setIsRequired(false);
            field.setIsInfoOnly(false);
        }

        rules.add(0, collectionRule);

        // exClude fields

        Set<String> exCludeFields = new HashSet<String>();
        //            exCludeFields.add(DocumentAttributeDef.D_DOC_TITLE.getName());
        //            exCludeFields.add(DocumentAttributeDef.PRIMARY_FILE.getName());
        //            exCludeFields.add(DocumentAttributeDef.XM_TEP_TIN_DINH_KEM.getName());
        //            exCludeFields.add(DocumentAttributeDef.XM_ANH_DAI_DIEN.getName());
        //            FieldItem fieldItem;
        for (RuleItem rule : rules) {
            if (rule.getGroupFieldList().containsKey(DocumentAttributeDef.D_DOC_TYPE.getName())) {
                FieldItem dDocTypeField =
                    rule.getGroupFieldList().get(DocumentAttributeDef.D_DOC_TYPE.getName());
                //                dDocTypeField.setIsInfoOnly(true);
            }
            Map<String, FieldItem> groupFields = rule.getGroupFieldList();
            Set<String> fieldNameSet = groupFields.keySet();
            for (String fieldName : exCludeFields) {
                if (fieldNameSet.contains(fieldName)) { // remove if it's in exClude field set
                    fieldNameSet.remove(fieldName);
                }
            }
        }

        setupDependFields(rules);
        return rules;
    }

    //    public static List<RuleItem> getCollectionInfoForm(String dCollectionID) throws Exception {
    ////            List<RuleItem> rules = getCollectionCheckInNewForm(dCollectionID);
    //        }
    //

    /**
     * Lấy danh sách RuleItem tương ứng của Collection. Thực hiện call getCollectionEditForm với adminContext
     * @param dCollectionID String
     * @return List<RuleItem>
     * @throws Exception
     */
    public static List<RuleItem> getCollectionInfoForm(CollectionItem collectionItem) throws Exception {

        List<RuleItem> rules =
            ServiceFacade.getCollectionEditForm(collectionItem);

        // thiết lập các field về IsInfoOnly = true

        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(rules);
        FieldItem field;
        for (String fieldName : allFields.keySet()) {
            field = allFields.get(fieldName);
            field.setIsInfoOnly(true);
            field.setIsRequired(false);
            //             if(CollectionAttributeDef.D_COLLECTION_NAME.getName().equals(fieldName)){
            ////                CollectionItem collectionItem =
            ////                    ServiceFacade.getCollectionInfo(true, dCollectionID);
            ////                if(collectionItem != null){
            ////                    field.setDpFieldValue(collectionItem.getdCollectionName());
            ////                }
            //             }
        }
        //        setupDependFields(rules);
        return rules;
    }

    //    public static List<RuleItem> getCollectionInfoForm2(String dCollectionID) throws Exception {
    ////            List<RuleItem> rules = getCollectionCheckInNewForm(dCollectionID);
    //        List<RuleItem> rules =
    //            getCheckInNewFormWithAdMinContext(dCollectionID);
    //
    //            // thiết lập các field về IsInfoOnly = true
    //
    //        Map<String, FieldItem> allFields =
    //            FormUtils.INSTANCE.getAllFields(rules);
    //             FieldItem field;
    //             for(String  fieldName: allFields.keySet()){
    //                 field = allFields.get(fieldName);
    //                 field.setIsInfoOnly(true);
    //                 field.setIsRequired(false);
    //                 if(CollectionAttributeDef.D_COLLECTION_NAME.getName().equals(fieldName)){
    //                CollectionItem collectionItem =
    //                    ServiceFacade.getCollectionInfo(true, dCollectionID);
    //                    if(collectionItem != null){
    //                        field.setDpFieldValue(collectionItem.getdCollectionName());
    //                    }
    //                 }
    //             }
    //            setupDependFields(rules);
    //            return rules;
    //        }
    //

    public static List<RuleItem> getCollectionEditForm(CollectionItem collectionItem) throws Exception {
        List<RuleItem> rules =
            ServiceFacade.getCollectionNewForm(collectionItem, false);
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(rules);
        if (!allFields.containsKey(CollectionAttributeDef.D_COLLECTION_ID.getName())) {
            FieldItem field = new FieldItem();
            field.setDFieldName(CollectionAttributeDef.D_COLLECTION_ID.getName());
            field.setDprFieldCaption(CollectionAttributeDef.D_COLLECTION_ID.getName());
            field.setIshidden(true);
            field.setDpFieldValue(collectionItem.getdCollectionID());
            rules.get(0).getGroupFieldList().put(CollectionAttributeDef.D_COLLECTION_ID.getName(),
                                                 field);
        }
        //        if(allFields.containsKey(DocumentAttributeDef.X_COLLECTION_ID.getName())){
        //             // remove to list Rules
        //            for(RuleItem rule:rules){
        //                if(rule.getGroupFieldList().containsKey(DocumentAttributeDef.X_COLLECTION_ID.getName())){
        //                    rule.getGroupFieldList().remove(DocumentAttributeDef.X_COLLECTION_ID.getName());
        //                }
        //            }
        //        }
        fillCollectionData(rules, collectionItem.getdCollectionID());
        FormUtils.INSTANCE.setupXCollectionIDPath(allFields);
        FormUtils.INSTANCE.setupAnhDaiDien(allFields);
        FormUtils.INSTANCE.setMucHienThiSelectManyValues(allFields);
        return rules;
    }

    public static void fillCollectionData(final List<RuleItem> rules,
                                          String dCollectionID) {
        if (CollectionUtils.isEmpty(rules))
            return;

        try {
            Map<String, FieldItem> allFields =
                FormUtils.INSTANCE.getAllFields(rules);
            Map<String, Object> propertiesData =
                ServiceFacade.getCollectionInfoAsMap(true, dCollectionID);
            //             Map<String,Object>  propertyMap =  PropertyUtils.describe(collectionInfo);
            Set<String> keySet = allFields.keySet();
            Iterator<String> proIter = keySet.iterator();
            String fieldName;
            Object dpFieldValue;
            FieldItem fieldItem;
            while (proIter.hasNext()) {
                fieldName = proIter.next();
                if (DocumentAttributeDef.D_DOC_TYPE.getName().equals(fieldName))
                    continue;
                if (DocumentAttributeDef.D_DOC_ACCOUNT.getName().equals(fieldName)) {
                    fieldItem = allFields.get(fieldName);
                    if (!propertiesData.containsKey(fieldName)) {
                        fieldItem.setDpFieldValue(null);
                    }
                }
                if (propertiesData.containsKey(fieldName)) {
                    fieldItem = allFields.get(fieldName);
                    try {
                        //                         dpFieldValue = PropertyUtils.getProperty(collectionItem,fieldName);
                        dpFieldValue = propertiesData.get(fieldName);
                        if (dpFieldValue != null &&
                            StringUtils.isNotBlank(String.valueOf(dpFieldValue))) {
                            fieldItem.setDpFieldValue(dpFieldValue);
                            //                             //System.out.println("**********fieldName:"+fieldName);
                            //                             //System.out.println("**********dpFieldValue:"+dpFieldValue);
                        }
                    } catch (Exception pe) {
                        pe.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static boolean addContentLink(CollectionItem target,
                                         ContentItem contentItem) throws Exception {
        if (contentItem == null || target == null) {
            return false;
        }
        CollectionAddLinkOperation operation =
            (CollectionAddLinkOperation)FactoryOperations.INSTANCE.getOperation(CollectionAddLinkOperation.class);
        operation.setTohasCollectionID(true);
        operation.setTodCollectionID(target.getdCollectionID());
        operation.setdLinkType(operation.DLINKTYPE_CONTENT);
        operation.setdRevClassID(contentItem.getdRevClassID());
        //        operation.setdLinkName( "Shortcut to "+ contentItem.getdDocTitle());
        operation.setdLinkName("Shortcut to " + contentItem.getdDocName());
        boolean result = operation.execute();
        return result;
    }

    public static void addContentLink(CollectionItem target,
                                      List<ContentItem> contentItems) throws Exception {
        if (CollectionUtils.isEmpty(contentItems)) {
            return;
        }
        for (ContentItem contentItem : contentItems) {
            addContentLink(target, contentItem);
        }
    }

    public static FieldItem getSchemaFieldInfoOperation(String schFieldName) throws Exception {
        // cache lookup
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("schFieldName", schFieldName);
        Object objCached =
            ServiceCacheManager.get(true, GetSchemaFieldInfoOperation.class.getName(),
                                    keyMapParam);
        if (objCached instanceof FieldItem) {
            FieldItem field = (FieldItem)objCached;
            return field;
        }

        GetSchemaFieldInfoOperation operation =
            (GetSchemaFieldInfoOperation)FactoryOperations.INSTANCE.getOperation(GetSchemaFieldInfoOperation.class);
        OperationUtil.setAdminContext(operation);
        operation.setSchFieldName(schFieldName);
        boolean result = operation.execute();
        if (result) {
            FieldItem field = new FieldItem();
            field.setIsDependentList(operation.isIsDependentList());
            field.setDependentOnField(operation.getDependentOnField());
            field.setDependentRelationship(operation.getDependentRelationship());
            field.setOptionViewKey(operation.getOptionViewKey());
            ServiceCacheManager.put(true,
                                    GetSchemaFieldInfoOperation.class.getName(),
                                    keyMapParam, field);
            return field;
        }
        return null;
    }

    /**
     * add Cacheable
     *
     * @return User
     * @throws Exception
     */
    public static User queryCurrUserAttributes() throws Exception {
        // cache lookup
        User user = null;
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("dName", SystemUtils.getCurrentUserName());
        Object objCached =
            ServiceCacheManager.get(false, QueryUserAttributesOperation.class.getName(),
                                    keyMapParam);
        if (objCached instanceof User) {
            user = (User)objCached;
            return user;
        }
        GetUserPermissionsOperation operation =
            (GetUserPermissionsOperation)FactoryOperations.INSTANCE.getOperation(GetUserPermissionsOperation.class);
        boolean result = operation.execute();
        if (result) {
            user = operation.getUser();
        }
        ServiceCacheManager.put(false, keyMapParam, user);
        return user;
    }

    public static User queryUserAttributes(String dName) throws Exception {
        // cache lookup
        User user = null;
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("dName", dName);
        Object objCached =
            ServiceCacheManager.get(false, QueryUserAttributesOperation.class.getName(),
                                    keyMapParam);
        if (objCached instanceof User) {
            user = (User)objCached;
            return user;
        }
        QueryUserAttributesOperation operation =
            (QueryUserAttributesOperation)FactoryOperations.INSTANCE.getOperation(QueryUserAttributesOperation.class);
        OperationUtil.setSpecialContext(operation, dName);
        operation.setDName(dName);
        boolean result = operation.execute();
        if (result) {
            user = operation.getUser();
        }
        ServiceCacheManager.put(false, keyMapParam, user);
        return user;
    }


    public static Map<String, String> getFields(String formKey,
                                                String dpTriggerValue,
                                                String dpdIsplayLabel) throws Exception {
        List<RuleItem> rules =
            getCheckInNewForm(dpdIsplayLabel, dpTriggerValue);

        Map<String, String> fields = new HashMap<String, String>();
        fields.put(DocumentAttributeDef.D_DOC_ACCOUNT.getName(),
                   DocumentAttributeDef.D_DOC_ACCOUNT.getName());
        fields.put(DocumentAttributeDef.D_DOC_NAME.getName(),
                   DocumentAttributeDef.D_DOC_NAME.getName());
        fields.put(DocumentAttributeDef.D_DOC_ID.getName(),
                   DocumentAttributeDef.D_DOC_ID.getName());
        fields.put(DocumentAttributeDef.D_DOC_CREATOR.getName(),
                   DocumentAttributeDef.D_DOC_CREATOR.getName());
        fields.put(DocumentAttributeDef.D_DOC_TITLE.getName(),
                   DocumentAttributeDef.D_DOC_TITLE.getName());
        fields.put(DocumentAttributeDef.D_DOC_TYPE.getName(),
                   DocumentAttributeDef.D_DOC_TYPE.getName());
        return fields;
    }

    //    public static void Main(String[] a){
    //        ServiceFacade.getNewFormFields("", "")
    //    }

    /**
     * if recursive param is true then query all child with sublevels
     * @param collectionID
     * @param dCollectionID
     * @param recursive
     * @return
     */
    public static List<CollectionItem> getChildrenCollections(boolean collectionID,
                                                              String dCollectionID,
                                                              boolean recursive,
                                                              boolean cacheable) {
        List<CollectionItem> collectionItems = new ArrayList<CollectionItem>();
        // cache lookup
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("getChildrenCollections", "getChildrenCollections");
        keyMapParam.put("recursive", recursive);
        keyMapParam.put("collectionID", collectionID);
        keyMapParam.put("dCollectionID", dCollectionID);
        if (cacheable) {
            Object objCached =
                ServiceCacheManager.get(false, GetCollectionsOperation.class.getName(),
                                        keyMapParam);
            if (objCached instanceof List) {
                collectionItems = (List<CollectionItem>)objCached;
                return collectionItems;
            }
        }

        //            //System.out.println("************** getChildrenCollections:"+dCollectionID);
        try {
            collectionItems =
                    ServiceFacade.getCollections(collectionID, dCollectionID);
            List<CollectionItem> childRen;
            for (CollectionItem collection : collectionItems) {
                //childRen = new ArrayList<CollectionItem>();
                childRen =
                        ServiceFacade.getCollections(true, collection.getdCollectionID());
                if (recursive) {
                    childRen =
                            ServiceFacade.getChildrenCollections(true, collection.getdCollectionID(),
                                                                 recursive,
                                                                 cacheable);
                } else {
                    childRen =
                            ServiceFacade.getCollections(true, collection.getdCollectionID());
                }

                collection.setChildren(childRen);
                collection.setdParentCollectionID(dCollectionID);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ServiceCacheManager.put(false, GetCollectionsOperation.class.getName(),
                                keyMapParam, collectionItems);
        return collectionItems;
    }

    public static List<CollectionItem> getChildrenCollectionsForJqueryFolder(boolean collectionID,
                                                                             String dCollectionID,
                                                                             boolean recursive,
                                                                             boolean cacheable) {
        List<CollectionItem> collectionItems = new ArrayList<CollectionItem>();
        // cache lookup
        Map<String, Object> keyMapParam = new HashMap<String, Object>();
        keyMapParam.put("getChildrenCollections", "getChildrenCollections");
        keyMapParam.put("recursive", recursive);
        keyMapParam.put("collectionID", collectionID);
        keyMapParam.put("dCollectionID", dCollectionID);
        if (cacheable) {
            Object objCached =
                ServiceCacheManager.get(false, GetCollectionsOperation.class.getName(),
                                        keyMapParam);
            if (objCached instanceof List) {
                collectionItems = (List<CollectionItem>)objCached;
                return collectionItems;
            }
        }

        //            //System.out.println("************** getChildrenCollections:"+dCollectionID);
        try {
            collectionItems =
                    ServiceFacade.getCollections(collectionID, dCollectionID);
            //            List<CollectionItem> childRen;
            //            for (CollectionItem collection : collectionItems) {
            //                //childRen = new ArrayList<CollectionItem>();
            //                childRen = ServiceFacade.getCollections(true, collection.getdCollectionID());
            //                if (recursive) {
            //                    childRen =
            //                            ServiceFacade.getChildrenCollections(true, collection.getdCollectionID(),
            //                                                                 recursive,
            //                                                                 cacheable);
            //                } else {
            //                    childRen =
            //                            ServiceFacade.getCollections(true, collection.getdCollectionID());
            //                }
            //
            //                collection.setChildren(childRen);
            //                collection.setdParentCollectionID(dCollectionID);
            //            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ServiceCacheManager.put(false, GetCollectionsOperation.class.getName(),
                                keyMapParam, collectionItems);
        return collectionItems;
    }


    /**
     * get PrimaryFile from ucm
     * @param dDocName
     * @param dID
     * @param dOriginalName
     * @return
     * @throws Exception
     * loind
     */
    public static FileUploaded getFileUploaded(String dDocName, String dID,
                                               String dOriginalName) throws Exception {
        Map<String, Object> fileMap =
            ServiceFacade.getFileWithAdminContext(dDocName, dID, null, null);
        if (fileMap == null || fileMap.get("idc-file") == null)
            return null;
        FileUploaded primaryFile = null;
        InputStream input = (InputStream)fileMap.get("file");
        String contentType = (String)fileMap.get("Content-type");
        String fileName = dOriginalName;
        if (StringUtils.isBlank(fileName)) {
            String contentDisposition =
                String.valueOf(fileMap.get("Content-Disposition"));
            int startIndexFileName =
                StringUtils.lastIndexOf(contentDisposition, "filename");
            if (startIndexFileName != -1) {
                startIndexFileName += 10; //for filename=" length
                fileName =
                        StringUtils.substring(contentDisposition, startIndexFileName,
                                              StringUtils.length(contentDisposition) -
                                              1); //
            }
        }
        String prefix = FilenameUtils.getBaseName(fileName);
        String suffix = FilenameUtils.getExtension(fileName);
        File tempFile = File.createTempFile(prefix + "-", "." + suffix);
        OutputStream output = new FileOutputStream(tempFile);
        try {
            IOUtils.copy(input, output);
            primaryFile = new FileUploaded();
            fileName =
                    FilenameUtils.getBaseName(fileName) + "_" + Calendar.getInstance().getTimeInMillis() +
                    "_copy." + FilenameUtils.getExtension(fileName);
            primaryFile.setFileName(fileName);
            primaryFile.setContentType(contentType);
            primaryFile.setFile(tempFile);
            primaryFile.setLength(tempFile.length());
            primaryFile.setFilePath(tempFile.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(output);
            IOUtils.closeQuietly(input);
        }
        return primaryFile;
    }

    /**
     * Manual copy - copy toàn bộ meta theo cấu hình
     * @param item
     * @param xmTrangthai
     * @param xCollectionID
     * @return
     * @throws Exception
     */
    public static Object copyContent(ContentItem item, String xmTrangthai,
                                     String xCollectionID) throws Exception {
        String dDocName = StringUtils.EMPTY;
        Map<String, Object> requiredParams = new HashMap<String, Object>();
        String dDocType = item.getdDocType();
        List<RuleItem> rules = new ArrayList<RuleItem>();
        TransferFile transferFile = null;
        //            try{
        transferFile =
                FileUploaded.toTransferFile(getFileUploaded(item.getdDocName(),
                                                            item.getdID(),
                                                            item.getdOriginalName()));
        rules = ServiceFacade.getCheckInNewForm(dDocType, dDocType, true);
        //            }catch(Exception e){
        //                e.printStackTrace();
        //            }
        Map<String, FieldItem> allFields =
            FormUtils.INSTANCE.getAllFields(rules);
        Set<String> fieldNames = allFields.keySet();
        Iterator<String> fieldIter = fieldNames.iterator();
        String fieldName = StringUtils.EMPTY;
        List<String> allowedFieldCopy =
            ConfigUtil.getFieldAllowCopyByContentType(ConfigEnum.ListFieldsNotCopyContent.getName(),
                                                      item.getdDocType());
        if (CollectionUtils.isEmpty(allowedFieldCopy))
            allowedFieldCopy = new ArrayList<String>();
        Map<String, Object> propertiesMap = PropertyUtils.describe(item);
        while (fieldIter.hasNext()) {
            fieldName = fieldIter.next();
            try {
                if (!allowedFieldCopy.contains(fieldName)) {
                    continue;
                }
                if (!propertiesMap.containsKey(fieldName))
                    continue;
                Object fieldValue = PropertyUtils.getProperty(item, fieldName);
                if (fieldValue != null)
                    requiredParams.put(fieldName, fieldValue);
            } catch (Exception re) {
                re.printStackTrace();
            }
        }
        requiredParams.remove(DocumentAttributeDef.D_DOC_NAME.getName());
        requiredParams.remove(DocumentAttributeDef.D_ID.getName());
        requiredParams.remove(DocumentAttributeDef.D_DOC_ID.getName());
        requiredParams.put(DocumentAttributeDef.PRIMARY_FILE.getName(),
                           transferFile);
        User currentuser =
            ServiceFacade.queryUserAttributes(SystemUtils.getCurrentUserName());
        requiredParams.put(DocumentAttributeDef.D_DOC_ACCOUNT.getName(),
                           currentuser.getDefaultAccount());
        requiredParams.put(DocumentAttributeDef.D_DOC_CREATOR.getName(),
                           SystemUtils.getCurrentUserName());

        requiredParams.put(DocumentAttributeDef.X_COLLECTION_ID.getName(),
                           xCollectionID);
        requiredParams.put(DocumentAttributeDef.D_REV_RANK.getName(), "1");
        requiredParams.put(DocumentAttributeDef.XM_NGAY_TAO.getName(),
                           Calendar.getInstance().getTime());
        if (allFields.containsKey(DocumentAttributeDef.XM_TRANG_THAI.getName())) {
            if (StringUtils.isNotBlank(xmTrangthai)) {
                requiredParams.put(DocumentAttributeDef.XM_TRANG_THAI.getName(),
                                   xmTrangthai);
            }
        }
        User user = ServiceFacade.queryCurrUserAttributes();
        requiredParams.put(DocumentAttributeDef.D_DOC_ACCOUNT.getName(),
                           user.getDefaultAccount());
        // giu nguyen dDocType
        if (StringUtils.isNotBlank(dDocType)) {
            requiredParams.put(DocumentAttributeDef.D_DOC_TYPE.getName(),
                               dDocType);
        }
        dDocName =
                ServiceFacade.checkInNew2(requiredParams).get(DocumentAttributeDef.D_DOC_NAME.getName());
        //                 counter++;
        return dDocName;
    }

    //    /**
    //     * @creator Tuyến NT
    //     * @comment Thủ thục check in new Dòng sự kiện Folio
    //     * @param xCollectionID
    //     * @param dDocTitle
    //     * @param xmNgayhethan
    //     * @param dSecurityGroup
    //     * @param dDocCreator
    //     * @param dDocName
    //     * @param dDocType
    //     * @return Trả lại giá trị dDocName nếu checkin thành công
    //     * @throws Exception
    //     */
    //    public static String checkinNewFolio(String xCollectionID,
    //                                         String dDocTitle, Date xmNgayhethan,
    //                                         String dSecurityGroup,
    //                                         String dDocCreator, String dDocName,
    //                                         String dDocType, String dDocAccount,
    //                                         String xComments) throws Exception {
    //        CheckInNewFolio operation =
    //            (CheckInNewFolio)FactoryOperations.INSTANCE.getOperation(CheckInNewFolio.class);
    //        operation.setdDocCreator(dDocCreator);
    //        operation.setXCollectionID(xCollectionID);
    //        operation.setDDocName(dDocName);
    //        operation.setXComments(xComments);
    //        operation.setDDocTitle(dDocTitle);
    //        operation.setDDocType(dDocType);
    //        operation.setDSecurityGroup(dSecurityGroup);
    //        operation.setXmNgayhethan(xmNgayhethan);
    //        operation.setDDocAccount(dDocAccount);
    //        boolean result = operation.execute();
    //        if (result) {
    //            return operation.getLocalData().get(DocumentAttributeDef.D_DOC_NAME.getName());
    //        }
    //        return StringUtils.EMPTY;
    //    }


    /**
     * @author PhuongNH
     * @comment Thủ thục check in new Dòng sự kiện Folio theo form generate động
     * @param xCollectionID
     * @param dDocTitle
     * @param xmNgayhethan
     * @param dSecurityGroup
     * @param dDocCreator
     * @param dDocName
     * @param dDocType
     * @param xComments
     * @param transferFile
     * @return Trả lại giá trị dDocName nếu checkin thành công
     * @throws Exception
     */
    public static String checkinNewFolio(Map<String, Object> params) throws Exception {

        CheckInNewFolio operation =
            (CheckInNewFolio)FactoryOperations.INSTANCE.getOperation(CheckInNewFolio.class);

        if (params.containsKey(DocumentAttributeDef.D_DOC_CREATOR.getName())) {
            operation.setdDocCreator(params.get(DocumentAttributeDef.D_DOC_CREATOR.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.X_COLLECTION_ID.getName())) {
            operation.setXCollectionID(params.get(DocumentAttributeDef.X_COLLECTION_ID.getName()).toString());
        }

        if (params.containsKey(DocumentAttributeDef.D_DOC_NAME.getName())) {
            operation.setDDocName(params.get(DocumentAttributeDef.D_DOC_NAME.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.D_DOC_ACCOUNT.getName())) {
            operation.setDDocAccount(params.get(DocumentAttributeDef.D_DOC_ACCOUNT.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.D_DOC_TITLE.getName())) {
            operation.setDDocTitle(params.get(DocumentAttributeDef.D_DOC_TITLE.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.X_COMMENTS.getName())) {
            operation.setXComments(params.get(DocumentAttributeDef.X_COMMENTS.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.D_DOC_TYPE.getName())) {
            operation.setDDocType(params.get(DocumentAttributeDef.D_DOC_TYPE.getName()).toString());
        }
        if (params.containsKey(DocumentAttributeDef.D_SECURITY_GROUP.getName())) {
            operation.setDSecurityGroup(params.get(DocumentAttributeDef.D_SECURITY_GROUP.getName()).toString());
        }
        //        if (params.containsKey(DocumentAttributeDef.XM_NGAY_HET_HAN.getName()) &&  params.get(DocumentAttributeDef.XM_NGAY_HET_HAN.getName())!=null &&  params.get(DocumentAttributeDef.XM_NGAY_HET_HAN.getName()).toString().length()>0) {
        //            operation.setXmNgayhethan((Date)params.get(DocumentAttributeDef.XM_NGAY_HET_HAN.getName()));
        //        }
        //        if (params.containsKey(DocumentAttributeDef.XM_NGAY_XUAT_BAN.getName()) &&  params.get(DocumentAttributeDef.XM_NGAY_XUAT_BAN.getName())!=null &&  params.get(DocumentAttributeDef.XM_NGAY_XUAT_BAN.getName()).toString().length()>0) {
        //            operation.setXmNgayhethan((Date)params.get(DocumentAttributeDef.XM_NGAY_XUAT_BAN.getName()));
        //        }
        if (params.containsKey(DocumentAttributeDef.XM_ANH_DAI_DIEN.getName())) {
            operation.setXmAnhDaiDien(params.get(DocumentAttributeDef.XM_ANH_DAI_DIEN.getName()).toString());
        }
        operation.setParams(params);
        boolean result = operation.execute();
        if (result) {
            return operation.getLocalData().get(DocumentAttributeDef.D_DOC_NAME.getName());
        }
        return StringUtils.EMPTY;
    }


    /**
     * @creator Tuyến NT
     * @comment thủ tục lấy thông tin về Folio_Dòng sự kiện
     * @param dID
     * @return
     * @throws Exception
     */
    public static GetFolioInforOperation getFolioInfo(String dID) throws Exception {
        GetFolioInforOperation operation =
            (GetFolioInforOperation)FactoryOperations.INSTANCE.getOperation(GetFolioInforOperation.class);
        operation.setDID(dID);
        boolean result = operation.execute();
        if (result)
            return operation;
        return null;
    }

    /**
     * @creator Tuyến NT
     * @comment
     * @return
     */
    public static String[] GetGUIDS() {
        String guids[] = new String[25];
        int n = 0;
        GetGUIDS operation =
            (GetGUIDS)FactoryOperations.INSTANCE.getOperation(GetGUIDS.class);
        boolean result;
        try {
            result = operation.execute();
            if (result) {
                DataResultSet guidResults = operation.getGuidResults();
                for (DataObject dataObject : guidResults.getRows()) {
                    guids[n] = dataObject.get("id");
                    n++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return guids;
    }

    /**
     * @creator Tuyến NT
     * @comment Thủ tục cập nhật Content Item vào Folio
     * @param dDocName
     * @param RevisionSelectionMethod
     * @param NumChanges
     * @param change0
     * @param change_data0
     * @param change1
     * @param change_data1
     * @return
     */
    public static boolean UpdateContentToFolio(String dDocName,
                                               String RevisionSelectionMethod,
                                               String NumChanges,
                                               String change0,
                                               String change_data0,
                                               String change1,
                                               String change_data1) throws Exception {

        UpdateFolio operation =
            (UpdateFolio)FactoryOperations.INSTANCE.getOperation(UpdateFolio.class);
        operation.setDDocName(dDocName);
        operation.setChange0(change0);
        operation.setChange1(change1);
        operation.setChange_data0(change_data0);
        operation.setChange_data1(change_data1);
        operation.setNumChanges(NumChanges);
        operation.setRevisionSelectionMethod(RevisionSelectionMethod);
        boolean result = false;
        result = operation.execute();
        return result;
    }
    public static String getDynamicConvertor(String dDocName) throws Exception {
        GetDynamicConversion operation =
            (GetDynamicConversion)FactoryOperations.INSTANCE.getOperation(GetDynamicConversion.class);
        operation.setDDocName(dDocName);
        operation.execute();
        return operation.getHtmlContent();
    }
    //    public static void main(String[] args){
    //        String date = "2013-11-02 04:04:24";
    //        String value = convertDateByPattern(date, "");
    //        //System.out.println("-----------Date-------------->>> "+value);
    //    }


}
