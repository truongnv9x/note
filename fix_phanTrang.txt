
Integer pageNo, Integer pageSize, boolean desc

List<Object[]> listTotal = null;
long Tong = 0;
listTotal = entityManager.createQuery(stringQuery).getResultList();

if(listTotal.size() > 0) {
	Tong = listTotal.size();
}

if (pageNo == 0 && pageSize == 0) {
	listVPDaiDienNN = entityManager.createQuery(stringQuery).getResultList();
} else {
	listVPDaiDienNN = entityManager.createQuery(stringQuery).setFirstResult(pageNo * pageSize).setMaxResults(pageSize).getResultList();
}


StringBuilder stringQueryCount = new StringBuilder(
					"Select count(u.id) From " + CtckCdMoiQuanHeEntity.class.getName() + "" + " u LEFT JOIN "
							+ CtckThongTinEntity.class.getName() + " t on u.ctckThongTinId = t.ctckThongTinId AND t.bangTam = 0"
							+ " LEFT JOIN " + CtckCoDongEntity.class.getName() + " c on u.ctckCoDong = c.id ");

return{
	isFirstPage: false,
	isLastPage: false,
	rowsOptions: [10, 20, 30, 40, 50],
	toggled: true,

	isExpanded: true,
	expanded: false,


	igoneIndex: [],
	actionNext: true,

	pagination: {
		sortBy: "id",
		descending: true,
		page: 0,
		rowsPerPage: 10,
		rowsNumber: 10,
		pagesNumber: "",
		total: 0,
	},
}


async getDatas(page, rowsPerPage, nextpage) {
	var self = this;
	self.showLoading();

	if (page == 0) {
		page = 0;
	}

	rowsPerPage = rowsPerPage || self.pagination.rowsPerPage;
	self.pagination.rowsPerPage = rowsPerPage;

	var params = "";
	params = {
	pageNo: page,
	pageSize: rowsPerPage,
	keySort: self.pagination.sortBy,
	desc: self.pagination.descending,
	filterkey: self.modelNoRequest.filterkey,
	ctckThongTinId:
		self.modelNoRequest.ctckThongTinId != ""
			? self.modelNoRequest.ctckThongTinId.value: "",
	hinhThuc:
		self.modelNoRequest.hinhThuc != ""
			? self.modelNoRequest.hinhThuc.value
			: "",
		hinhPhatBoSung: 
			self.modelNoRequest.hinhPhatBoSung,
};

//------------res
if (res.totalElement == null || res.totalElement == 0) {
            self.pagination.pagesNumber = 1;
            self.isFirstPage = true;
            self.isLastPage = true;

            self.pagination.page = 1;
            self.pagination.total = 0;
          } else {
            self.pagination.page = res.pageNo;
            self.pagination.total = res.totalElement;
            var pageNumberTmp =
              self.pagination.total / self.pagination.rowsPerPage;

            var checkSoNguye = Number.isInteger(pageNumberTmp);

            if (checkSoNguye) {
              self.pagination.pagesNumber = pageNumberTmp;
            } else {
              self.pagination.pagesNumber = parseInt(pageNumberTmp, 10) + 1;
            }
            if (self.pagination.pagesNumber <= 1) {
              self.isFirstPage = true;
              self.isLastPage = true;
            } else if (self.pagination.page == self.pagination.pagesNumber) {
              self.isFirstPage = false;
              self.isLastPage = true;
            } else if (
              self.pagination.page > 1 &&
              self.pagination.page < self.pagination.pagesNumber
            ) {
              self.isFirstPage = false;
              self.isLastPage = false;
            } else {
              self.isFirstPage = true;
              self.isLastPage = false;
            }
          }

          if (nextpage == null) {
            self.IdStoreArr = [];
            self.igoneIndex = [];
            //.pushIndexLoad(res, self);
          } else if (nextpage) {
            //self.pushIndexLoad(res, self);
          } else {
            //self.DeleteIndex(res, self);
          }
           self.hideLoading();




//-----------------



toggle(index) {
  this.xulyhanhchinhlist[index].active = !this.xulyhanhchinhlist[index]
	.active;
  this.toggled = !this.toggled;
},

prevPage() {
  let rowsPerPage = this.pagination.rowsPerPage;
  let page = this.pagination.page - 1;
  this.getDatas(page, rowsPerPage, false);
},
nextPage() {
  let rowsPerPage = this.pagination.rowsPerPage;
  let page = this.pagination.page + 1;
  this.getDatas(page, rowsPerPage, true);
},
requestPerPage() {
  // let { page, rowsPerPage, sortBy, descending } = props.pagination;
  // this.currentPage = page <= 0 ? 1 : page;
  // this.currentPageSize = rowsPerPage;
  // this.indexData = 0;
  // this.pagination.sortBy = sortBy;
  // this.pagination.descending = descending;

  let rowsPerPage = this.pagination.rowsPerPage;
  let page = 0;
  this.getDatas(page, rowsPerPage, null);
},
onRequest(props) {
  let { page, rowsPerPage, sortBy, descending } = props.pagination;
  this.currentPage = page <= 0 ? 1 : page;
  this.currentPageSize = rowsPerPage;
  this.indexData = 0;

  this.pagination.sortBy = sortBy;
  this.pagination.descending = descending;
  this.getDatas(page, rowsPerPage, null);
},


async getDatas(page, rowsPerPage, nextpage) {
  var self = this;
  self.showLoading();

  if (page == 0) {
	page = 0;
  }

  rowsPerPage = rowsPerPage || self.pagination.rowsPerPage;
  self.pagination.rowsPerPage = rowsPerPage;

  var params = "";
  params = {
	pageNo: page,
	pageSize: rowsPerPage,
	keySort: self.pagination.sortBy,
	desc: self.pagination.descending,
	filterkey: self.modelNoRequest.filterkey,
	ctckThongTinId:
	  self.modelNoRequest.ctckThongTinId != ""
		? self.modelNoRequest.ctckThongTinId.value
		: "",
	hinhThuc:
	  self.modelNoRequest.hinhThuc != ""
		? self.modelNoRequest.hinhThuc.value
		: "",
	hinhPhatBoSung: self.modelNoRequest.hinhPhatBoSung,
  };
  await apiService.get(
	process.env.VUE_APP_ROOT_API + "xulyhanhchinh/filter",
	params,
	function (res) {
	  //set resource
	  self.xulyhanhchinhlist = res.lstCtckXuLyHanhChinhDisplay;
	  // check dữ liệu phân trang

	  if (res.totalElement == null || res.totalElement == 0) {
		self.pagination.pagesNumber = 1;
		self.isFirstPage = true;
		self.isLastPage = true;

		self.pagination.page = 1;
		self.pagination.total = 0;
	  } else {
		self.pagination.page = res.pageNo;
		self.pagination.total = res.totalElement;
		var pageNumberTmp =
		  self.pagination.total / self.pagination.rowsPerPage;

		var checkSoNguye = Number.isInteger(pageNumberTmp);

		if (checkSoNguye) {
		  self.pagination.pagesNumber = pageNumberTmp;
		} else {
		  self.pagination.pagesNumber = parseInt(pageNumberTmp, 10) + 1;
		}
		if (self.pagination.pagesNumber <= 1) {
		  self.isFirstPage = true;
		  self.isLastPage = true;
		} else if (self.pagination.page == self.pagination.pagesNumber) {
		  self.isFirstPage = false;
		  self.isLastPage = true;
		} else if (
		  self.pagination.page > 1 &&
		  self.pagination.page < self.pagination.pagesNumber
		) {
		  self.isFirstPage = false;
		  self.isLastPage = false;
		} else {
		  self.isFirstPage = true;
		  self.isLastPage = false;
		}
	  }

	  if (nextpage == null) {
		self.IdStoreArr = [];
		self.igoneIndex = [];
		//.pushIndexLoad(res, self);
	  } else if (nextpage) {
		//self.pushIndexLoad(res, self);
	  } else {
		//self.DeleteIndex(res, self);
	  }

	  self.hideLoading();
	},

	function () {
	  //disable loading
	  self.hideLoading();
	}
  );
},

//----------------------------------------------------------------
Query q = entityManager.createQuery(stringQuery);
			q = this.SetParram(q, stringQuery, keysearch, ctckThongTinId, sQuyetDinh, sHinhThuc, sHinhPhatBoSung);
			List<Object[]> lstCtckXuLyHanhChinh = null;

			if (pageNo == 0 && pageSize == 0) {
				lstCtckXuLyHanhChinh = q.getResultList();
			} else {
				lstCtckXuLyHanhChinh = q.setFirstResult(pageNo * pageSize).setMaxResults(pageSize).getResultList();
			}

			// megerWhereIn

			if (lstCtckXuLyHanhChinh != null) {

				result = new CtckXuLyHanhChinhBDTO();
				result.setLstCtckXuLyHanhChinh(
						lstCtckXuLyHanhChinh.stream().map(CtckXuLyHanhChinhDTO::new).collect(Collectors.toList()));
				stringQueryCount.append(stringWhere);
				// get count total item
				Query qCount = entityManager.createQuery(stringQueryCount.toString());
				qCount = this.SetParram(qCount, stringQueryCount.toString(), keysearch, ctckThongTinId, sQuyetDinh,
						sHinhThuc, sHinhPhatBoSung);

				result.totalElement = (long) qCount.getResultList().get(0);

				if (pageSize > 0) {
					result.lastPage = (int) ((result.totalElement / pageSize));
				}
				result.pageNo = pageNo + 1;
				result.pageSize = pageSize;

				return result;
				
				
//----------

if (pageNo == 0 && pageSize == 0) {
	kiemToanVienGroup = entityManager.createQuery(stringQuery).getResultList();
} else {
	kiemToanVienGroup = entityManager.createQuery(stringQuery).setFirstResult(pageNo * pageSize).setMaxResults(pageSize).getResultList();
}
