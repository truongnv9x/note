T!#%24Van

Thông tin server
+ Root: 
	192.168.50.80
	tvs_admin/Tv$#2019
+ Test: 
	192.168.50.97 
	administrator/TvsGP20!#

C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps
--------------------------------------------------------------------------------------------
========> B1: Merge code bản mới nhất ở cả server + client
========> B2: Client đổi thông tin 2 file env và httpConnect để cấu hình trỏ lại đường dẫn

103.3.252.117 với user/pass: tinhvanuser01/Tinhvan0
https://192.168.3.17/PasswordVault/v10/logon/cyberark
user/pass: donvitinhvan/Uyban0099

http://192.168.2.45:8080/scms-server/service/congty/CongtyDetailsWsdl.wsdl

https://www.youtube.com/watch?v=wAabWWyAkDg

hopcongkhaingansach

YenThanhVien / Yen@th84

regex
Fax: /^\+?[0-9]+$/

Phone: /^(([0]{1})+[0-9]{9,10})*$/
/(01|03|09|01[2|6|8|9])+([0-9]{8})\b/g

\(?[\+]\)?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})
^(([+]84)|([0-9]{3})\))?((3[\d]{2})([ ,\-,\/]){0,1}([\d, ]{6,8}))|(((0[\d]{1,4}))([ ,\-,\/]){0,1}([\d, ]{5,9}))$

<add key="QUEUE_MANAGER_NAME" value="IBQMGR" />
<add key="MQC_HOST_NAME" value="192.168.6.123" />
<add key="MQC_PORT" value="1414" />
<add key="MQC_CHANNEL" value="UBCK_SVRCONN" />
<add key="MQC_USER_ID" value="admin" />
<add key="MQC_PASSWORD" value="fail" />
<add key="MQC_USE_MQCSP_AUTHENTICATION" value="true" />

QUEUE_MGR	IBQMGR
QUEUE_HOSTNAME	192.168.6.123
QUEUE_CHANNEL	UBCK_SVRCONN
QUEUE_PORT	1414
QUEUE_USERID	admin
QUEUE_PASSWORD	


SCMS.BC334.INBOX.QUEUE
SMCS.TTCONGTY.INBOX.QUEUE

---------------------------
QUEUE_MGR	ESB.KNT.QMGR
QUEUE_HOSTNAME	192.168.50.106
QUEUE_CHANNEL	KNT_SVRCONN
QUEUE_PORT	1919
QUEUE_USERID	admin
QUEUE_PASSWORD	

Queue name: 
SCMS.BC334.INBOX.QUEUE
SMCS.TTCONGTY.INBOX.QUEUE

SSC_SCMS
VUE_APP_ROOT_API = http://103.3.252.91:8080/scms-server/api/v1/
BASE_URL = /

.env local
VUE_APP_ROOT_API= http://localhost:8088/api/v1/
BASE_URL = /


VUE_APP_ROOT_API = http://192.168.2.45:8080/scms-server/api/v1/
BASE_URL = /


//new-------------------
http://103.3.252.91:8080/phanquyenbaocaodichvuctck

http://103.3.252.91:8080/login
VUE_APP_ROOT_API = http://103.3.252.91:8080/scms-server/api/v1/
BASE_URL = /


Root
VUE_APP_ROOT_API= http://scms.tinhvan.com/scms-server/api/v1/
BASE_URL = /scms/

Test
VUE_APP_ROOT_API= http://scmstest.tinhvan.com/scms-test/api/v1/
BASE_URL = /scms/


urlAuth => httpConnect.js
httpConnect: "http://localhost:8088"
httpConnect: "http://scms.tinhvan.com/scms-server"
httpConnect: "http://scmstest.tinhvan.com/scms-test"

id="myDropdown"

IP Public: 118.70.217.120
Tên miền: m-portal.mof.gov.vn

//-----------------------------------------
env
VUE_APP_ROOT_API= http://localhost:8088/api/v1/
BASE_URL = /

VUE_APP_ROOT_API= http://scms.tinhvan.com/scms-server/api/v1/
BASE_URL = /scms/

VUE_APP_ROOT_API= http://scmstest.tinhvan.com/scms-test/api/v1/
BASE_URL = /scms/

VUE_APP_ROOT_API= http://localhost:8088/api/v1/
BASE_URL = /

urlAuth => httpConnect.js
httpConnect: "http://localhost:8088"
httpConnect: "http://scms.tinhvan.com/scms-server"
httpConnect: "http://scmstest.tinhvan.com/scms-test"
httpConnect: "http://192.168.50.97:8080/scms-test"


prms["FileName"] = "http://localhost:8088/printing/" + url; //http://scms.tinhvan.com/scms-server/printing/		//http://scmstest.tinhvan.com/scms-test/printing/

function exc_sign_approved(url) {
	var prms = {};
	prms["FileUploadHandler"] = "http://localhost:8088/remixKySo"; //http://scms.tinhvan.com/scms-server/remixKySo   //http://scmstest.tinhvan.com/scms-test/remixKySo
	prms["SessionId"] = "";
	prms["FileName"] = "http://localhost:8088/printing/" + url; //http://scms.tinhvan.com/scms-server/printing/		//http://scmstest.tinhvan.com/scms-test/printing/
	var json_prms = JSON.stringify(prms);
	vgca_sign_approved(json_prms, SignFileCallBack1);
}


//-----------------------------------------


urlAuth => httpConnect.js
httpConnect: "http://localhost:8088"

root
httpConnect: "http://scms.tinhvan.com/scms-server"

test
httpConnect: "http://scmstest.tinhvan.com/scms-test"

Chạy lệnh npm run build => Hệ thống sẽ tự sinh file ở thư mục dist trong folder client

========> B3: Server đổi lại thông tin schema db đối với 

+ Root: SSC_SCMS
+ Test/Local: SCMS_TEST
SSC_SCMS_DEV

=> Build project 0 để ra file war

========>  B4: Kết nối đến server
Copy file war sang folder deploy, replace tên cũ thành scms_server_yyyymmdd
+ Root directory: C:\DEPLOY_SPRING
+ Test directory: 
========>  B5: Backup phiên bản cũ(áp dụng đối với các bản backup đã sử dụng nhiều ngày - phiên bản mới của mình là bản big update)
+ zip lại client C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\scms đặt tên scms_yyyymmdd và lưu vào folder 
	+ Root directory: C:\DEPLOY_SPRING
	+ Test directory:
========>  B4.1: Deploy server
+ Vào link: http://localhost:8080/manager/html 
+ Undeploy scms-server 
=> Khi có message như này là undeploy thành công. "OK - Undeployed application at context path [/scms-server]"
+ Upload file war trong phần War file to deploy
=> Chọn file scms-server vừa lưu
=> Upload 
=> Khi có message OK là thành công
========>  B4.2: Deploy client
=> Copy đè vào thư mục scms 
+ Root: C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\scms
========>  B6: Check lại


5.466.000

Khi thêm mới nhân sự hoặc chỉnh sửa nhân sự có CCHN, 
SCMS gửi thông tin nhân sự sang hệ thống NHN để xác nhận (trạng thái Chờ xác nhận): 
- Trạng thái "Duyệt": tồn tại nhân sự bên hệ thống NHN CK và thông tin số CCHN kê khai chính xác 
- Trạng thái "Từ chối": do các lỗi sau:
+ Lỗi: Không tìm thấy số CCHN trong hệ thống NHN CK
+ Lỗi: Có số CCHN nhưng không đúng Họ tên, Ngày sinh, Số CMND/Hộ chiếu


router -> history: mode  

<error-page>
    <error-code>404</error-code>
    <location>/index.html</location>
</error-page>
-->> web.xml

đẩy dist -> vào trong ROOT 

env
VUE_APP_ROOT_API= http://localhost:8088/api/v1/
BASE_URL = /

VUE_APP_ROOT_API= http://scms.tinhvan.com/scms-server/api/v1/
BASE_URL = /scms/

VUE_APP_ROOT_API= http://scmstest.tinhvan.com/scms-test/api/v1/
BASE_URL = /scms/


urlAuth => httpConnect.js
httpConnect: "http://localhost:8088"
httpConnect: "http://scms.tinhvan.com/scms-server"
httpConnect: "http://scmstest.tinhvan.com/scms-test"


C:\SCMS_FILE
scms-test


datasource.sampleapp.url=jdbc:oracle:thin:@192.168.50.204:1521/scms
datasource.sampleapp.username=ssc_scms
datasource.sampleapp.password=ssc_scms


toanlk/mtdh2017123.abc

datasource.sampleapp.url=jdbc:oracle:thin:@192.168.50.213:1521/bidvportaldb
#datasource.sampleapp.url=jdbc:oracle:thin:@localhost:1521/orcl
datasource.sampleapp.username=PJ_TEMP
datasource.sampleapp.password=PJ_TEMP




//chứng chỉ hành nghề

delete from CTCK_NGUOI_HANH_NGHE_CK where id in (select id from (SELECT id, HOTEN, 
        SO_CHUNG_CHI_HNCK, 
        NGAY_CAP_CCHN, 
        NGAYSINH, 
        ROW_NUMBER() OVER (PARTITION BY HOTEN, SO_CHUNG_CHI_HNCK,  NGAY_CAP_CCHN, NGAYSINH ORDER BY HOTEN) row_num
     FROM
        CTCK_NGUOI_HANH_NGHE_CK) where row_num > 1);
commit;


create or replace FUNCTION "FN_CONVERT_TO_VN" /* Creator: Date: Des: function chuyển đổi kí tự có dấu thành không dấu */
( STRINPUT IN NVARCHAR2 )
RETURN NVARCHAR2 IS
STRCONVERT NVARCHAR2(32527);
BEGIN
    STRCONVERT := TRANSLATE(REPLACE(REPLACE(STRINPUT,'́', ''),'̀',''), 'áàảãạăắằẳẵặâấầẩẫậđéèẻẽẹêếềểễệíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÊẾỀỂỄỆÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ', 'aaaaaaaaaaaaaaaaadeeeeeeeeeeeiiiiiooooooooooooooooouuuuuuuuuuuyyyyyAAAAAAAAAAAAAAAAADEEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOOOUUUUUUUUUUUYYYYY' );
    RETURN STRCONVERT;
END;

http://10.176.1.60:4419/NHNService.asmx/NHNTTNHN
http://10.176.1.60:4419/NHNService.asmx/DongBoNhanSuNHNCK


for (Entry<Integer, List<CtckCoDongJoinCTCKTT>> entry : mapGroup.entrySet()) {
				CtckCoDongJoinCTCKTT objectFist = entry.getValue().stream().findFirst().get();
				CtckCoDongGroupBy itemCoDongDisplay = new CtckCoDongGroupBy();
				itemCoDongDisplay.setTenCTCK(objectFist.getTenVietTat() + " – " + objectFist.getTenCTCK());
				itemCoDongDisplay.setCtckThongTinId(objectFist.getCtckThongTinId());
				itemCoDongDisplay.setLstCoDong(entry.getValue());
				lstPageCtckCoDong.getLstCoDongDisplay().add(itemCoDongDisplay);

				//System.out.println("Item : " + entry.getKey() + " Count : " + entry.getValue());
			}
			
			if(lstPageCtckCoDong != null && lstPageCtckCoDong.getLstCoDongDisplay() != null && lstPageCtckCoDong.getLstCoDongDisplay().size() > 1) {
				List<CtckCoDongGroupBy> lstCtckCoDongGroupByDisplay = lstPageCtckCoDong.getLstCoDongDisplay();
				lstCtckCoDongGroupByDisplay = lstCtckCoDongGroupByDisplay.stream()
		        .sorted(Comparator.comparingInt(CtckCoDongGroupBy::getCtckThongTinId))
		        .collect(Collectors.toList());
				lstPageCtckCoDong.setLstCoDongDisplay(lstCtckCoDongGroupByDisplay);
			}
			
----

public Integer parseIntegerValue(Object obj) {
		Integer value = 0;
		if(obj != null) {
			if(obj instanceof Integer) {
				value = ((Integer) obj).intValue();
			}else if(obj instanceof BigDecimal){
				value = ((BigDecimal) obj).intValue();
			}else if(obj instanceof Long) {
				value = ((Long) obj).intValue();
			}
		}
		return value;
	}
	
	public Long parseLongValue(Object obj) {
		Long value = new Long(0);
		if(obj != null) {
			if(obj instanceof Integer) {
				value = ((Integer) obj).longValue();
			}else if(obj instanceof BigDecimal){
				value = ((BigDecimal) obj).longValue();
			}else if(obj instanceof Long) {
				value = ((Long) obj);
			}
		}
		return value;
	}
	
	public BigDecimal parseBigDecimalValue(Object obj) {
		BigDecimal value = new BigDecimal(0);
		if(obj != null) {
			if(obj instanceof Integer) {
				Integer intTyppe = ((Integer) obj).intValue();
				value = new BigDecimal(intTyppe);
			}else if(obj instanceof BigDecimal){
				value = ((BigDecimal) obj);
			}else if(obj instanceof Long) {
				long longType = ((Long) obj);
				value = new BigDecimal(longType);
			}
		}
		return value;
	}
	
	public Boolean parseBooleanValue(Object obj) {
		Boolean value = false;
		if(obj instanceof Integer) {
			if(((Integer) obj).intValue() == 1) {
				value = true;
			}else {
				value = false;
			}
		}else if(obj instanceof BigDecimal){
			if(((BigDecimal) obj).intValue() == 1) {
				value = true;
			}else {
				value = false;
			}
		}else if(obj instanceof Long){
			if(((Long) obj).intValue() == 1) {
				value = true;
			}else {
				value = false;
			}
		}else if(obj instanceof Boolean){
			value =  obj != null ? (Boolean) obj : false;
		}
		return value;
	}

List<String> listKyBc = new ArrayList<>();
listKyBc.add("BN");
listKyBc.add("BT");
listKyBc.add("N");
listKyBc.add("TU");
listKyBc.add("TH");
listKyBc.add("Q");
listKyBc.add("NAM");
listKyBc.add("TYC");
listKyBc.add("K");
listKyBc = listKyBc.stream().sorted().collect(Collectors.toList());

for (String kyBC : listKyBc) {
												for (Entry<String, Object> testo : map3.entrySet()) {
													if (testo.getKey().equals(kyBC)) {
														mapTemp.put(testo.getKey(), testo.getValue());
													}
												}
											}


    public static String removeSpecialCharacters(String str) {
        str = str.replaceAll("[^a-zA-Z0-9]", "_");
        str = str.substring(0, str.lastIndexOf("_")) + "." + str.substring(str.lastIndexOf("_") + 1, str.length());
        return str;
    }
	
	
    public static String convertUTF8ToNoSign(String org) {
        char arrChar[] = org.toCharArray();
        char result[] = new char[arrChar.length];
        for (int i = 0; i < arrChar.length; i++) {
            switch (arrChar[i]) {
            case '\u00E1':
            case '\u00E0':
            case '\u1EA3':
            case '\u00E3':
            case '\u1EA1':
            case '\u0103':
            case '\u1EAF':
            case '\u1EB1':
            case '\u1EB3':
            case '\u1EB5':
            case '\u1EB7':
            case '\u00E2':
            case '\u1EA5':
            case '\u1EA7':
            case '\u1EA9':
            case '\u1EAB':
            case '\u1EAD':
            case '\u0203':
            case '\u01CE':
                {
                    result[i] = 'a';
                    break;
                }
            case '\u00E9':
            case '\u00E8':
            case '\u1EBB':
            case '\u1EBD':
            case '\u1EB9':
            case '\u00EA':
            case '\u1EBF':
            case '\u1EC1':
            case '\u1EC3':
            case '\u1EC5':
            case '\u1EC7':
            case '\u0207':
                {
                    result[i] = 'e';
                    break;
                }
            case '\u00ED':
            case '\u00EC':
            case '\u1EC9':
            case '\u0129':
            case '\u1ECB':
                {
                    result[i] = 'i';
                    break;
                }
            case '\u00F3':
            case '\u00F2':
            case '\u1ECF':
            case '\u00F5':
            case '\u1ECD':
            case '\u00F4':
            case '\u1ED1':
            case '\u1ED3':
            case '\u1ED5':
            case '\u1ED7':
            case '\u1ED9':
            case '\u01A1':
            case '\u1EDB':
            case '\u1EDD':
            case '\u1EDF':
            case '\u1EE1':
            case '\u1EE3':
            case '\u020F':
                {
                    result[i] = 'o';
                    break;
                }
            case '\u00FA':
            case '\u00F9':
            case '\u1EE7':
            case '\u0169':
            case '\u1EE5':
            case '\u01B0':
            case '\u1EE9':
            case '\u1EEB':
            case '\u1EED':
            case '\u1EEF':
            case '\u1EF1':
                {
                    result[i] = 'u';
                    break;
                }
            case '\u00FD':
            case '\u1EF3':
            case '\u1EF7':
            case '\u1EF9':
            case '\u1EF5':
                {
                    result[i] = 'y';
                    break;
                }
            case '\u0111':
                {
                    result[i] = 'd';
                    break;
                }
            case '\u00C1':
            case '\u00C0':
            case '\u1EA2':
            case '\u00C3':
            case '\u1EA0':
            case '\u0102':
            case '\u1EAE':
            case '\u1EB0':
            case '\u1EB2':
            case '\u1EB4':
            case '\u1EB6':
            case '\u00C2':
            case '\u1EA4':
            case '\u1EA6':
            case '\u1EA8':
            case '\u1EAA':
            case '\u1EAC':
            case '\u0202':
            case '\u01CD':
                {
                    result[i] = 'A';
                    break;
                }
            case '\u00C9':
            case '\u00C8':
            case '\u1EBA':
            case '\u1EBC':
            case '\u1EB8':
            case '\u00CA':
            case '\u1EBE':
            case '\u1EC0':
            case '\u1EC2':
            case '\u1EC4':
            case '\u1EC6':
            case '\u0206':
                {
                    result[i] = 'E';
                    break;
                }
            case '\u00CD':
            case '\u00CC':
            case '\u1EC8':
            case '\u0128':
            case '\u1ECA':
                {
                    result[i] = 'I';
                    break;
                }
            case '\u00D3':
            case '\u00D2':
            case '\u1ECE':
            case '\u00D5':
            case '\u1ECC':
            case '\u00D4':
            case '\u1ED0':
            case '\u1ED2':
            case '\u1ED4':
            case '\u1ED6':
            case '\u1ED8':
            case '\u01A0':
            case '\u1EDA':
            case '\u1EDC':
            case '\u1EDE':
            case '\u1EE0':
            case '\u1EE2':
            case '\u020E':
                {
                    result[i] = 'O';
                    break;
                }
            case '\u00DA':
            case '\u00D9':
            case '\u1EE6':
            case '\u0168':
            case '\u1EE4':
            case '\u01AF':
            case '\u1EE8':
            case '\u1EEA':
            case '\u1EEC':
            case '\u1EEE':
            case '\u1EF0':
                {
                    result[i] = 'U';
                    break;
                }

            case '\u00DD':
            case '\u1EF2':
            case '\u1EF6':
            case '\u1EF8':
            case '\u1EF4':
                {
                    result[i] = 'Y';
                    break;
                }
            case '\u0110':
            case '\u00D0':
            case '\u0089':
                {
                    result[i] = 'D';
                    break;
                }
            default:
                result[i] = arrChar[i];
            }
        }
        return new String(result);
    }
									